;; -*- mode: scheme -*-

;; # Native
;;
;; This section describes features that are not officially part of the SCAM
;; language.  They provide access to lower-level ("native") Make features,
;; and cannot be described completely without introducing implementation
;; complexities of SCAM and "alien" aspects of Make.  They may be useful
;; when using SCAM to interoperate tightly with non-SCAM Make code.
;;
;; There is not a "native" module.  These features are
;; [intrinsics](#intrinsics), so `(require "native")` is not required.

;; Call the function variable whose native name is NAME with elements of
;; vector ARGV as arguments.
;;
(declare (name-apply func-name argv) &public)


;; Return 1 if native variable VAR-NAME has been assigned a value (as a data
;; or function variable), or `nil` if unassigned.
;;
(declare `(native-bound? var-name) &public)


;; Call a function, given its native name.
;;
(declare (native-call var-name ...args) &public)


;; Evaluate STR as GNU Make source.
;;
(declare (native-eval str) &public)


;; Describe the flavor of native variable VAR-NAME.  One of:
;;
;;  * `"simple"`
;;  * `"recursive"`
;;  * `"undefined"`
;;
(declare (native-flavor var-name) &public)


;; Get the "native name" of a SCAM global variable, function, or a built-in
;; function.
;;
(declare (native-name var-name) &public)


;; Describe the GNU make origin of native variable VAR-NAME.  Origin values
;; include: `"undefined"`, `"file"`, `"command line"`, `"automatic"`, ... .
;; See GNU Make docs for more.
;;
(declare (native-origin var-name) &public)


;; Return the value of native variable VAR-NAME.
;;
(declare (native-value var-name) &public)


;; Evaluate a GNU Make variable.  Unlike `value`, native-var will trigger
;; expansion of recursive variables.  This compiles to `$(VAR-NAME)`.  Note:
;; VAR-NAME may not contain literal balanced parentheses.
;;
(declare (native-var var-name) &public)


;; Assign VALUE to the native variable VAR-NAME as a data variable.  This
;; will replace any data or function variable binding for VAR-NAME.
;;
(declare (set-native var-name value ?retval) &public)


;; Assign VALUE to the native variable FUNC-NAME as a function variable.
;; This will replace any data or function variable binding for FUNC-NAME.
;;
;; Function variables cannot store values with complete fidelity -- the
;; value read back using `(native-value FUNC-NAME)` may not be exactly the
;; same.  However, it is guaranteed that when a SCAM function value is
;; assigned to a function, the variable's *behavior* (when called as a
;; function) will be as expected; furthermore, the value read back will be
;; functionally equivalent to the original SCAM function.
;;
;; Function names cannot begin or end in spaces, and other limitations may
;; apply depending on the version of Make, but any valid SCAM symbol will
;; work.
;;
(declare (set-native-fn func-name value ?retval) &public)

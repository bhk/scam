#!/bin/bash
:; for v in "${@//!/!1}" ; do v=${v// /!0} ; v=${v//	/!+}; a[++n]=${v:-!.} ; done ; SCAM_ARGS=${a[*]} exec make --no-print-directory -j ${SCAM_JOBS:-9} -f"$0"


define ///build.min
# compiled from build.scm
# Requires: core io parse compile gen runtime
# Requires: scam-ct
# Exports: build|~build,.,!1. prefix-of|#,.,sym:name;L.3995:S.3996@subst:S.3998@name:Q.4000@!4.:L.4003@S.4004!40global-name@S.4006!40sym exe-rules|~exe-rules,.,!1. mmap-rules|~mmap-rules,.,!1. mmap-all-deps|~mmap-all-deps,.,!1. mmap-all-requires|~mmap-all-requires,.,!1. link-rule|~link-rule,.,!1. test-rule|~test-rule,.,!1. compile-rule|~compile-rule,.,!1. rule|~rule,.,!1. scan-modules|~scan-modules,.,!1. scan-deps|~scan-deps,.,!1. if-bundled|~if-bundled,.,!1. if-bound|~if-bound,.,!1. if-exists|~if-exists,.,!1. mmap-okfiles|#,.,mmap:names;L.1856:S.1857@addsuffix:Q.1859@.ok:L.1863@S.1864!40mmap-objects@S.1866!40mmap@L.1868!40S.1869!50mmap-testmods!40S.1871!50mmap!40S.1873!50names mmap-testmods|#,.,mmap:names;L.1822:S.1823@foreach:S.1825@m:S.1827@names:L.1829@S.1830!40mod-testmod@L.1832!40S.1833!50assoc!40S.1835!50m!40S.1837!50mmap mmap-minfiles|#,.,mmap:names;L.1792:S.1793@filter-out:Q.1795@///%:L.1799@S.1800!40mmap-objects@S.1802!40mmap@S.1804!40names mmap-objects|#,.,mmap:names;L.1758:S.1759@foreach:S.1761@m:S.1763@names:L.1765@S.1766!40mod-object@L.1768!40S.1769!50assoc!40S.1771!50m!40S.1773!50mmap mmap-add|#,.,mmap:modname:source:object:testmod:requires:uses:is-boot;L.1719:S.1720@cons:L.1722@S!40vector@S.1723!40modname@S.1725!40source@S.1727!40object@S.1729!40testmod@S.1731!40requires@S.1733!40uses@S.1735!40is-boot:S.1738@mmap mod-deps|#,.,mod;L.1678:S.1679@promote:L.1681@S.1682!40wordlist@Q.1684!405@Q.1686!406@S.1688!40mod mod-is-boot|#,.,mod;L.1658:S.1659@nth:Q.1661@7:S.1663@mod mod-uses|#,.,mod;L.1639:S.1640@nth:Q.1642@6:S.1644@mod mod-requires|#,.,mod;L.1620:S.1621@nth:Q.1623@5:S.1625@mod mod-testmod|#,.,mod;L.1601:S.1602@nth:Q.1604@4:S.1606@mod mod-object|#,.,mod;L.1582:S.1583@nth:Q.1585@3:S.1587@mod mod-source|#,.,mod;L.1563:S.1564@nth:Q.1566@2:S.1568@mod mod-name|#,.,mod;L.1544:S.1545@nth:Q.1547@1:S.1549@mod strip-comments|~strip-comments,.,!1. scan-object|~scan-object,.,!1. scan-source|~scan-source,.,!1. echo-cmd|~echo-cmd,.,!1. *quiet*!V~*quiet*, *self*!V~*self*, link|~link,.,!1. epilogue|#,.,main-mod:main-func:rt;L.861:S.862@concat:Q.864@$(eval!40$(value!40:L.875@S.876!40bundle-var@S.878!40rt:Q.881@))!n:Q.887@$(call!40^start!a:L.896@S.897!40bundle-var@S.899!40main-mod:Q.902@!a:S.906@main-func:Q.908@!a$(SCAM_ARGS))!n prologue!=M,Q.831;#!3/bin/bash!n!c!b:for:v:in:"${!e//!3/!4}":!b:do:v=${v//:/@}:!b:v=${v//!2+/!3+}!b:a[++n]=${v!c-!3.}:!b:done:!b:SCAM_ARGS=${a[*]}:exec:make:--no-print-directory:-j:${SCAM_JOBS!c-9}:-f"$0"!n!n, read-object|~read-object,.,!1. bundle-var|#,.,file;L.761:S.762@concat:S.764@bundle-dir:L.766@S.767!40notdir@S.769!40file bundled?|#,.,path;L.727:S.728@filter:L.730@S.731!40concat@S.733!40bundle-dir@Q.735!40%:S.740@path bundle-path|#,.,source;L.695:S.696@concat:S.698@bundle-dir:L.700@S.701!40modnames-of@S.703!40source:Q.706@.min bundle-dir!=M,Q.673;///, modnames-of|~modnames-of,p,!1. strip-comments|~strip-comments,.,!1. skip-comments|~skip-comments,.,!1. traverse-graph|~traverse-graph,.,!1. dbg-print|~dbg-print,.,!1. resolve-mod|~resolve-mod,.,!1. clean-path|#,.,f;L.303:S.304@patsubst:Q.306@./%:Q.310@%:L.314@S.315!40subst@Q.317!40/./@Q.321!40/@S.325!40f filtersub|~filtersub,p,!1. resolve|~resolve,i,!1. base-env!V~base-env! env-rewind|~env-rewind,i,!1. env-rewind-x|~env-rewind-x,i,!1. use-module|~use-module,i,!1. require-module|~require-module,i,!1. env-export|~env-export,i,!1. import-binding|~import-binding,i,!1. is-private?|#,igen,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn check-argc|~check-argc,i,!1. check-type|~check-type,i,!1. compile-warn|~compile-warn,i,!1. gen-error|~gen-error,i,!1. env-rewind-M|~env-rewind-M,i,!1. after|~after,i,!1. gensym|~gensym,i,!1. gensym-name|~gensym-name,i,!1. gen-global-name|~gen-global-name,i,!1. *compile-mods*!V~*compile-mods*! *compile-outfile*!V~*compile-outfile*! *compile-file*!V~*compile-file*! *compile-subject*!V~*compile-subject*! EDefn.priv|#,igen,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,igen,B EFunc!=R,S;W;S,igen,F EVar!=R,S;W,igen,V ESMacro!=R,S;W,igen,M EXMacro!=R,S;W,igen,X ERecord!=R,S;W;S,igen,R EIL!=R,S;W,igen,I EArg!=R,W,igen,A EMarker!=R,W,igen,$ is-balanced?|#,igen,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,igen,Q Var!=R,S,igen,V Builtin!=R,W;L,igen,F Call!=R,S;L,igen,f Local!=R,W;W,igen,U Funcall!=R,L,igen,Y Concat!=R,L,igen,C Block!=R,L,igen,B Lambda!=R,S,igen,X compile-file|~compile-file,i,!1. construct-file|#,icompile,infile:exports:exe:reqs:uses;L.523:S.524@concat:Q.526@#!40compiled!40from!40:S.535@infile:Q.537@!n:L.541@S.542!40if@S.544!40reqs@L.546!40S.547!50concat!40Q.549!50#!510Requires!c!510!40S.556!50reqs!40Q.558!50!n:L.564@S.565!40if@S.567!40uses@L.569!40S.570!50concat!40Q.572!50#!510Requires!c!510!40S.579!50uses!40Q.581!50!n:S.587@exports:S.589@exe compile-prelude|~compile-prelude,i,!1. compile-text|~compile-text,i,!1. ct-mod!=M,Q.201;scam-ct,icompile rt-mod!=M,Q.184;runtime,icompile parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form file-exists?|~file-exists?,i,!1. read-lines|~read-lines,i,!1. read-file|~read-file,i,!1. write-file|~write-file,i,!1. getline|~getline,i,!1. shell!1|~shell!2,i,!1. printn|~printn,i,!1. echo-command|~echo-command,i,!1. quote-sh-arg|~quote-sh-arg,i,!1. xshell|~xshell,i,!1. SCAM_DEBUG!VSCAM_DEBUG! foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,compile)
$(call ^require,gen)
~filtersub = $(patsubst $1,$2,$(filter $1,$3))
~resolve-mod = $(patsubst ./%,%,$(subst /./,/,$(dir $1)$2$(suffix $1)))
~dbg-print = $(and $(if $(findstring $1,$(value SCAM_DEBUG)),$(call ~printf,$2,$3))1,$3)
~traverse-graph = $(if $(call ^u,$(word 1,$1)),$(call ~cons,$(call ^u,$(word 1,$1)),$(call ~traverse-graph,$(call ~append,$(wordlist 2,99999999,$1),$(filter-out $(call ~append,$1,$3),$(call ^Y,$(call ^u,$(word 1,$1)),,,,,,,,,$2))),$2,$(call ~append,$(call ^u,$(word 1,$1)),$3))))
define ~skip-comments
$(if $(or $(and $1,$(if $(call ^u,$(word 1,$1)),,1)),$(filter #%,$(word 1,$(call ^u,$(word 1,$1))))),$(call ~skip-comments,$(wordlist 2,99999999,$1)),$1)
endef
define ~strip-comments
$(call ~concat-vec,$(call ~skip-comments,$(call ~split,
,$1)),
)
endef
~modnames-of = $(basename $(notdir $1))
~read-object = $(if $(filter ///%,$1),$(value ///$(notdir $1)),$(call ~read-file,$1))
define ~link
$(and $(call ~write-file,$1,#!/bin/bash
:; for v in "$`{@//!/!1}" ; do v=$`{v// /!0} ; v=$`{v//	/!+}; a[++n]=$`{v:-!.} ; done ; SCAM_ARGS=$`{a[*]} exec make --no-print-directory -j $`{SCAM_JOBS:-9} -f"$`0"

$(foreach obj&,$2,
$ define ///$(notdir $(call ^u,$(obj&)))
$(call ^Y,$(call ~read-object,$(call ^u,$(obj&))),,,,,,,,,$(if $5,$(value ~identity),$(value ~strip-comments)))
$ endef
)$`(eval $`(value ///$(notdir $4)))
$`(call ^start,///$(notdir $3),$(call ~gen-global-name,main),$`(SCAM_ARGS))
)1,$(shell chmod +x $(call ~quote-sh-arg,$1)))
endef
~*self* := $(firstword $(MAKEFILE_LIST))
~*quiet* := $(if $(if $(filter-out u%,$(flavor _@)),1),$(value _@),@)
~echo-cmd = $(subst $`,$`$`,@ echo $(call ~quote-sh-arg,$(call ~concat-vec,$(^av))))
~scan-source = $(call ^Y,$(shell sed -E 's/ //g;s/^\$[(require|use)"([^"]*)".*|.*/\1\2/g;/../!d' $(call ~quote-sh-arg,$1)),,,,,,,,,$`(filter-out !.,$`(foreach symbol,require% use%,$`(call ~demote,$`(foreach w,$`(call ~filtersub,$`(symbol),%,$`1),$`(call ~demote,$`(call ~resolve-mod,$(call ^E,$1),$`w)))))))
define ~scan-object
$(call ^Y,$(wordlist 1,4,$(call ~split,
,$(call ~read-object,$1))),,,,,,,,,$`(foreach key,Requires Uses,$`(call ^d,$`(foreach m,$`(call ~promote,$`(call ~filtersub,$`(call ^d,# $`(key): %),%,$`1)),$`(call ~resolve-mod,$(call ^E,$1),$`m)))))
endef
define ~strip-comments
$(call ~concat-vec,$(call ~skip-comments,$(call ~split,
,$1)),
)
endef
~if-exists = $(wildcard $1)
~if-bound = $(if $(if $(filter-out u%,$(flavor $1)),1),$1)
~if-bundled = $(call ~if-bound,///$(call ~modnames-of,$1).min)
~scan-deps = $(if $1,$(call ~scan-source,$1),$(call ~scan-object,$2))
~scan-modules = $(if $(if $(call ^u,$(word 1,$2)),,1),$3,$(if $(call ~assoc-initial,$(subst !,!1,$(call ^d,$(call ~modnames-of,$(call ^u,$(word 1,$2))))),$3),$(call ~scan-modules,$1,$(wordlist 2,99999999,$2),$3),$(call ^Y,$1,$(wordlist 2,99999999,$2),$3,$(call ~modnames-of,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(or $(if $(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(call ~hash-get,odir,$1)$(call ~modnames-of,$(call ^u,$(word 1,$2))).min),$(call ~if-exists,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(basename $(call ^u,$(word 1,$2))).min),$(if $(call ~hash-get,rebundle,$1),$(call ~if-bundled,$(call ^u,$(word 1,$2)))),$(call ^u,$(word 1,$2))),$(call ~scan-deps,$(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(or $(if $(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(call ~hash-get,odir,$1)$(call ~modnames-of,$(call ^u,$(word 1,$2))).min),$(call ~if-exists,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(basename $(call ^u,$(word 1,$2))).min),$(if $(call ~hash-get,rebundle,$1),$(call ~if-bundled,$(call ^u,$(word 1,$2)))),$(call ^u,$(word 1,$2)))),,,$`(call ~scan-modules,$`1,$`(call ~append,$`2,$`(call ~promote,$`7),$`(call ~if-exists,$`(patsubst %.scm,%-q.scm,$`5))),$`(call ~cons,$`(call ^d,$`4) $`(call ^d,$`5) $`(call ^d,$`6) $`(call ^d,$`(call ~modnames-of,$`(call ~if-exists,$`(patsubst %.scm,%-q.scm,$`5)))) $`(call ^d,$`(call ~modnames-of,$`(call ~append,$`(call ~nth,1,$`7),$`(if $`(call ~hash-get,boot,$`1),,runtime.scm)))) $`(call ^d,$`(call ~modnames-of,$`(call ~append,$`(call ~nth,2,$`7),$`(if $`(call ~hash-get,boot,$`1),,scam-ct.scm)))) $`(call ^d,$`(call ~hash-get,boot,$`1)),$`3)))))
define ~rule
$1: $2$(if $3, | )$3$(call ~concat-vec,$(call ~cons,,$(foreach cmd&,$4,$(call ^d,$(if $(filter @%,$(word 1,$(call ^u,$(cmd&)))),$(call ^u,$(cmd&)),$(~*quiet*)$(call ^u,$(cmd&)))))),
	)


endef
~compile-rule = $(call ~rule,$1,$(call ~append,$2,$3,$(~*self*)),$4,$(call ^d,@ true $(call ^Y,$2,$5,$6,$7,$8,,,,,$``(and $``(info => compiling $(call ^E,$1,`))1,$``(call ~compile-file,$`(call ^E,$`1),$(call ^E,$1,`),$`(call ^E,$`5),$`(call ^E,$`2),$`(call ^E,$`3),$`(call ^E,$`4))))))
~test-rule = $(call ~rule,$1,$2,,$(call ^d,$(call ~echo-cmd,=> running ,$(basename $2))) $(call ^d,$(MAKE) -s -f $(if $(filter ///%,$3),$(call ~quote-sh-arg,$(~*self*)),$3) SCAM_MAIN='$(patsubst %.min,%,$2)' SCAM_MODS='$4') $(call ^d,touch $1))
~link-rule = $(call ~rule,$1,$2,$3,$(call ^d,@ true $(call ^Y,$(call ~sort-by,$`(notdir $`1),$4),$(call ~modnames-of,$(call ^u,$(word 1,$4))),,,,,,,,$``(and $``(info => linking $(call ^E,$1,`))1,$``(call ~link,$(call ^E,$1,`),$`(call ^E,$`1),$`(call ^E,$`2),$(call ^E,$5,`),$(call ^E,$6,`))))))
~mmap-all-requires = $(call ^set,~*mmap*,$(call ^set,~*mmap*,$1,$(~*mmap*)),$(call ~traverse-graph,$2,$`(call ~nth,5,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`1)),$`(~*mmap*))),))
~mmap-all-deps = $(call ^set,~*mmap*,$(call ^set,~*mmap*,$1,$(~*mmap*)),$(call ~traverse-graph,$2,$`(call ~promote,$`(wordlist 5,6,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`1)),$`(~*mmap*)))),))
~mmap-rules = $(call ~concat-vec,$(filter-out !.,$(foreach mod&,$1,$(call ^d,$(if $(call ~nth,2,$(call ^u,$(mod&))),$(if $(filter %.min,$(call ~nth,3,$(call ^u,$(mod&)))),$(call ~compile-rule,$(call ~nth,3,$(call ^u,$(mod&))),$(call ~nth,2,$(call ^u,$(mod&))),$(filter-out ///%,$(foreach m,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod&)))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$(filter-out $(call ~nth,3,$(call ^u,$(mod&))).ok,$(addsuffix .ok,$(foreach m,$(foreach m,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod&)))),$(call ~nth,4,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))),$(filter-out ///%,$(foreach m,$(call ~mmap-all-deps,$1,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod&))))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$(call ~nth,5,$(call ^u,$(mod&))),$(call ~nth,6,$(call ^u,$(mod&))),$(call ~nth,7,$(call ^u,$(mod&))))))$(if $(call ~nth,4,$(call ^u,$(mod&))),$(call ~test-rule,$(addsuffix .ok,$(filter-out ///%,$(foreach m,$(call ~nth,4,$(call ^u,$(mod&))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))),$(filter-out ///%,$(foreach m,$(call ~nth,4,$(call ^u,$(mod&))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$2,$(filter-out ///%,$(foreach m,$(call ~mmap-all-requires,$1,$(call ^d,$(call ~nth,4,$(call ^u,$(mod&))))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))))))),)
~exe-rules = $(call ^Y,$(call ~scan-modules,$(call ~append,$(call ~hash-bind,odir,$(dir $1)),$(call ~hash-bind,rebundle,$(if $(call ~eq,~apply,~apply),1,$(if $4,,$(error Warning: must use --boot; bundles are unusable))))),$(call ~append,$2,$(if $(if $3,,1),$(subst %,trace,$(if $4,%.scm,///%.min))),$(if $4,$(subst %,scam-ct,$(if $4,%.scm,///%.min)))),$(call ~scan-modules,$(call ~hash-bind,boot,1,$(call ~append,$(call ~hash-bind,odir,$(dir $1)),$(call ~hash-bind,rebundle,$(if $(call ~eq,~apply,~apply),1,$(if $4,,$(error Warning: must use --boot; bundles are unusable)))))),$(call ^d,$(subst %,runtime,$(if $4,%.scm,///%.min))) $(call ^d,$(subst %,scam-ct,$(if $4,%.scm,///%.min))))),$(notdir $(basename $(call ~append,$2,$(if $(if $3,,1),$(subst %,trace,$(if $4,%.scm,///%.min))),$(if $4,$(subst %,scam-ct,$(if $4,%.scm,///%.min)))))),,,,,,,,$`(call ~link-rule,$(call ^E,$1),$`(filter-out ///%,$`(foreach m,$`2,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))),$`(addsuffix .ok,$`(foreach m,$`(foreach m,$`2,$`(call ~nth,4,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))),$`(foreach m,$`(call ~mmap-all-requires,$`1,$`2),$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$`(foreach m,runtime,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$(call ^E,$5))$`(call ~mmap-rules,$`1,$`(foreach m,runtime,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))))
~build = $(eval $(call ~dbg-print,B,Eval: %s,$(call ~rule,.PHONY,,/exe /dir)$(call ~rule,/exe,,/dir $(call ^d,$1))$(call ~rule,/dir,,,$(call ^d,mkdir -p $`(dir $(call ^E,$1))))$(call ~exe-rules,$1,$2,$(call ~hash-get,no-trace,$3),$(call ~hash-get,boot,$3),$(call ~hash-get,symbols,$3))))

endef
 
define ///compile.min
# compiled from compile.scm
# Requires: core parse gen gen0 gen1 io macros runtime
# Requires: scam-ct
# Exports: compile-file|~compile-file,.,!1. construct-file|#,.,infile:exports:exe:reqs:uses;L.523:S.524@concat:Q.526@#!40compiled!40from!40:S.535@infile:Q.537@!n:L.541@S.542!40if@S.544!40reqs@L.546!40S.547!50concat!40Q.549!50#!510Requires!c!510!40S.556!50reqs!40Q.558!50!n:L.564@S.565!40if@S.567!40uses@L.569!40S.570!50concat!40Q.572!50#!510Requires!c!510!40S.579!50uses!40Q.581!50!n:S.587@exports:S.589@exe compile-prelude|~compile-prelude,.,!1. compile-text|~compile-text,.,!1. ct-mod!=M,Q.201;scam-ct, rt-mod!=M,Q.184;runtime, file-exists?|~file-exists?,i,!1. read-lines|~read-lines,i,!1. read-file|~read-file,i,!1. write-file|~write-file,i,!1. getline|~getline,i,!1. shell!1|~shell!2,i,!1. printn|~printn,i,!1. echo-command|~echo-command,i,!1. quote-sh-arg|~quote-sh-arg,i,!1. xshell|~xshell,i,!1. SCAM_DEBUG!VSCAM_DEBUG! gen1|~gen1,i,!1. c1-file|~c1-file,i,!1. c1-file*|~c1-file*,i,!1. c1-file-fset|~c1-file-fset,i,!1. c1-file-set|~c1-file-set,i,!1. c1-file|~c1-file,i,!1. c1|~c1,i,!1. c1-Var|~c1-Var,i,!1. c1-Block|~c1-Block,i,!1. c1-Funcall|~c1-Funcall,i,!1. c1-Local|~c1-Local,i,!1. make-list|~make-list,i,!1. c1-Call|~c1-Call,i,!1. c1-args9|~c1-args9,i,!1. c1-Builtin|~c1-Builtin,i,!1. il-vector|~il-vector,i,!1. c1-Error|~c1-Error,i,!1. c1-vec|~c1-vec,i,!1. c1-arg-trim|~c1-arg-trim,i,!1. c1-arg|~c1-arg,i,!1. c1|~c1,i,!1. one-char-names!=M,L.1323;S.1324:concat;Q.1326:a@b@c@d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z@;Q.1381:A@B@C@D@E@F@G@H@I@J@K@L@M@N@O@P@Q@R@S@T@U@V@W@X@Y@Z@_,igen1 voidify|#,igen1,node;L.1239:S.1240@if:L.1242@S.1243!40case@S.1245!40node@L.1247!40L.1248!50S.1249!510Builtin!50S.1251!510name!50S.1253!510args!40L.1256!50S.1257!510filter!50Q.1259!510error!5110eval!5110info!50S.1267!510name@L.1271!40L.1272!50S.1273!510Call!50S.1275!510name!50S.1277!510args!40L.1280!50S.1281!510filter!50Q.1283!510^require!50S.1287!510name:S.1292@node:L.1294@S.1295!40Builtin@Q.1297!40if@L.1301!40S!50vector!40S.1302!50node!40L.1304!50S.1305!510String!50Q.1307!510!511. gen-extract|~gen-extract,i,!1. gen-embed|~gen-embed,i,!1. gen-decode|#,igen1,str;L.1062:S.1063@subst:Q.1065@~N:Q.1069@!n:Q.1073@~S:Q.1077@$:Q.1081@~R:Q.1085@):Q.1089@~C:Q.1093@!a:Q.1097@~L:Q.1101@(:Q.1105@~1:Q.1109@~:S.1113@str gen-encode|#,igen1,str;L.995:S.996@subst:Q.998@~:Q.1002@~1:Q.1006@(:Q.1010@~L:Q.1014@!a:Q.1018@~C:Q.1022@):Q.1026@~R:Q.1030@$:Q.1034@~S:Q.1038@!n:Q.1042@~N:S.1046@str c1-Lambda|~c1-Lambda,i,!1. gen0|~gen0,i,!1. c0|~c0,i,!1. c0-error|~c0-error,i,!1. c0-mq|~c0-mq,i,!1. c0-mq-list|~c0-mq-list,i,!1. c0-mq-node|~c0-mq-node,i,!1. c0-mq-vec|~c0-mq-vec,i,!1. il-qmerge|~il-qmerge,i,!1. il-foldcat|~il-foldcat,i,!1. c0-mq|~c0-mq,i,!1. lambda-env|~lambda-env,i,!1. c0-block|~c0-block,i,!1. c0-block-cc|~c0-block-cc,i,!1. ml.special-require|~ml.special-require,i,!1. ml.special-declare|~ml.special-declare,i,!1. ml.special-define|~ml.special-define,i,!1. c0-declare-define|~c0-declare-define,i,!1. check-name|~check-name,i,!1. block-result|#,igen0,inblock:env:node;L.1839:S.1840@append:L.1842@S.1843!40if@S.1845!40inblock@L.1847!40S!50vector!40Q.1848!50env!40S.1852!50env:L.1856@S.1857!40or@S.1859!40node@Q.1861!40Q collect-flags|~collect-flags,i,!1. c0-record|~c0-record,i,!1. special-form-func|#,igen0,name;L.1088:S.1089@local-to-global:L.1091@S.1092!40concat@Q.1094!40ml.special-@S.1098!40name c0-inline-fn|~c0-inline-fn,i,!1. c0-vec|~c0-vec,i,!1. c0-S-error|~c0-S-error,i,!1. c0-S-macro-error|~c0-S-macro-error,i,!1. c0-local|~c0-local,i,!1. il-demote|~il-demote,i,!1. c0-block|~c0-block,i,!1. c0|~c0,i,!1. resolve|~resolve,i,!1. base-env!V~base-env! env-rewind|~env-rewind,i,!1. env-rewind-x|~env-rewind-x,i,!1. use-module|~use-module,i,!1. require-module|~require-module,i,!1. env-export|~env-export,i,!1. import-binding|~import-binding,i,!1. is-private?|#,igen,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn check-argc|~check-argc,i,!1. check-type|~check-type,i,!1. compile-warn|~compile-warn,i,!1. gen-error|~gen-error,i,!1. env-rewind-M|~env-rewind-M,i,!1. after|~after,i,!1. gensym|~gensym,i,!1. gensym-name|~gensym-name,i,!1. gen-global-name|~gen-global-name,i,!1. *compile-mods*!V~*compile-mods*! *compile-outfile*!V~*compile-outfile*! *compile-file*!V~*compile-file*! *compile-subject*!V~*compile-subject*! EDefn.priv|#,igen,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,igen,B EFunc!=R,S;W;S,igen,F EVar!=R,S;W,igen,V ESMacro!=R,S;W,igen,M EXMacro!=R,S;W,igen,X ERecord!=R,S;W;S,igen,R EIL!=R,S;W,igen,I EArg!=R,W,igen,A EMarker!=R,W,igen,$ is-balanced?|#,igen,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,igen,Q Var!=R,S,igen,V Builtin!=R,W;L,igen,F Call!=R,S;L,igen,f Local!=R,W;W,igen,U Funcall!=R,L,igen,Y Concat!=R,L,igen,C Block!=R,L,igen,B Lambda!=R,S,igen,X parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,gen)
$(call ^require,gen0)
$(call ^require,gen1)
$(call ^require,io)
$(call ^require,macros)
~compile-text = $(call ^set,~*compile-subject*,$(call ^set,~*compile-subject*,$(call ~penc,$1),$(~*compile-subject*)),$(call ^set,~*compile-file*,$(call ^set,~*compile-file*,$3,$(~*compile-file*)),$(call ^set,~*compile-outfile*,$(call ^set,~*compile-outfile*,$4,$(~*compile-outfile*)),$(call ~c0-block-cc,$(call ~parse-subject,$(~*compile-subject*)),$(or $2,$(~base-env)),$(if $4,$`(call ~append,$`(call ~gen1,$`1,1),$`(call ^d,$`(call ~env-export,$`2))),$`(call ~append,$`(call ~gen1,$`1),$`(call ^d,$`2)))))))
~compile-prelude = $(and $(foreach r,$(~*compile-mods*),$(if $(filter runtime,$(notdir $(basename $r))),$(eval include $r)))1,$(if $(if $1,,1),$(call ~append,$(call ~require-module,runtime,),$(call ~use-module,scam-ct))))
define ~compile-file
$(call ^set,~*compile-mods*,$(call ^set,~*compile-mods*,$4,$(~*compile-mods*)),$(call ^Y,$(call ~read-file,$1),$2,$(call ~compile-prelude,$3),,,,,,,$`(call ^Y,$`(call ~compile-text,$`1,$`(wordlist 2,99999999,$`3),$(call ^E,$1),$`2),$`1,$(call ^E,$1),$`2,,,,,,$``(if $``(call ^u,$``(word 1,$``1)),$``(and $``(foreach e&,$``(call ^u,$``(word 1,$``1)),$``(call ^d,$``(info $``(call ~describe-error,$``(call ^u,$``(e&)),$``2,$``3))))1,$``(error error compiling SCAM)),$``(call ~write-file,$``4,# compiled from $``3
$``(if $(call ^E,$5,`),# Requires: $(call ^E,$5,`)
)$``(if $(call ^E,$6,`),# Requires: $(call ^E,$6,`)
)$``(call ~nth,3,$``1)$``(call ~nth,2,$``1))))))
endef

endef
 
define ///core.min
# compiled from core.scm
# Requires: runtime
# Requires: scam-ct
# Exports: foldl|~foldl,.,!1. index-of|~index-of,.,!1. assoc|#,.,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,.,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,.,!1. type?|#,.,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,.,!1. memoize|~memoize,.,!1. memoenc|~memoenc,p,!1. mcache|~mcache,p,!1. 1+|~1+,.,!1. split|~split,.,!1. uniq|~uniq,.,!1. see|~see,.,!1. expect|#,.,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,.,!1. printf|~printf,.,!1. sprintf|~sprintf,.,!1. vsprintf|~vsprintf,.,!1. format|~format,.,!1. format-record|~format-record,.,!1. data-foreach|~data-foreach,p,!1. format-hash|~format-hash,.,!1. format|~format,.,!1. hash-compact|~hash-compact,.,!1. hash-get|~hash-get,.,!1. hash-find|~hash-find,.,!1. hash-value|~hash-value,.,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,.,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,.,!1. append|~append,.,!1. isnumber|~isnumber,.,!1. while|~while,.,!1. reverse|~reverse,.,!1. rev-zeroes|~rev-zeroes,p,!1. rev-by-10s|~rev-by-10s,p,!1. indices|~indices,.,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,.,!1. vec-or|~vec-or,.,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,.,!1. select-vec|~select-vec,.,!1. map-call|~map-call,.,!1. butlast|~butlast,.,!1. strip-vec|#,.,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,.,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,.,!1. cons|~cons,.,!1. concat-vec|~concat-vec,.,!1. xor|~xor,.,!1. identity|~identity,.,a;S.91:a eq|~eq,.,!1. SCAM_DEBUG!VSCAM_DEBUG, ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
~eq = $(if $(findstring 1$1,$(findstring 1$2,1$1)),1)
~identity = $1
~xor = $(if $1,$(if $2,,$1),$2)
~concat-vec = $(call ~promote,$(subst $  ,$(call ~demote,$2),$1))
~cons = $(call ~demote,$1)$(if $2, )$2
~conj = $1$(if $1, )$(call ~demote,$2)
~last = $(call ~promote,$(lastword $1))
~butlast = $(wordlist 2,$(words $1),X $1)
~map-call = $(foreach x&,$2,$(call ^d,$(call $1,$(call ^u,$(x&)))))
~select-vec = $(filter-out !,$(foreach dx,$2,$(if $(call ^Y,$(call ~promote,$(dx)),,,,,,,,,$1),$(dx),!)))
~select-words = $(foreach a,$(foreach x,$2,$(if $(call ^Y,$x,,,,,,,,,$1),$x)),$a)
~vec-or = $(call ^u,$(word 1,$(filter-out !.,$1)))
~indicesX = $(if $(word $(words $2),$1),$(words $2) $(call ~indicesX,$1,. $2))
~indices = $(call ~indicesX,$1,.,1)
~rev-by-10s = $(if $1,$(if $2,$(foreach p,10 9 8 7 6 5 4 3 2 1,$(call ~rev-by-10s,$(wordlist $(word $p,0 1 2 3 4 5 6 7 8 9)$(patsubst %0,%1,$2),$p$2,$1),$(patsubst 0%,%,$2))),$(foreach p,10 9 8 7 6 5 4 3 2 1,$(word $p,$1))))
~rev-zeroes = $(if $(word 1$21,$1),$(call ~rev-zeroes,$1,0$2),$2)
~reverse = $(wordlist 1,99999999,$(call ~rev-by-10s,$1,$(call ~rev-zeroes,$1,)))
~while-0 = $(if $(filter iiiiiiiiiiiiiiiiiiii,$4),1 $(call ^d,$3),$(if $(call ^Y,$3,,,,,,,,,$1),$(call ~while-0,$1,$2,$(call ^Y,$3,,,,,,,,,$2),i$4),0 $(call ^d,$3)))
~while-N = $(if $(filter 0,$(word 1,$3)),$3,$(if $(filter iii,$5),$(if $(filter 1,$4),$(call ~while-N,$1,$2,$3,$4 0,ii),$3),$(call ~while-N,$1,$2,$(if $4,$(call ~while-N,$1,$2,$3,$(wordlist 2,99999999,$4)),$(call ~while-0,$1,$2,$(call ~nth,2,$3))),$4,i$5)))
~while = $(if $(call ^Y,$3,,,,,,,,,$1),$(call ^Y,$(call ^Y,$3,,,,,,,,,$2),,,,,,,,,$`(call ~nth,2,$`(call ~while-N,$(call ^E,$1),$(call ^E,$2),$`(call ~while-0,$(call ^E,$1),$(call ^E,$2),$`1),1,ii))),$3)
~isnumber = $(if $(filter 0% 1% 2% 3% 4% 5% 6% 7% 8% 9%,$(subst -,,$1)),$(if $(patsubst .%,%,$(patsubst %e,%,$(subst 0,,$(patsubst -%,%,$(subst $  ,_,$(subst E0,e,$(subst E-,E,$(subst e,E,$(subst 9,0,$(subst 8,0,$(subst 7,0,$(subst 6,0,$(subst 5,0,$(subst 4,0,$(subst 3,0,$(subst 2,0,$(subst 1,0,$1))))))))))))))))),,$1))
~append = $(filter %,$1 $2 $3 $4 $5 $6 $7 $8 $(if $(value 9),$(call ~promote,$(value 9))))
~hash-bind = $(subst %,!8,$(call ^d,$1))!=$(call ^d,$2)$(if $3, )$3
~hash-key = $(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$1))))
~hash-value = $(call ~nth,2,$(subst !=, ,$1))
~hash-find = $(word 1,$(filter $(subst %,!8,$(call ^d,$1))!=%,$2))
~hash-get = $(call ~nth,2,$(subst !=, ,$(call ~hash-find,$1,$2))$(if $3, x $(call ~demote,$3)))
~hash-compact = $(if $(if $1,,1),$2,$(call ~append,$(word 1,$1),$(call ~hash-compact,$(filter-out $(word 1,$(subst !=,!=% ,$(word 1,$1))),$(wordlist 2,99999999,$1)))))
~format-hash = $(if $(findstring !=,$1),$(if $(call ~eq,$1,$(foreach w,$1,$(call ~hash-bind,$(call ~nth,1,$(subst !=, ,$w)),$(call ~nth,2,$(subst !=, ,$w))))),{$(call ~concat-vec,$(foreach e,$1,$(call ^d,$(call ~format,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$e))))): $(call ~format,$(call ~nth,2,$(subst !=, ,$e))))),$(if ,,, ))}))
~data-foreach = $(if $2,$(call ~data-foreach,$1,$(wordlist 2,99999999,$2),$(wordlist 2,99999999,$3),$4$(if $4, )$(call ^Y,$(if $(filter L,$(word 1,$2)),$3,$(if $(filter S,$(word 1,$2)),$(call ~nth,1,$3),$(if $(filter W,$(word 1,$2)),$(word 1,$3),$(error bad encoding in ctor pattern)))),$(word 1,$2),,,,,,,,$1)),$4)
~format-record = $(if $(filter !:%,$(word 1,$1)),$(call ^Y,$(call ~hash-get,$(word 1,$1),$(^tags)),$(wordlist 2,99999999,$1),$(word 1,$1),$1,,,,,,$`(and $`1,$`(call ~eq,$`4,$`(call ~data-foreach,$``(if $``(call ~eq,S,$``2),$``(call ^d,$``1),$``1),$`(wordlist 2,99999999,$`1),$`2,$`3)),($`(call ~nth,1,$`1)$`(if $`(wordlist 2,99999999,$`1), )$`(call ~data-foreach,$``(if $``(and $``(call ~eq,L,$``2),$``(if $``1,,1)),[],$``(call ~format,$``1)),$`(wordlist 2,99999999,$`1),$`2,)))))
define ~format
$(or $(if $(findstring !,$1),$(or $(if $(call ~eq,$1,$(foreach w,$1,$(call ~demote,$(call ~promote,$w)))),[$(foreach w,$1,$(call ~format,$(call ~promote,$w)))]),$(call ~format-hash,$1),$(call ~format-record,$1))),$(call ~isnumber,$1),"$(subst $ 	,\t,$(subst 
,\n,$(subst ",\",$(subst \,\\,$1))))")
endef
~vsprintf = $(call ~concat-vec,$(foreach w,$(join !. $(wordlist 2,99999999,$1),$(subst $  !% !%,%,$(subst %, !%,%s$(word 1,$1)))),$(if $(findstring !%s,$w),$(subst !%s,,$w),$(if $(findstring !%q,$w),$(call ~demote,$(call ~format,$(call ^u,$(word 1,$(subst !%q, ,$w)))))$(word 2,$(subst !%q,!. ,$w)),$(if $(findstring !%,$w),$(and $(info ** Warning: bad format string: '$(call ~nth,1,$1)')1,$(word 2,$(subst !%,! %,$w))))))))
~sprintf = $(call ~vsprintf,$(^av))
~printf = $(info $(call ~vsprintf,$(^av)))
define ~expect-x
$(if $(call ~eq,$1,$2),$(if $(findstring O,$(SCAM_DEBUG)),$(info OK: $(call ~format,$1))),$(and $(info $3: error: assertion failed
A: $(call ~format,$1)
B: $(call ~format,$2)
)1,$(error )))
endef
define ~see
$(if $(findstring $1,$2),1,$(and $(info Expected: $(subst 
,
          ,$1))1,$(info $   Within: $(subst 
,
          ,$2))))
endef
~uniq-x = $(if $1,$(word 1,$1) $(call ~uniq-x,$(filter-out $(word 1,$1),$(wordlist 2,99999999,$1))))
~uniq = $(subst ~1,~,$(subst ~p,%,$(filter %,$(call ~uniq-x,$(subst %,~p,$(subst ~,~1,$1))))))
~split = $(foreach w,$(subst $(call ^d,$1),!. !.,$(call ^d,$2)),$(or $(subst !.,,$w),!.))
~1+ = $(if $(filter %1 %2 %3 %4,$1),$(subst 1~,2,$(subst 2~,3,$(subst 3~,4,$(subst 4~,5,$1~)))),$(if $(filter %5 %6 %7,$1),$(subst 5~,6,$(subst 6~,7,$(subst 7~,8,$1~))),$(if $(findstring 9~,$1~),$(call ~1+,$(or $(subst 9~,,$1~),0))0,$(patsubst %0,%1,$(patsubst %8,%9,$1)))))
~mcache = $(and $(if $6,$(info Warning: memoized function passed more than three arguments))1,$(if $(if $(if $(filter-out u%,$(flavor $1)),1),,1),$(call ~set-global,$1,$(call ^Y,$3,$4,$5,,,,,,,$2)))1,$(value $1))
~memoenc = $(if $(or $1,$2,$3),~~$(subst ~,~0,$1)$(call ~memoenc,$2,$3))
~memoize = $(if $(if $(if $(filter-out u%,$(flavor $1)),1),,1),$(info Warning: [memoize-1] function '$1' not defined.),$(call ^Y,$(value $1),*memo$(call ~memoenc,$1),$1,,,,,,,$`(call ~set-rglobal,$`3,$``(call ~mcache,$`(call ^E,$`2)$``(call ~memoenc,$``1,$``2,$``3),$`(call ^E,$`1),$``1,$``2,$``3,$``(or $``4,$``5,$``6,$``7,$``8)))))
~sort-by = $(filter-out %!!,$(subst !!,!! ,$(sort $(foreach w,$2,$(call ~demote,$(call ^Y,$(call ~promote,$w),,,,,,,,,$1))!!$w))))
~assoc-initial = $(call ~promote,$(firstword $(if $(findstring %,$1),$(subst !8,$1,$(filter !8 !8!0%,$(subst $1,!8,$2))),$(filter $1 $1!0%,$2))))
~index-of = $(words $(subst !_, ,$(filter %!|,$(subst !_$(call ^d,$2)!_,!_!| ,!_$(subst $  ,!_,$1)!_))))
~foldl = $(if $(firstword $3),$(call ~foldl,$1,$(call ^Y,$2,$(call ^u,$(word 1,$3)),,,,,,,,$1),$(wordlist 2,99999999,$3)),$2)

endef
 
define ///escape.min
# compiled from escape.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: protect-define|~protect-define,.,!1. protect-rhs|~protect-rhs,.,!1. protect-lhs|~protect-lhs,.,!1. protect-expr|~protect-expr,.,!1. protect-arg|~protect-arg,.,!1. make-balanced|~make-balanced,p,!1. check-balance|~check-balance,p,!1. check-balance-r|~check-balance-r,p,!1. balance|~balance,p,!1. balance-match|~balance-match,p,!1. balance-match-r|~balance-match-r,p,!1. balance2|~balance2,p,!1. protect-trim|~protect-trim,.,!1. protect-ltrim|~protect-ltrim,.,!1. replace-hash|~replace-hash,p,str;L.440:S.441@subst:Q.443@#:Q.447@$":S.451@str replace-nl|~replace-nl,p,str;L.410:S.411@subst:Q.413@!n:Q.417@$':S.422@str quote-hash|~quote-hash,p,!1. protect-hash2|~protect-hash2,p,!1. escape|~escape,.,str;L.241:S.242@subst:Q.244@$:Q.248@$`:S.253@str foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
~escape = $(subst $`,$``,$1)
define ~protect-hash2
$(if $(findstring \.#,$1),$(call ~protect-hash2,$(subst \.#,.#\\,$1)),$(subst .#,,$1))
endef
define ~quote-hash
$(if $(findstring #,$1),$(call ~protect-hash2,$(subst #,.#\#,$1)),$1)
endef
define ~replace-nl
$(subst 
,$`',$1)
endef
define ~replace-hash
$(subst #,$`",$1)
endef
~protect-ltrim = $(if $(findstring $(word 1,0$10),0),$` )$1
define ~protect-trim
$(if $(and $(findstring $1,$(wordlist 1,99999999,$1)),$(filter-out 
%,$(word 1,$1)),$(filter-out %
,$(lastword $1))),$1,$(if $1,$`(if ,,$1)))
endef
~balance2 = $(call ~promote,$(if $(findstring !C,$1),$`(if ,,$(subst !C,,$1)),$1))
~balance-match-r = $(if $1,$(call ~balance-match-r,$(word 1,$2),$(wordlist 2,99999999,$2),$(if $(filter !L%,$1),$3 $1,$(if $(and $(filter !R,$1),$(word 2,$3)),$(filter-out %!,$3!)($(subst !L,,$(subst !C,,$(lastword $3)))),$3$1))),$3)
~balance-match = $(call ~balance-match-r,$(word 1,$1),$(wordlist 2,99999999,$1),!.)
~balance = $(call ~balance2,$(subst !L,$`[,$(subst !R,$`],$(subst $  ,,$(call ~balance-match,$(subst $[, !L,$(subst $], !R ,$(subst $(if ,,,),$(if ,,!C,),$(call ~demote,$1)))))))))
~check-balance-r = $(if $(word 2,$1),$(call ~check-balance-r,$(subst $  ,,$(filter-out !L%!R,$(subst !L, !L,$(word 1,$1))))$(wordlist 2,99999999,$1)),$1)
~check-balance = $(call ~check-balance-r,$(subst $],!R .,$(subst $[,!L,$(subst !,,$(subst $ 	,,$(subst $  ,,$1))))))
~make-balanced = $(if $(findstring !,$2),$(call ~balance,$1),$(if $(findstring $(if ,,,),$2),$`(if ,,$1),$1))
~protect-arg = $(if $(or $(findstring $[,$1),$(findstring $],$1),$(findstring $(if ,,,),$1)),$(call ~make-balanced,$1,$(call ~check-balance,$1)),$1)
define ~protect-expr
$(subst 
,$`',$1)
endef
define ~protect-lhs
$(subst #,$`",$(subst X,$(subst 
,$`',$(call ~protect-arg,$1)),$(if $(or $(findstring :,$1),$(findstring =,$1),$(if $(findstring $1,$(wordlist 1,99999999,$1)),,1),$(filter ifeq ifneq ifdef ifndef else endif define endef override include sinclude -include export unexport private undefine vpath,$1)),$`(if ,,X),X)))
endef
define ~protect-rhs
$(call ~quote-hash,$(call ~protect-ltrim,$(subst 
,$`',$1)))
endef
define ~protect-define
$(if $(or $(findstring define,$1),$(findstring endef,$1),$(findstring \,$1)),$(subst |1,|,$(subst |.,,$(subst |. ,$(subst |,|1,
),$(foreach w&,$(call ~split,
,$1),$(subst |,|1,$(if $(filter define endef,$(word 1,$(call ^u,$(w&)))),$` )$(call ^u,$(w&))$(if $(filter %\,$(call ^d,$(call ^u,$(w&)))),$` ))|.)))),$1)
endef

endef
 
define ///gen.min
# compiled from gen.scm
# Requires: core io parse escape runtime
# Requires: scam-ct
# Exports: resolve|~resolve,.,!1. base-env!V~base-env, env-rewind|~env-rewind,.,!1. env-rewind-x|~env-rewind-x,.,!1. use-module|~use-module,.,!1. require-module|~require-module,.,!1. mod-find|~mod-find,p,!1. env-from-file|~env-from-file,p,!1. *dummy-env*!V~*dummy-env*,p env-load|#,p,filename;L.2560:S.2561@define:`.2563@L.2564!40S.2565!50read-module-lines!40S.2567!50filename:L.2570@S.2571!40if@L.2573!40S.2574!50filter!40Q.2576!50///%!40S.2580!50filename@L.2583!40S.2584!50split!40Q.2586!50!n!40L.2590!50S.2591!510value!50S.2593!510filename@L.2597!40S.2598!50read-lines!40S.2600!50filename!40Q.2602!501!40Q.2604!504;L.2610:S.2611@env-parse:L.2613@S.2614!40read-module-lines@S.2616!40filename env-parse|#,p,lines;L.2513:S.2514@env-expand:L.2516@S.2517!40first@L.2519!40S.2520!50filtersub!40L.2522!50S!510vector!50Q.2523!510#!5110Exports!c!5110%!40Q.2532!50%!40S.2536!50lines env-export|~env-export,.,!1. env-import|~env-import,p,!1. import-binding|~import-binding,.,!1. is-private?|#,.,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn env-expand|#,p,v;L.2037:S.2038@subst:Q.2040@!5n:Q.2044@!n:Q.2048@!5!40:Q.2053@!ai!40:Q.2059@!5V:Q.2063@!5=V!a:Q.2068@!d:Q.2072@!5=F!a:Q.2077@!e:Q.2081@!530:Q.2085@!c:Q.2089@!520:Q.2093@!b:Q.2097@!510:Q.2101@!a:Q.2105@!50:Q.2109@!5e:Q.2113@!e:Q.2117@!5d:Q.2121@!d:Q.2125@!5c:Q.2129@!c:Q.2133@!5b:Q.2137@!b:Q.2141@!5a:Q.2145@!a:Q.2149@!55:Q.2153@!541:Q.2157@!54:Q.2161@!531:Q.2165@!53:Q.2169@!521:Q.2173@!52:Q.2177@!511:S.2181@v env-compress|#,p,v;L.1861:S.1862@subst:Q.1866@!511:Q.1870@!52:Q.1874@!521:Q.1878@!53:Q.1882@!531:Q.1886@!54:Q.1890@!541:Q.1894@!55:Q.1900@!a:Q.1904@!5a:Q.1908@!b:Q.1912@!5b:Q.1916@!c:Q.1920@!5c:Q.1924@!d:Q.1928@!5d:Q.1932@!e:Q.1936@!5e:Q.1942@!50:Q.1946@!a:Q.1950@!510:Q.1954@!b:Q.1958@!520:Q.1962@!c:Q.1966@!530:Q.1970@!e:Q.1976@!5=F!a:Q.1981@!d:Q.1985@!5=V!a:Q.1990@!5V:Q.1994@!ai!40:Q.2000@!5!40:Q.2007@!n:Q.2011@!5n:S.2015@v check-argc|~check-argc,.,!1. check-type|~check-type,.,!1. compile-warn|~compile-warn,.,!1. gen-error|~gen-error,.,!1. env-rewind-M|~env-rewind-M,.,!1. after|~after,.,!1. gensym|~gensym,.,!1. gensym-name|~gensym-name,.,!1. filtersub|~filtersub,p,!1. gen-global-name|~gen-global-name,.,!1. *compile-mods*!V~*compile-mods*, *compile-outfile*!V~*compile-outfile*, *compile-file*!V~*compile-file*, *compile-subject*!V~*compile-subject*, EDefn.priv|#,.,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,.,B EFunc!=R,S;W;S,.,F EVar!=R,S;W,.,V ESMacro!=R,S;W,.,M EXMacro!=R,S;W,.,X ERecord!=R,S;W;S,.,R EIL!=R,S;W,.,I EArg!=R,W,.,A EMarker!=R,W,.,$ is-balanced?|#,.,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,.,Q Var!=R,S,.,V Builtin!=R,W;L,.,F Call!=R,S;L,.,f Local!=R,W;W,.,U Funcall!=R,L,.,Y Concat!=R,L,.,C Block!=R,L,.,B Lambda!=R,S,.,X protect-define|~protect-define,i,!1. protect-rhs|~protect-rhs,i,!1. protect-lhs|~protect-lhs,i,!1. protect-expr|~protect-expr,i,!1. protect-arg|~protect-arg,i,!1. protect-trim|~protect-trim,i,!1. protect-ltrim|~protect-ltrim,i,!1. escape|~escape,iescape,str;L.241:S.242@subst:Q.244@$:Q.248@$`:S.253@str parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form file-exists?|~file-exists?,i,!1. read-lines|~read-lines,i,!1. read-file|~read-file,i,!1. write-file|~write-file,i,!1. getline|~getline,i,!1. shell!1|~shell!2,i,!1. printn|~printn,i,!1. echo-command|~echo-command,i,!1. quote-sh-arg|~quote-sh-arg,i,!1. xshell|~xshell,i,!1. SCAM_DEBUG!VSCAM_DEBUG! foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,escape)
$(if $(call ^add-tags,Q!=String!0S V!=Var!0S F!=Builtin!0W!0L f!=Call!0S!0L U!=Local!0W!0W Y!=Funcall!0L C!=Concat!0L B!=Block!0L X!=Lambda!0S),)
$(if $(call ^add-tags,B!=EBuiltin!0S!0W!0S F!=EFunc!0S!0W!0S V!=EVar!0S!0W M!=ESMacro!0S!0W X!=EXMacro!0S!0W R!=ERecord!0S!0W!0S I!=EIL!0S!0W A!=EArg!0W $`!=EMarker!0W),)
~gen-global-name = $(if $(filter %&global,$2),$1,$(SCAM_NS)$1)
~filtersub = $(patsubst $1,$2,$(filter $1,$3))
~gensym-name = $(if $(filter $1&$3!=%,$2),$(call ~gensym-name,$1,$2 .,$(words $2)),$1&$3)
~gensym = S $(call ~gensym-name,$(call ~nth,2,$1),$2)
~after = $(filter %,$(subst !S, ,$(wordlist 2,99999999,$(subst !S$1!S,!S$1!S ,!S$(subst $  ,!S,$2)!S))))
~env-rewind-M = $(call ~append,$(call ~hash-find,$`,$1),$(call ~after,$(call ~hash-find,$2,$1),$1))
~gen-error = $(call ^d,E.$(call ~form-index,$1)) $(call ^d,$(call ~vsprintf,$(wordlist 2,99999999,$(^av))))
~compile-warn = $(info $(call ~describe-error,$(call ~gen-error,$1,$2,$3,$4,$5),$(call ~pdec,$(~*compile-subject*)),$(~*compile-file*)))
~check-type = $(if $(filter $(or $(patsubst %,%%,$1),%),$(word 1,$2)),,$(call ~gen-error,$(or $2,$3),$(if $2,invalid,missing) $4 in $5$(if $1,; expected a $(subst |1,|,$(subst |.,,$(subst |. ,$(subst |,|1, or ),$(foreach ty&,$1,$(subst |,|1,$(call ~form-typename,$(call ^u,$(ty&))))|.)))))))
~check-argc = $(if $(filter-out $1,$(words $(wordlist 3,99999999,$2))),$(call ~gen-error,$(call ~nth,2,$2),$(if ,,%q accepts %s arguments, not %s),$(call ~nth,2,$(call ~nth,2,$2)),$1,$(words $(wordlist 3,99999999,$2))))
~import-binding = $(if $(if $(filter b p i%,$(word 3,$2)),,1),$(call ~hash-bind,$1,$(call ~append,$(wordlist 1,2,$2),i$(if $(or $(subst !.,,$(word 4,$2)),$(if $(filter M,$(firstword $2)),1)),$3),$(wordlist 4,99999999,$2))))
~env-import = $(if $2,$1,$(filter %,$(foreach b,$1,$(call ~import-binding,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$b)))),$(call ~nth,2,$(subst !=, ,$b)),$3))))
define ~env-export
# Exports: $(subst 
,!n,$(subst $(if ,,,i ),! ,$(subst $(if ,,!=V,),!V,$(subst $(if ,,!=F,),|,$(subst !30,@,$(subst !20,:,$(subst !10,;,$(subst !0,$(if ,,,),$(subst @,!e,$(subst |,!d,$(subst :,!c,$(subst ;,!b,$(subst $(if ,,,),!a,$(subst !41,!5,$(subst !31,!4,$(subst !21,!3,$(subst !11,!2,$1)))))))))))))))))

endef
~*dummy-env* := $(call ~hash-bind,,I $(call ^d,Q !.) p)
define ~env-from-file
$(if $1,$(or $(call ~env-import,$(subst !2,!11,$(subst !3,!21,$(subst !4,!31,$(subst !5,!41,$(subst !a,$(if ,,,),$(subst !b,;,$(subst !c,:,$(subst !d,|,$(subst !e,@,$(subst $(if ,,,),!0,$(subst ;,!10,$(subst :,!20,$(subst @,!30,$(subst |,$(if ,,!=F,),$(subst !V,$(if ,,!=V,),$(subst ! ,$(if ,,,i ),$(subst !n,
,$(call ^u,$(word 1,$(call ~filtersub,#!0Exports:!0%,%,$(if $(filter ///%,$1),$(call ~split,
,$(value $1)),$(call ~read-lines,$1,1,4)))))))))))))))))))))),$2,$(call ^d,$(notdir $(basename $1)))),$(~*dummy-env*)))
endef
$(if $(call ~memoize,~env-from-file),)
~mod-find = $(or $(firstword $(filter %$(notdir $1).min,$(~*compile-mods*))),$(if $(and $(if $(filter %/runtime.min,$(~*compile-mods*)),,1),$(if $(filter-out u%,$(flavor ///$(notdir $1).min)),1)),///$(notdir $1).min,$(info warning: cannot find module $1)))
~require-module = $(call ~env-from-file,$(call ~mod-find,$1),$2)
~use-module = $(call ^Y,$(call ~require-module,$1,),,,,,,,,,$`(if $`1,$`(call ^set,SCAM_MODS,$`(call ^set,SCAM_MODS,$`(~*compile-mods*),$`(SCAM_MODS)),$`(and $`(call ^require,$(call ^E,$1))1,$`(or $`(filter %,$`(foreach e,$`1,$`(if $`(filter X,$`(firstword $`(call ~nth,2,$`(subst !=, ,$`e)))),$`e))),$`(~*dummy-env*))))))
~env-rewind-x = $(call ^Y,$(call ~hash-find,$2,$1),$1,$2,,,,,,,$`(if $`(call ~filtersub,i%,%,$`(filter b p i%,$`(word 3,$`(call ~nth,2,$`(subst !=, ,$`1))))),$`(call ~env-rewind-x,$`(call ~require-module,$`(call ~promote,$`(call ~filtersub,i%,%,$`(filter b p i%,$`(word 3,$`(call ~nth,2,$`(subst !=, ,$`1)))))),1),$`3),$`(call ~after,$`1,$`2)))
define ~env-rewind
$(call ~append,$(call ~hash-find,$`,$1),$(and $3,$(if $(filter #,$(word 2,$3)),,1),$(call ~hash-bind,$2,$(wordlist 1,2,$3))),$(call ~env-rewind-x,$1,$2))
endef
~base-env := $(call ~append,$(foreach b,abspath basename dir error eval firstword flavor info lastword notdir origin realpath shell sort strip suffix value warning wildcard words,$(call ~hash-bind,$b,B $(call ^d,$b) b 1)),$(foreach b,addprefix addsuffix filter filter-out findstring join word,$(call ~hash-bind,$b,B $(call ^d,$b) b 2)),$(foreach b,.foreach patsubst .subst wordlist,$(call ~hash-bind,$b,B $(call ^d,$(patsubst .%,%,$b)) b 3)),$(foreach b,and or call,$(call ~hash-bind,$b,B $(call ^d,$b) b %)),$(call ~hash-bind,if,B if b 2!0or!03),$(call ~hash-bind,*args*,V ^av b),$(foreach v,MAKEFILE_LIST .DEFAULT_GOAL,$(call ~hash-bind,$v,V $(call ^d,$v) b)))
~resolve = $(if $(filter S%,$(word 1,$1)),$(call ~nth,2,$(subst !=, ,$(or $(filter $(word 2,$1)!=%,$2),$(filter $(word 2,$1)!=%,$(~base-env))))),-)

endef
 
define ///gen0.min
# compiled from gen0.scm
# Requires: core parse escape gen runtime
# Requires: scam-ct
# Exports: gen0|~gen0,.,!1. c0|~c0,.,!1. c0-error|~c0-error,.,!1. c0-mq|~c0-mq,.,!1. c0-mq-list|~c0-mq-list,.,!1. c0-mq-node|~c0-mq-node,.,!1. c0-mq-vec|~c0-mq-vec,.,!1. il-qmerge|~il-qmerge,.,!1. il-foldcat|~il-foldcat,.,!1. c0-mq|~c0-mq,.,!1. ml.special-begin|~ml.special-begin,p,!1. ml.special-lambda|~ml.special-lambda,p,!1. lambda-check|~lambda-check,p,!1. lambda-env|~lambda-env,.,!1. lambda-env2|~lambda-env2,p,!1. lambda-arg9|~lambda-arg9,p,!1. c0-block|~c0-block,.,!1. c0-block-cc|~c0-block-cc,.,!1. ml.special-require|~ml.special-require,.,!1. ml.special-declare|~ml.special-declare,.,!1. ml.special-define|~ml.special-define,.,!1. c0-declare-define|~c0-declare-define,.,!1. check-name|~check-name,.,!1. block-result|#,.,inblock:env:node;L.1839:S.1840@append:L.1842@S.1843!40if@S.1845!40inblock@L.1847!40S!50vector!40Q.1848!50env!40S.1852!50env:L.1856@S.1857!40or@S.1859!40node@Q.1861!40Q find-flag|~find-flag,p,name:flags;L.1796:S.1797@firstword:L.1799@S.1800!40filter@L.1802!40S.1803!50concat!40Q.1805!50%!40S.1809!50name@S.1812!40flags collect-flags|~collect-flags,.,!1. c0-L|~c0-L,p,!1. c0-record|~c0-record,.,!1. special-form-func|#,.,name;L.1088:S.1089@local-to-global:L.1091@S.1092!40concat@Q.1094!40ml.special-@S.1098!40name c0-inline-fn|~c0-inline-fn,.,!1. c0-vec|~c0-vec,.,!1. c0-S|~c0-S,p,!1. c0-S-error|~c0-S-error,.,!1. c0-S-macro-error|~c0-S-macro-error,.,!1. c0-ctor|~c0-ctor,p,!1. c0-local|~c0-local,.,!1. il-demote|~il-demote,.,!1. c0-block|~c0-block,.,!1. c0|~c0,.,!1. resolve|~resolve,i,!1. base-env!V~base-env! env-rewind|~env-rewind,i,!1. env-rewind-x|~env-rewind-x,i,!1. use-module|~use-module,i,!1. require-module|~require-module,i,!1. env-export|~env-export,i,!1. import-binding|~import-binding,i,!1. is-private?|#,igen,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn check-argc|~check-argc,i,!1. check-type|~check-type,i,!1. compile-warn|~compile-warn,i,!1. gen-error|~gen-error,i,!1. env-rewind-M|~env-rewind-M,i,!1. after|~after,i,!1. gensym|~gensym,i,!1. gensym-name|~gensym-name,i,!1. gen-global-name|~gen-global-name,i,!1. *compile-mods*!V~*compile-mods*! *compile-outfile*!V~*compile-outfile*! *compile-file*!V~*compile-file*! *compile-subject*!V~*compile-subject*! EDefn.priv|#,igen,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,igen,B EFunc!=R,S;W;S,igen,F EVar!=R,S;W,igen,V ESMacro!=R,S;W,igen,M EXMacro!=R,S;W,igen,X ERecord!=R,S;W;S,igen,R EIL!=R,S;W,igen,I EArg!=R,W,igen,A EMarker!=R,W,igen,$ is-balanced?|#,igen,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,igen,Q Var!=R,S,igen,V Builtin!=R,W;L,igen,F Call!=R,S;L,igen,f Local!=R,W;W,igen,U Funcall!=R,L,igen,Y Concat!=R,L,igen,C Block!=R,L,igen,B Lambda!=R,S,igen,X protect-define|~protect-define,i,!1. protect-rhs|~protect-rhs,i,!1. protect-lhs|~protect-lhs,i,!1. protect-expr|~protect-expr,i,!1. protect-arg|~protect-arg,i,!1. protect-trim|~protect-trim,i,!1. protect-ltrim|~protect-ltrim,i,!1. escape|~escape,iescape,str;L.241:S.242@subst:Q.244@$:Q.248@$`:S.253@str parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,escape)
$(call ^require,gen)
~il-demote = $(if $(filter Q,$(firstword $1)),Q $(call ^d,$(word 2,$1)),f ^d $(call ^d,$1))
~c0-local = U $(subst .,,$1) $(words $(subst .,. ,$(subst $1,,$2$(subst .,,$1))))
$(if $(if $(findstring U,$(SCAM_DEBUG)),$(and $(call ^fset,~c0-local-unchecked,$(value ~c0-local))1,$(call ^fset,~c0-local,$`(and $`(if $`(if $`(findstring $`2,$`1),,1),$`(call ~compile-warn,$`3,reference to upvalue '%q',$`(call ~nth,2,$`3)))1,$`(call ~c0-local-unchecked,$`1,$`2))))),)
~c0-ctor = $(call ~c0,L.441 S.442!0lambda $(call ^d,L.444 $(foreach i&,$(call ~indicesX,$2,.,1),$(call ^d,$(call ~gensym,S a$(call ^u,$(i&)),$3)))) $(call ^d,L.449 $(call ^d,$1) $(foreach i&,$(call ~indicesX,$2,.,1),$(call ^d,$(call ~gensym,S a$(call ^u,$(i&)),$3)))),$3)
~c0-S-macro-error = $(call ~gen-error,$1,attempt to obtain value of compound macro %q,$(call ~nth,2,$1))
~c0-S-error = $(call ~gen-error,$1,$(if $(filter B,$(firstword $2)),attempt to obtain value of builtin %q,$(if $2,internal error: binding = '$2',undefined variable %q)),$(call ~nth,2,$1))
define ~c0-S
$(if $(filter A,$(firstword $3)),$(call ~c0-local,$(word 2,$3),$(word 2,$(call ~hash-get,$`,$2)),$1),$(if $(filter V,$(firstword $3)),V $(call ^d,$(call ^n,2,$3)),$(if $(filter F,$(firstword $3)),$(if $(filter #,$(call ^n,2,$3)),$(call ~c0-S-macro-error,$1),F value $(call ^d,Q $(call ^d,$(call ^n,2,$3)))),$(if $(filter M,$(firstword $3)),$(call ~c0,$(call ^n,2,$3),$(call ~env-rewind,$2,$(call ~nth,2,$1))),$(if $(filter I,$(firstword $3)),$(call ^n,2,$3),$(if $(filter R,$(firstword $3)),$(call ~c0-ctor,$1,$(call ^n,2,$3),$2),$(call ~c0-S-error,$1,$3)))))))
endef
~c0-vec = $(foreach f&,$1,$(call ^d,$(call ~c0,$(call ^u,$(f&)),$2)))
define ~c0-inline-fn
$(or $(call ~check-argc,$(words $(call ^u,$(word 1,$4))),$1),$(call ~c0-block,$(wordlist 2,99999999,$4),$(call ~append,$(join $(addsuffix !=,$(call ^u,$(word 1,$4))),$(foreach a&,$(wordlist 3,99999999,$1),$(call ^d,I $(call ^d,$(call ~c0,$(call ^u,$(a&)),$2)) p))),$(call ~hash-bind,#pos,P $(call ~form-index,$1),$(call ~env-rewind,$2,$(call ~nth,2,$(call ~nth,2,$1)),$3)))))
endef
~c0-record = $(or $(call ~check-argc,$(words $3),$1),C $(call ~cons,Q $(call ^d,$4),$(foreach n,$(call ~indicesX,$3,.,1),$(call ~append,$(call ^d,Q !0),$(call ^d,$(if $(filter S,$(word $n,$3)),$(call ~il-demote,$(call ~c0,$(call ~nth,$n,$(wordlist 3,99999999,$1)),$2,)),$(call ~c0,$(call ~nth,$n,$(wordlist 3,99999999,$1)),$2,)))))))
~c0-L = $(if $(filter F,$(firstword $3)),$(if $(call ^n,4,$3),$(call ~c0-inline-fn,$1,$2,$3,$(call ^n,4,$3)),f $(call ^d,$(call ^n,2,$3)) $(call ~c0-vec,$(wordlist 3,99999999,$1),$2)),$(if $(filter B,$(firstword $3)),$(or $(call ~check-argc,$(call ^n,4,$3),$1),F $(call ^n,2,$3) $(call ~c0-vec,$(wordlist 3,99999999,$1),$2)),$(if $(filter X,$(firstword $3)),$(if $(word 3,$3),$(call ~c0,$(call $(call ^n,2,$3),$1),$2,$4),$(call ~gen-error,$1,cannot use xmacro in its own file)),$(if $(filter R,$(firstword $3)),$(call ~c0-record,$1,$2,$(call ^n,2,$3),$(call ^n,4,$3)),$(if $(if $(word 2,$1),,1),$(call ~gen-error,$1,missing function/macro name),$(if $3,Y $(call ~c0-vec,$(wordlist 2,99999999,$1),$2),$(if $(if $(filter-out u%,$(flavor ~ml.special-$(call ~nth,2,$(call ~nth,2,$1)))),1),$(call ~ml.special-$(call ~nth,2,$(call ~nth,2,$1)),$1,$2,$4),$(call ~gen-error,$(call ~nth,2,$1),undefined symbol: %q,$(call ~nth,2,$(call ~nth,2,$1))))))))))
~collect-flags = $(if $(and $(filter S%,$(word 1,$1)),$(filter &private &inline &global,$(call ~nth,2,$(call ^u,$(word 1,$1))))),$(call ~collect-flags,$(wordlist 2,99999999,$1),$(call ~append,$2,$(word 1,$1))),$(call ~cons,$2,$1))
~find-flag = $(firstword $(filter %$1,$2))
~check-name = $(foreach sym,$(or $(findstring :,$1),$(findstring $`,$1),$(findstring %,$1)),$(call ~gen-error,$1,names may not contain '%s' characters,$(sym)))
define ~c0-declare-define
$(call ~append,$(if $3,env $(call ^d,$(call ~append,$(if $(filter L%,$(word 1,$4)),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,2,$4)),F $(call ^d,$(call ~gen-global-name,$(call ~nth,2,$(call ~nth,2,$4)),$(call ^u,$(word 1,$6)))) $(or $(if $(firstword $(filter %&private,$(call ^u,$(word 1,$6)))),p),.) $(call ^d,$(if $(firstword $(filter %&inline,$(call ^u,$(word 1,$6)))),$(call ~append,$(call ^d,$(foreach sym&,$(wordlist 3,99999999,$(if $(filter `% '%,$(word 1,$4)),$(call ~nth,2,$4),$4)),$(call ^d,$(call ~nth,2,$(call ^u,$(sym&)))))),$(wordlist 2,99999999,$6))))),$(if $(filter S%,$(word 1,$4)),$(call ~hash-bind,$(call ~nth,2,$4),V $(call ^d,$(call ~gen-global-name,$(call ~nth,2,$4),$(call ^u,$(word 1,$6)))) $(if $(firstword $(filter %&private,$(call ^u,$(word 1,$6)))),p)),$(if $(filter S%,$(word 1,$(call ~nth,2,$4))),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,2,$4)),M $(call ^d,$(call ^u,$(word 1,$(wordlist 2,99999999,$6)))) $(if $(firstword $(filter %&private,$(call ^u,$(word 1,$6)))),p)),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,2,$(call ~nth,2,$4))),F # $(or $(if $(firstword $(filter %&private,$(call ^u,$(word 1,$6)))),p),.) $(call ^d,$(call ~append,$(call ^d,$(foreach sym&,$(wordlist 3,99999999,$(if $(filter `% '%,$(word 1,$4)),$(call ~nth,2,$4),$4)),$(call ^d,$(call ~nth,2,$(call ^u,$(sym&)))))),$(wordlist 2,99999999,$6))))))),$2))),$(or $(or $(or $(call ~check-type,L S,$(if $5,$4,$(if $(filter `% '%,$(word 1,$4)),$(call ~nth,2,$4),$4)),$1,FORM,($(or $5,define) $(if $5,,$(if $(filter `% '%,$(word 1,$4)),`))FORM$(if $5,, ...))),$(if $5,$(if $(wordlist 2,99999999,$6),$(call ~gen-error,$(wordlist 2,99999999,$6),too many arguments to (declare ...))),$(if $(if $(wordlist 2,99999999,$6),,1),$(call ~gen-error,$1,no BODY supplied to (define FORM BODY...)),$(if $(and $(filter S%,$(word 1,$(if $(filter `% '%,$(word 1,$4)),$(call ~nth,2,$4),$4))),$(word 2,$(wordlist 2,99999999,$6))),$(call ~gen-error,$(call ~nth,2,$(wordlist 2,99999999,$6)),too many arguments to (define %sVAR EXPR),$(if $(filter `% '%,$(word 1,$4)),`))))),$(if $(filter L%,$(word 1,$(if $(filter `% '%,$(word 1,$4)),$(call ~nth,2,$4),$4))),$(call ^u,$(word 1,$(filter-out !.,$(foreach sym&,$(filter-out S%,$(wordlist 2,99999999,$(if $(filter `% '%,$(word 1,$4)),$(call ~nth,2,$4),$4))),$(call ^d,$(call ~check-type,S,$(call ^u,$(sym&)),$1,NAME,$(call ~sprintf,(%s %s(NAME...)),$(or $5,define),$(if $(filter `% '%,$(word 1,$4)),`))))))))),$(call ~check-name,$(if $(filter L%,$(word 1,$4)),$(call ~nth,2,$4),$(if $(filter S%,$(word 1,$4)),$4,$(if $(filter S%,$(word 1,$(call ~nth,2,$4))),$(call ~nth,2,$4),$(call ~nth,2,$(call ~nth,2,$4)))))),$(and $(firstword $(filter %&inline,$(call ^u,$(word 1,$6)))),$(or $5,$(if $(filter L%,$(word 1,$4)),,1)),$(call ~gen-error,$(firstword $(filter %&inline,$(call ^u,$(word 1,$6)))),'&inline' applies only to function definitions))),$(if $(if $(or $5,$(filter `% '%,$(word 1,$4))),,1),$(call ~c0,$(if $(filter S%,$(word 1,$4)),L.2971 S.2972!0call $(call ^d,Q ^set) $(call ^d,Q $(call ^d,$(call ~gen-global-name,$(call ~nth,2,$4),$(call ^u,$(word 1,$6))))) $(call ^d,$(call ~nth,2,$6)),L.2997 S.2998!0call $(call ^d,Q ^fset) $(call ^d,Q $(call ^d,$(call ~gen-global-name,$(call ~nth,2,$(call ~nth,2,$4)),$(call ^u,$(word 1,$6))))) $(call ^d,L.3018 S.3019!0lambda $(call ^d,L.3021 $(wordlist 3,99999999,$4)) $(wordlist 2,99999999,$6))),$(if $(filter L%,$(word 1,$4)),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,2,$4)),F $(call ^d,$(call ~gen-global-name,$(call ~nth,2,$(call ~nth,2,$4)),$(call ^u,$(word 1,$6)))) $(or $(if $(firstword $(filter %&private,$(call ^u,$(word 1,$6)))),p),.) !.,$2),$2)))),Q))
endef
~ml.special-define = $(call ~c0-declare-define,$1,$2,$3,$(call ~nth,3,$1),,$(call ~collect-flags,$(wordlist 4,99999999,$1)))
~ml.special-declare = $(call ~c0-declare-define,$1,$2,$3,$(call ~nth,3,$1),declare,$(call ~collect-flags,$(wordlist 4,99999999,$1)))
~ml.special-require = $(or $(call ~check-type,Q,$(call ~nth,3,$1),$1,STRING,(require STRING)),$(call ^Y,$(call ~require-module,$(call ~nth,2,$(call ~nth,3,$1)),$(firstword $(filter %&private,$(wordlist 4,99999999,$1)))),$2,$(call ~nth,2,$(call ~nth,3,$1)),,,,,,,$`(if $`1,$`(call ~append,$`(if $(call ^E,$3),env $`(call ^d,$`(call ~append,$`1,$`2))),$`(or f ^require $`(call ^d,Q $`(call ^d,$`(notdir $`3))),Q)))),$(call ~gen-error,$1,require: Cannot find module %q,$(call ~nth,2,$(call ~nth,3,$1))))
~c0-block-cc = $(if $(if $1,,1),$(call ^Y,$(if $(if $5,,1),$4,$(call ~append,$4,$(filter-out Q,$(call ^d,$(if $(filter env,$(word 1,$5)),$(wordlist 3,99999999,$5),$5))))),$(if $(filter env,$(word 1,$5)),$(call ~nth,2,$5),$2),,,,,,,,$3),$(call ~c0-block-cc,$(wordlist 2,99999999,$1),$(if $(filter env,$(word 1,$5)),$(call ~nth,2,$5),$2),$3,$(if $(if $5,,1),$4,$(call ~append,$4,$(filter-out Q,$(call ^d,$(if $(filter env,$(word 1,$5)),$(wordlist 3,99999999,$5),$5))))),$(call ~c0,$(call ^u,$(word 1,$1)),$(if $(filter env,$(word 1,$5)),$(call ~nth,2,$5),$2),1)))
~c0-block = $(call ~c0-block-cc,$1,$2,$`(if $`(word 2,$`1),B $`1,$`(or $`(call ^u,$`(word 1,$`1)),Q !.)))
~lambda-arg9 = $(if $1,$(call ^Y,$(call ~gensym-name,arg9,$3),$1,$2,,,,,,,$`(call ~append,$`(foreach n,$`(call ~indicesX,$`2,.,1),$`(call ~hash-bind,$`(call ~nth,2,$`(call ~nth,$`n,$`2)),M $`(call ^d,L S!0call $`(call ^d,Q ^n) $`(call ^d,Q $`n) $`(call ^d,S $`1)) .)),$`(call ~hash-bind,$`1,A $`39))))
~lambda-env2 = $(call ~append,$(call ~hash-bind,$`,$` $3),$(foreach n,$(call ~indicesX,$(wordlist 1,8,$1),.,1),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,$n,$1)),A $3$n)),$(call ~lambda-arg9,$(wordlist 9,99999999,$1),$3,$2),$2)
~lambda-env = $(call ~lambda-env2,$1,$2,.$(word 2,$(call ~hash-get,$`,$2)))
~lambda-check = $(call ~check-type,$1,$2,$3,$4,(lambda (NAME...) BODY...))
~ml.special-lambda = $(or $(call ~lambda-check,L,$(call ~nth,3,$1),$1,(NAME...)),$(call ^u,$(word 1,$(filter-out !.,$(foreach a&,$(wordlist 2,99999999,$(call ~nth,3,$1)),$(call ^d,$(call ~lambda-check,S,$(call ^u,$(a&)),$1,NAME)))))),X $(call ^d,$(call ~c0-block,$(wordlist 4,99999999,$1),$(call ~lambda-env,$(wordlist 2,99999999,$(call ~nth,3,$1)),$2))))
~ml.special-begin = $(call ~c0-block,$(wordlist 3,99999999,$1),$2)
~il-foldcat = $(if $(word 2,$1),C $1,$(if $(word 1,$1),$(call ^u,$(word 1,$1)),Q !.))
~il-qmerge = $(if $(filter Q%,$(word 1,$(word 1,$1))),$(call ~il-qmerge,$(wordlist 2,99999999,$1),$2$(word 2,$(call ^u,$(word 1,$1)))),$(call ~append,$(if $(subst !.,,$2),$(call ^d,Q $2)),$(if $1,$(call ~append,$(word 1,$1),$(call ~il-qmerge,$(wordlist 2,99999999,$1),)))))
~c0-mq-vec = $(call ~il-foldcat,$(call ~il-qmerge,$(subst $  , $(call ^d,Q !0) ,$2),$(call ^d,$(word 1,$1) )))
~c0-mq-node = $(call ~c0-mq-vec,$1,$(call ^d,$(call ~il-demote,$2)))
~c0-mq-list = $(call ~c0-mq-vec,$1,$(foreach a&,$(wordlist 2,99999999,$1),$(call ^d,$(if $(filter @%,$(word 1,$(call ^u,$(a&)))),$(call ~c0,$(call ~nth,2,$(call ^u,$(a&))),$2),$(call ~il-demote,$(call ~c0-mq,$(call ^u,$(a&)),$2,$3))))))
~c0-mq = $(if $(filter $(if ,,,%),$(word 1,$1)),$(if $3,$(call ~c0-mq-node,$1,$(call ~c0-mq,$(call ~nth,2,$1),$2,$(wordlist 2,99999999,$3))),$(call ~c0,$(call ~nth,2,$1),$2)),$(if $(filter `%,$(word 1,$1)),$(call ~c0-mq-node,$1,$(call ~c0-mq,$(call ~nth,2,$1),$2,$(call ~append,$3,1))),$(if $(filter L%,$(word 1,$1)),$(call ~c0-mq-list,$1,$2,$3),$(if $(filter E%,$(word 1,$1)),$1,Q $(call ^d,$1)))))
~c0-error = $(call ~gen-error,$1,$(if $(filter $(if ,,,%),$(word 1,$1)),unquote (,) outside of a quasiquoted (`) expression,bad AST node: %q),$1)
~c0 = $(if $(filter S%,$(word 1,$1)),$(call ~c0-S,$1,$2,$(call ~resolve,$1,$2)),$(if $(filter Q%,$(word 1,$1)),Q $(call ^d,$(call ~nth,2,$1)),$(if $(filter L%,$(word 1,$1)),$(call ~c0-L,$1,$2,$(call ~resolve,$(call ~nth,2,$1),$2),$3),$(if $(filter E%,$(word 1,$1)),$1,$(if $(filter '%,$(word 1,$1)),Q $(call ^d,$(call ~nth,2,$1)),$(if $(filter `%,$(word 1,$1)),$(call ~c0-mq,$(call ~nth,2,$1),$2),$(call ~c0-error,$1)))))))
~gen0 = $(call ~c0-block-cc,$1,$2,$`1)

endef
 
define ///gen1.min
# compiled from gen1.scm
# Requires: core parse escape gen gen0 runtime
# Requires: scam-ct
# Exports: gen1|~gen1,.,!1. c1-file|~c1-file,.,!1. c1-file*|~c1-file*,.,!1. c1-file-fset|~c1-file-fset,.,!1. c1-file-set|~c1-file-set,.,!1. c1-file|~c1-file,.,!1. c1|~c1,.,!1. c1-Var|~c1-Var,.,!1. c1-Block|~c1-Block,.,!1. c1-Funcall|~c1-Funcall,.,!1. c1-Local|~c1-Local,.,!1. make-list|~make-list,.,!1. c1-Call|~c1-Call,.,!1. c1-args9|~c1-args9,.,!1. c1-Builtin|~c1-Builtin,.,!1. il-vector|~il-vector,.,!1. c1-Error|~c1-Error,.,!1. c1-vec|~c1-vec,.,!1. c1-arg-trim|~c1-arg-trim,.,!1. c1-arg|~c1-arg,.,!1. c1|~c1,.,!1. one-char-names!=M,L.1323;S.1324:concat;Q.1326:a@b@c@d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z@;Q.1381:A@B@C@D@E@F@G@H@I@J@K@L@M@N@O@P@Q@R@S@T@U@V@W@X@Y@Z@_, voidify|#,.,node;L.1239:S.1240@if:L.1242@S.1243!40case@S.1245!40node@L.1247!40L.1248!50S.1249!510Builtin!50S.1251!510name!50S.1253!510args!40L.1256!50S.1257!510filter!50Q.1259!510error!5110eval!5110info!50S.1267!510name@L.1271!40L.1272!50S.1273!510Call!50S.1275!510name!50S.1277!510args!40L.1280!50S.1281!510filter!50Q.1283!510^require!50S.1287!510name:S.1292@node:L.1294@S.1295!40Builtin@Q.1297!40if@L.1301!40S!50vector!40S.1302!50node!40L.1304!50S.1305!510String!50Q.1307!510!511. gen-extract|~gen-extract,.,!1. gen-embed|~gen-embed,.,!1. gen-decode|#,.,str;L.1062:S.1063@subst:Q.1065@~N:Q.1069@!n:Q.1073@~S:Q.1077@$:Q.1081@~R:Q.1085@):Q.1089@~C:Q.1093@!a:Q.1097@~L:Q.1101@(:Q.1105@~1:Q.1109@~:S.1113@str gen-encode|#,.,str;L.995:S.996@subst:Q.998@~:Q.1002@~1:Q.1006@(:Q.1010@~L:Q.1014@!a:Q.1018@~C:Q.1022@):Q.1026@~R:Q.1030@$:Q.1034@~S:Q.1038@!n:Q.1042@~N:S.1046@str c1-Lambda|~c1-Lambda,.,!1. gen0|~gen0,i,!1. c0|~c0,i,!1. c0-error|~c0-error,i,!1. c0-mq|~c0-mq,i,!1. c0-mq-list|~c0-mq-list,i,!1. c0-mq-node|~c0-mq-node,i,!1. c0-mq-vec|~c0-mq-vec,i,!1. il-qmerge|~il-qmerge,i,!1. il-foldcat|~il-foldcat,i,!1. c0-mq|~c0-mq,i,!1. lambda-env|~lambda-env,i,!1. c0-block|~c0-block,i,!1. c0-block-cc|~c0-block-cc,i,!1. ml.special-require|~ml.special-require,i,!1. ml.special-declare|~ml.special-declare,i,!1. ml.special-define|~ml.special-define,i,!1. c0-declare-define|~c0-declare-define,i,!1. check-name|~check-name,i,!1. block-result|#,igen0,inblock:env:node;L.1839:S.1840@append:L.1842@S.1843!40if@S.1845!40inblock@L.1847!40S!50vector!40Q.1848!50env!40S.1852!50env:L.1856@S.1857!40or@S.1859!40node@Q.1861!40Q collect-flags|~collect-flags,i,!1. c0-record|~c0-record,i,!1. special-form-func|#,igen0,name;L.1088:S.1089@local-to-global:L.1091@S.1092!40concat@Q.1094!40ml.special-@S.1098!40name c0-inline-fn|~c0-inline-fn,i,!1. c0-vec|~c0-vec,i,!1. c0-S-error|~c0-S-error,i,!1. c0-S-macro-error|~c0-S-macro-error,i,!1. c0-local|~c0-local,i,!1. il-demote|~il-demote,i,!1. c0-block|~c0-block,i,!1. c0|~c0,i,!1. resolve|~resolve,i,!1. base-env!V~base-env! env-rewind|~env-rewind,i,!1. env-rewind-x|~env-rewind-x,i,!1. use-module|~use-module,i,!1. require-module|~require-module,i,!1. env-export|~env-export,i,!1. import-binding|~import-binding,i,!1. is-private?|#,igen,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn check-argc|~check-argc,i,!1. check-type|~check-type,i,!1. compile-warn|~compile-warn,i,!1. gen-error|~gen-error,i,!1. env-rewind-M|~env-rewind-M,i,!1. after|~after,i,!1. gensym|~gensym,i,!1. gensym-name|~gensym-name,i,!1. gen-global-name|~gen-global-name,i,!1. *compile-mods*!V~*compile-mods*! *compile-outfile*!V~*compile-outfile*! *compile-file*!V~*compile-file*! *compile-subject*!V~*compile-subject*! EDefn.priv|#,igen,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,igen,B EFunc!=R,S;W;S,igen,F EVar!=R,S;W,igen,V ESMacro!=R,S;W,igen,M EXMacro!=R,S;W,igen,X ERecord!=R,S;W;S,igen,R EIL!=R,S;W,igen,I EArg!=R,W,igen,A EMarker!=R,W,igen,$ is-balanced?|#,igen,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,igen,Q Var!=R,S,igen,V Builtin!=R,W;L,igen,F Call!=R,S;L,igen,f Local!=R,W;W,igen,U Funcall!=R,L,igen,Y Concat!=R,L,igen,C Block!=R,L,igen,B Lambda!=R,S,igen,X protect-define|~protect-define,i,!1. protect-rhs|~protect-rhs,i,!1. protect-lhs|~protect-lhs,i,!1. protect-expr|~protect-expr,i,!1. protect-arg|~protect-arg,i,!1. protect-trim|~protect-trim,i,!1. protect-ltrim|~protect-ltrim,i,!1. escape|~escape,iescape,str;L.241:S.242@subst:Q.244@$:Q.248@$`:S.253@str parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,escape)
$(call ^require,gen)
$(call ^require,gen0)
~c1-Lambda = $(subst $``.,$`.,$(subst $``-,$`,$(subst $`,$``,$1)))
define ~gen-embed
$`.{$(subst 
,~N,$(subst $`,~S,$(subst $],~R,$(subst $(if ,,,),~C,$(subst $[,~L,$(subst ~,~1,$1))))))$`.}
endef
define ~gen-extract
$(if $(findstring $`.{,$1),$(foreach e&,$(wordlist 2,99999999,$(call ~split,$`.{,$1)),$(call ^d,$(subst ~1,~,$(subst ~L,$[,$(subst ~C,$(if ,,,),$(subst ~R,$],$(subst ~S,$`,$(subst ~N,
,$(call ^u,$(word 1,$(call ~split,$`.},$(call ^u,$(e&))))))))))))))
endef
~c1-arg = $(if $(filter F f Y V,$(word 1,$1)),$(call ~c1,$1),$(call ~protect-arg,$(call ~c1,$1)))
~c1-arg-trim = $(if $(filter F f Y V,$(word 1,$1)),$(call ~c1,$1),$(call ~protect-trim,$(call ~protect-arg,$(call ~c1,$1))))
~c1-vec = $(subst |1,|,$(subst |.,,$(subst |. ,$(subst |,|1,$2),$(foreach a&,$1,$(subst |,|1,$(call $3,$(call ^u,$(a&))))|.))))
~c1-Error = $(call ~gen-embed,$(if $(filter E E.%,$1),$1,E Internal!0error;!0mal-formed!0IL!0node:!0 $(call ^d,$1)))
~il-vector = $(call ~il-foldcat,$(call ~il-qmerge,$(subst $  , $(call ^d,Q !0) ,$(foreach n&,$1,$(call ^d,$(call ~il-demote,$(call ^u,$(n&))))))))
~c1-Builtin = $`($1 $(call ~protect-ltrim,$(call ~c1-vec,$2,$(if ,,,),$(if $(filter and or,$1),~c1-arg-trim,~c1-arg))))
~c1-args9 = $(if $(word 9,$1),$(if ,,$(call ~c1-vec,$(wordlist 1,8,$1),$(if ,,,),~c1-arg),$(call ~protect-arg,$(call ~c1,$(call ~il-vector,$(wordlist 9,99999999,$1))))),$(call ~c1-vec,$1,$(if ,,,),~c1-arg))
~c1-Call = $`(call $(call ~protect-ltrim,$(subst $`,$``,$1))$(if $2,$(if ,,,))$(call ~c1-args9,$2))
~make-list = $(if $(word $2,$3),$(subst $  ,,$(wordlist $1,$2,$3)),$(call ~make-list,$1,$2,$3 $3 $3))
~c1-Local = $(if $(filter-out 0,$2),$(subst $(if ,,,$]),$],$(subst -,$(call ~make-list,1,$2,-),$`-(call ^E,$`-$1,$(call ~make-list,2,$2,`)))),$`$1)
~c1-Funcall = $`(call ^Y,$(call ~c1-args9,$(wordlist 2,99999999,$1))$(subst $  ,,$(or $(wordlist $(words x$(wordlist 2,99999999,$1)),9,$(if ,,, , , , , , , , ,)),$(if ,,,)))$(call ~protect-arg,$(call ~c1,$(call ^u,$(word 1,$1)))))
~c1-Block = $(if $(word 2,$1),$`(and $(call ~c1-vec,$1,$(if ,,1,),~c1-arg)),$(if $1,$(call ~c1,$(call ^u,$(word 1,$1)))))
~c1-Var = $`$(or $(filter a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _,$1),($(subst $`,$``,$1)))
~c1 = $(if $(filter Q,$(firstword $1)),$(subst $`,$``,$(call ^n,2,$1)),$(if $(filter U,$(firstword $1)),$(call ~c1-Local,$(word 2,$1),$(word 3,$1)),$(if $(filter f,$(firstword $1)),$(call ~c1-Call,$(call ^n,2,$1),$(wordlist 3,99999999,$1)),$(if $(filter V,$(firstword $1)),$(call ~c1-Var,$(call ^n,2,$1)),$(if $(filter C,$(firstword $1)),$(call ~c1-vec,$(wordlist 2,99999999,$1),,~c1),$(if $(filter X,$(firstword $1)),$(call ~c1-Lambda,$(call ~c1,$(call ^n,2,$1))),$(if $(filter B,$(firstword $1)),$(call ~c1-Block,$(wordlist 2,99999999,$1)),$(if $(filter Y,$(firstword $1)),$(call ~c1-Funcall,$(wordlist 2,99999999,$1)),$(if $(filter F,$(firstword $1)),$(call ~c1-Builtin,$(word 2,$1),$(wordlist 3,99999999,$1)),$(call ~c1-Error,$1))))))))))
define ~c1-file-set
$(call ~protect-lhs,$1) := $(call ~protect-rhs,$2)

endef
define ~c1-file-fset
$(if $(or $(findstring $`,$(subst $``,,$2)),$(findstring $``.,$2)),$`(call ^fset,$(call ~protect-arg,$1),$(call ~protect-arg,$2))
,$(if $(or $(findstring #,$2),$(findstring 
,$2),$(filter ~%,$(subst $  ,~,$(subst $ 	,~,$2)))),define $(call ~protect-lhs,$1)
$(call ~protect-define,$(subst $``,$`,$2))
$ endef
,$(call ~protect-lhs,$1) = $(subst $``,$`,$(call ~protect-rhs,$2))
))
endef
~c1-file* = $(subst |1,|,$(subst |.,,$(subst |. ,$(subst |,|1,),$(foreach node&,$1,$(subst |,|1,$(call ~c1-file,$(call ^u,$(node&))))|.))))
define ~c1-file
$(or $(if $(filter F,$(firstword $1)),$(if $(filter Q,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(if $(filter eval,$(word 2,$1)),$(call ^n,2,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))))
,$(if $(filter call,$(word 2,$1)),$(call ~c1-file,f $(call ^d,$(call ^n,2,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))))) $(wordlist 2,99999999,$(wordlist 3,99999999,$1)))))),$(if $(filter f,$(firstword $1)),$(if $(if $(call ~nth,3,$(wordlist 3,99999999,$1)),,1),$(if $(filter ^set,$(call ^n,2,$1)),$(call ~c1-file-set,$(call ~c1,$(call ~nth,1,$(wordlist 3,99999999,$1))),$(call ~c1,$(call ~nth,2,$(wordlist 3,99999999,$1)))),$(if $(filter ^fset,$(call ^n,2,$1)),$(call ~c1-file-fset,$(call ~c1,$(call ~nth,1,$(wordlist 3,99999999,$1))),$(call ~c1,$(call ~nth,2,$(wordlist 3,99999999,$1))))))),$(if $(filter B,$(firstword $1)),$(call ~c1-file*,$(wordlist 2,99999999,$1))))),$(if ,,$(call ~protect-expr,$(call ~c1,$(if $(if $(filter F,$(firstword $1)),$(filter error eval info,$(word 2,$1)),$(if $(filter f,$(firstword $1)),$(filter ^require,$(call ^n,2,$1)))),$1,F if $(call ^d,$1) $(call ^d,Q !.))))
))
endef
~gen1 = $(call ^Y,$(if $2,$(call ~c1-file*,$1),$(call ~c1,B $1)),,,,,,,,,$`(call ^d,$`(call ~gen-extract,$`1)) $`(call ^d,$`1))

endef
 
define ///getopts.min
# compiled from getopts.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: getopts|~getopts,.,!1. getopts-loop|~getopts-loop,.,!1. foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
~getopts-loop = $(and $(call ^set,~opt,$(word 1,$5))1,$(call ^set,~file,$(call ~nth,1,$5))1,$(if $(if $5,,1),$(call ^d,$6) $(call ^d,$7),$(if $(if $(filter -%,$(~opt)),,1),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 2,99999999,$5),$(call ~conj,$6,$(~file)),$7),$(if $(filter $1,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 2,99999999,$5),$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),1,$7)),$(if $(filter $2,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 3,99999999,$5),$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),$(call ~nth,2,$5),$7)),$(if $(filter $3,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,,$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),$(wordlist 2,99999999,$5),$7)),$(call ^Y,$(~opt),$(wordlist 2,99999999,$5),,,,,,,,$4)))))))
~getopts = $(call ~getopts-loop,$(filter-out %= %=...,$2),$(patsubst %=,%,$(filter %=,$2)),$(patsubst %=...,%,$(filter %=...,$2)),$3,$1,,)

endef
 
define ///io.min
# compiled from io.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: file-exists?|~file-exists?,.,!1. read-lines|~read-lines,.,!1. read-file|~read-file,.,!1. write-file|~write-file,.,!1. getline|~getline,.,!1. shell!1|~shell!2,.,!1. printn|~printn,.,!1. echo-command|~echo-command,.,!1. quote-sh-arg|~quote-sh-arg,.,!1. xshell|~xshell,.,!1. SCAM_DEBUG!VSCAM_DEBUG, foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
~xshell = $(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: $1))1,$(shell $1))
~quote-sh-arg = '$(subst ','\'',$1)'
define ~echo-command
printf '%b' $(call ~quote-sh-arg,$(subst 
,\n,$(subst \,\\,$1)))
endef
~printn = $(call ~xshell,$(call ~echo-command,$(call ~concat-vec,$(^av))) >&2)
define ~shell!
$(subst !1,!,$(subst !0, ,$(subst !n,
,$(subst $  ,,$(call ~xshell,$1 | sed -e 's/!/!1/g;s/ /!0/g;s/$`/!n/g')))))
endef
~getline = $(and $(if $1,$(call ~printn,$1))1,$(call ~shell!,head -1))
~write-file = $(if $1,$(call ~xshell,$(call ~echo-command,$2) > $1),$(info error: write-file: nil filename))
~read-file = $(if $1,$(call ~shell!,cat < $(call ~quote-sh-arg,$1)),$(info error: read-file: nil filename))
~read-lines = $(if $1,$(subst !n,,$(subst $  !n, !.,$(call ~xshell,sed -E '$(if $2,$(if ,,$2,$3!d;))s/!/!1/g;s/	/!+/g;s/ /!0/g;s/$`/!n/g' $1))),$(info error: read-lines: nil filename))
~file-exists? = $(if $(shell ls $(call ~quote-sh-arg,$1) 2> /dev/null),1)

endef
 
define ///macros.min
# compiled from macros.scm
# Requires: core parse gen gen0 runtime
# Requires: scam-ct
# Exports: ml.special-case|~ml.special-case,.,!1. nest-nodes|~nest-nodes,p,!1. c0-matches|~c0-matches,.,!1. arg-bindings|~arg-bindings,.,!1. ml.special-data|~ml.special-data,.,!1. get-types|~get-types,p,!1. get-type|~get-type,p,!1. get-type-r|~get-type-r,p,!1. DataType!=R,W;W;S;L,.,!2!cData0 ml.special-use|~ml.special-use,.,!1. ml.special-defmacro|~ml.special-defmacro,.,!1. ml.special-global-name|~ml.special-global-name,.,!1. ml.special-local-to-global|~ml.special-local-to-global,.,!1. ml.special-cond|~ml.special-cond,.,!1. ml.macro-cond|~ml.macro-cond,.,!1. cond-expand|~cond-expand,.,!1. cond-cxt!V~cond-cxt, ml.special-print|~ml.special-print,.,!1. ml.special-concat-for|~ml.special-concat-for,.,!1. ml.special-append-for|~ml.special-append-for,.,!1. ml.special-for|~ml.special-for,.,!1. ml.special-foreach|~ml.special-foreach,.,!1. ml.special-let|~ml.special-let,.,!1. ml.macro-let|~ml.macro-let,.,!1. let-error|~let-error,.,!1. ml.special-let&|~ml.special-let&,.,!1. let&-check-bindings|~let&-check-bindings,.,!1. let&-check|~let&-check,.,!1. let&-env|~let&-env,.,!1. ml.special-?|~ml.special-?,.,!1. ml.special-let-global|~ml.special-let-global,.,!1. ml.macro-let-global|~ml.macro-let-global,.,!1. letg-expand|~letg-expand,p,!1. letg-error|~letg-error,p,!1. ml.special-set|~ml.special-set,.,!1. ml.special-vector|~ml.special-vector,.,!1. ml.special-subst|~ml.special-subst,.,!1. subst-x|~subst-x,p,!1. ml.special-concat|~ml.special-concat,.,!1. ml.special-current-file-line|~ml.special-current-file-line,.,!1. ml.special-current-env|~ml.special-current-env,.,!1. begin-block|~begin-block,.,!1. gen0|~gen0,i,!1. c0|~c0,i,!1. c0-error|~c0-error,i,!1. c0-mq|~c0-mq,i,!1. c0-mq-list|~c0-mq-list,i,!1. c0-mq-node|~c0-mq-node,i,!1. c0-mq-vec|~c0-mq-vec,i,!1. il-qmerge|~il-qmerge,i,!1. il-foldcat|~il-foldcat,i,!1. c0-mq|~c0-mq,i,!1. lambda-env|~lambda-env,i,!1. c0-block|~c0-block,i,!1. c0-block-cc|~c0-block-cc,i,!1. ml.special-require|~ml.special-require,i,!1. ml.special-declare|~ml.special-declare,i,!1. ml.special-define|~ml.special-define,i,!1. c0-declare-define|~c0-declare-define,i,!1. check-name|~check-name,i,!1. block-result|#,igen0,inblock:env:node;L.1839:S.1840@append:L.1842@S.1843!40if@S.1845!40inblock@L.1847!40S!50vector!40Q.1848!50env!40S.1852!50env:L.1856@S.1857!40or@S.1859!40node@Q.1861!40Q collect-flags|~collect-flags,i,!1. c0-record|~c0-record,i,!1. special-form-func|#,igen0,name;L.1088:S.1089@local-to-global:L.1091@S.1092!40concat@Q.1094!40ml.special-@S.1098!40name c0-inline-fn|~c0-inline-fn,i,!1. c0-vec|~c0-vec,i,!1. c0-S-error|~c0-S-error,i,!1. c0-S-macro-error|~c0-S-macro-error,i,!1. c0-local|~c0-local,i,!1. il-demote|~il-demote,i,!1. c0-block|~c0-block,i,!1. c0|~c0,i,!1. resolve|~resolve,i,!1. base-env!V~base-env! env-rewind|~env-rewind,i,!1. env-rewind-x|~env-rewind-x,i,!1. use-module|~use-module,i,!1. require-module|~require-module,i,!1. env-export|~env-export,i,!1. import-binding|~import-binding,i,!1. is-private?|#,igen,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn check-argc|~check-argc,i,!1. check-type|~check-type,i,!1. compile-warn|~compile-warn,i,!1. gen-error|~gen-error,i,!1. env-rewind-M|~env-rewind-M,i,!1. after|~after,i,!1. gensym|~gensym,i,!1. gensym-name|~gensym-name,i,!1. gen-global-name|~gen-global-name,i,!1. *compile-mods*!V~*compile-mods*! *compile-outfile*!V~*compile-outfile*! *compile-file*!V~*compile-file*! *compile-subject*!V~*compile-subject*! EDefn.priv|#,igen,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,igen,B EFunc!=R,S;W;S,igen,F EVar!=R,S;W,igen,V ESMacro!=R,S;W,igen,M EXMacro!=R,S;W,igen,X ERecord!=R,S;W;S,igen,R EIL!=R,S;W,igen,I EArg!=R,W,igen,A EMarker!=R,W,igen,$ is-balanced?|#,igen,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,igen,Q Var!=R,S,igen,V Builtin!=R,W;L,igen,F Call!=R,S;L,igen,f Local!=R,W;W,igen,U Funcall!=R,L,igen,Y Concat!=R,L,igen,C Block!=R,L,igen,B Lambda!=R,S,igen,X parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,gen)
$(call ^require,gen0)
~begin-block = $(if $(filter 1,$(words $1)),$(call ^u,$(word 1,$1)),L.164 S.165!0begin $1)
~ml.special-current-env = Q $(call ^d,$2)
define ~ml.special-current-file-line
Q $(call ^d,$(~*compile-file*):$(call ~describe-lnum,$(or $(word 2,$(call ~hash-get,#pos,$2)),$(call ~form-index,$1)),$(~*compile-subject*)))
endef
~ml.special-concat = C $(call ~c0-vec,$(wordlist 3,99999999,$1),$2)
~subst-x = $(if $1,$(call ~subst-x,$(wordlist 3,99999999,$1),F subst $(call ~conj,$(wordlist 1,2,$1),$2)),$2)
~ml.special-subst = $(call ^Y,$(wordlist 3,99999999,$1),$(call ~nth,2,$1),$2,,,,,,,$`(or $`(if $`(filter %2 %4 %6 %8 %0 1,$`(words $`1)),$`(call ~gen-error,$`2,wrong number of arguments to (subst {FROM TO}+ STR); must be multiple of 2 + 1)),$`(call ~subst-x,$`(call ~c0-vec,$`(call ~butlast,$`1),$`3),$`(call ~c0,$`(call ~promote,$`(lastword $`1)),$`3))))
~ml.special-vector = C $(subst $  , Q!0!10 ,$(call ~map-call,~il-demote,$(call ~c0-vec,$(wordlist 3,99999999,$1),$2)))
~ml.special-set = $(or $(call ~check-argc,2 or 3,$1),$(call ~check-type,S,$(call ~nth,3,$1),$1,NAME,(set NAME VALUE [RETVAL])),$(call ^Y,$(call ~resolve,$(call ~nth,3,$1),$2),$(wordlist 4,99999999,$1),$2,$(call ~nth,3,$1),,,,,,$`(if $`(if $`(filter V F,$`(word 1,$`1)),,1),$`(call ~gen-error,$`4,%q is not a global variable,$`(call ~nth,2,$`4)),f $`(call ^d,$`(if $`(filter V,$`(word 1,$`1)),^set,^fset)) $`(call ~cons,Q $`(call ^d,$`(call ~nth,2,$`1)),$`(call ~c0-vec,$`2,$`3)))))
~letg-error = $(call ~check-type,$1,$2,$3,$4,(let-global ((VAR VALUE)...) BODY))
~letg-expand = $(if $(if $1,,1),$(call ~begin-block,$2),$(or $(call ~letg-error,L,$(call ^u,$(word 1,$1)),$3,(VAR VALUE)),$(call ~letg-error,S,$(call ~nth,2,$(call ^u,$(word 1,$1))),$(call ^u,$(word 1,$1)),VAR),$(call ~letg-error,,$(call ~nth,3,$(call ^u,$(word 1,$1))),$(call ^u,$(word 1,$1)),VALUE),L.991 S.992!0set $(call ^d,$(call ~nth,2,$(call ^u,$(word 1,$1)))) $(call ^d,L.997 S.998!0set $(call ^d,$(call ~nth,2,$(call ^u,$(word 1,$1)))) $(call ^d,$(call ~nth,3,$(call ^u,$(word 1,$1)))) $(call ^d,$(call ~nth,2,$(call ^u,$(word 1,$1))))) $(call ^d,$(call ~letg-expand,$(wordlist 2,99999999,$1),$2,$3))))
~ml.macro-let-global = $(or $(call ~letg-error,L,$(call ~nth,3,$1),$1,((VAR VALUE)...)),$(call ~letg-expand,$(wordlist 2,99999999,$(call ~nth,3,$1)),$(wordlist 4,99999999,$1),$1))
~ml.special-let-global = $(call ~c0,$(call ~ml.macro-let-global,$1),$2)
define ~ml.special-?
$(or $(call ~check-type,S,$(call ~nth,3,$1),$1,FUNC,(? FUNC ...)),$(if $(if $(filter-out F#,$(filter B% F%,$(subst $  ,,$(wordlist 1,2,$(call ~resolve,$(call ~nth,3,$1),$2))))),,1),$(call ~gen-error,$(call ~nth,3,$1),FUNC in (? FUNC ...) is not a function variable)),f ^t $(call ~cons,Q $(call ^d,$(call ~nth,2,$(call ~resolve,$(call ~nth,3,$1),$2))),$(call ~c0-vec,$(wordlist 4,99999999,$1),$2)))
endef
~let&-env = $(call ~append,$(call ~reverse,$(filter %,$(foreach b&,$1,$(call ~hash-bind,$(call ~nth,2,$(call ~nth,2,$(call ^u,$(b&)))),M $(call ^d,$(call ~nth,3,$(call ^u,$(b&)))) )))),$2)
~let&-check = $(call ~check-type,$1,$2,$3,$4,(let ((VAR VALUE)...) BODY))
~let&-check-bindings = $(call ^u,$(word 1,$(filter-out !.,$(foreach b&,$1,$(call ^d,$(and $(or $(call ~let&-check,L,$(call ^u,$(b&)),$2,(NAME EXPR)))1,$(call ~let&-check,S,$(call ~nth,2,$(call ^u,$(b&))),$2,NAME)))))))
~ml.special-let& = $(or $(call ~let&-check,L,$(call ~nth,3,$1),$1,((NAME EXPR)...)),$(call ~let&-check-bindings,$(wordlist 2,99999999,$(call ~nth,3,$1)),$1),$(call ~c0-block,$(wordlist 4,99999999,$1),$(call ~let&-env,$(wordlist 2,99999999,$(call ~nth,3,$1)),$2)))
~let-error = $(call ~check-type,$1,$2,$3,$4,(let ((VAR VALUE)...) BODY))
~ml.macro-let = $(or $(call ~let-error,L,$(call ~nth,3,$1),$1,((VAR VALUE)...)),$(call ^u,$(word 1,$(filter-out !.,$(foreach b&,$(wordlist 2,99999999,$(call ~nth,3,$1)),$(call ^d,$(or $(call ~let-error,L,$(call ^u,$(b&)),$1,(VAR VALUE)),$(call ~let-error,S,$(call ~nth,2,$(call ^u,$(b&))),$(call ^u,$(b&)),VAR),$(call ~let-error,,$(call ~nth,3,$(call ^u,$(b&))),$(call ^u,$(b&)),VALUE))))))),$(call ~append,L $(call ^d,$(call ~append,L S!0lambda $(call ^d,$(call ~append,L,$(foreach b&,$(wordlist 2,99999999,$(call ~nth,3,$1)),$(call ^d,$(call ~nth,2,$(call ^u,$(b&))))))),$(wordlist 4,99999999,$1))),$(foreach b&,$(wordlist 2,99999999,$(call ~nth,3,$1)),$(call ^d,$(call ~nth,3,$(call ^u,$(b&)))))))
~ml.special-let = $(call ~c0,$(call ~ml.macro-let,$1),$2)
~ml.special-foreach = $(or $(call ~check-argc,3,$1),$(call ~check-type,S,$(call ~nth,3,$1),$1,VAR,(foreach VAR LIST EXPR)),$(call ^Y,$(call ~nth,3,$1),$(call ~nth,4,$1),$(call ~nth,5,$1),$2,,,,,,$`(call ~c0,L.2135 S.2136!0.foreach $`(call ^d,Q $`(word 2,$`1)) $`(call ^d,$`2) $`(call ^d,$`3),$`(call ~hash-bind,$`(call ~nth,2,$`1),V $`(word 2,$`1),$`4))))
~ml.special-for = $(call ~c0,L.2289 S.2290!0foreach $(call ^d,$(call ~gensym,$(call ~nth,3,$1))) $(call ^d,$(call ~nth,4,$1)) $(call ^d,L.2302 S.2303!0call $(call ^d,Q ^d) $(call ^d,L.2316 S.2317!0let& $(call ^d,L.2319 $(call ^d,L.2320 $(call ^d,$(call ~nth,3,$1)) $(call ^d,L.2324 S.2325!0call $(call ^d,Q ^u) $(call ^d,$(call ~gensym,$(call ~nth,3,$1)))))) $(wordlist 5,99999999,$1))),$2)
~ml.special-append-for = $(call ~c0,L.2464 S.2465!0filter Q.2467!0% $(call ^d,L.2471 S.2472!0foreach $(call ^d,$(call ~gensym,$(call ~nth,3,$1))) $(call ^d,$(call ~nth,4,$1)) $(call ^d,L.2484 S.2485!0let& $(call ^d,L.2487 $(call ^d,L.2488 $(call ^d,$(call ~nth,3,$1)) $(call ^d,L.2492 S.2493!0call $(call ^d,Q ^u) $(call ^d,$(call ~gensym,$(call ~nth,3,$1)))))) $(wordlist 5,99999999,$1))),$2)
~ml.special-concat-for = $(call ~c0,$(if $(and $(filter Q%,$(word 1,$(call ~nth,5,$1))),$(call ~eq,$(call ~nth,2,$(call ~nth,5,$1)), )),L.2651 S.2652!0foreach $(call ^d,$(call ~gensym,$(call ~nth,3,$1))) $(call ^d,$(call ~nth,4,$1)) $(call ^d,L.2664 S.2665!0let& $(call ^d,L.2667 $(call ^d,L.2668 $(call ^d,$(call ~nth,3,$1)) $(call ^d,L.2672 S.2673!0call $(call ^d,Q ^u) $(call ^d,$(call ~gensym,$(call ~nth,3,$1)))))) $(wordlist 6,99999999,$1)),L.2705 S.2706!0subst Q.2708!0|.!10 $(call ^d,L.2713 S.2714!0subst Q.2716!0| Q.2720!0|1 $(call ^d,$(call ~nth,5,$1))) Q.2728!0|. Q.2732!0!1. Q.2735!0|1 Q.2739!0| $(call ^d,L.2743 S.2744!0foreach $(call ^d,$(call ~gensym,$(call ~nth,3,$1))) $(call ^d,$(call ~nth,4,$1)) $(call ^d,L.2756 S.2757!0let& $(call ^d,L.2759 $(call ^d,L.2760 $(call ^d,$(call ~nth,3,$1)) $(call ^d,L.2764 S.2765!0call $(call ^d,Q ^u) $(call ^d,$(call ~gensym,$(call ~nth,3,$1)))))) $(call ^d,L.2788 S.2789!0concat $(call ^d,L.2791 S.2792!0subst Q.2794!0| Q.2798!0|1 $(wordlist 6,99999999,$1)) Q.2806!0|.)))),$2)
~ml.special-print = $(call ~c0,L.2859 S.2860!0info $(call ^d,L.2862 S.2863!0concat $(wordlist 3,99999999,$1)),$2)
~cond-cxt := (cond (TEST BODY)...)
~cond-expand = $(if $1,$(or $(call ~check-type,L,$1,$3,(TEST BODY),$(~cond-cxt)),$(call ~check-type,,$(call ~nth,2,$1),$1,TEST,$(~cond-cxt)),$(call ~check-type,,$(wordlist 3,99999999,$1),$1,BODY,$(~cond-cxt)),$(if $(and $(filter S%,$(word 1,$(call ~nth,2,$1))),$(call ~eq,else,$(word 2,$(call ~nth,2,$1)))),$(call ~begin-block,$(wordlist 3,99999999,$1)),L.3047 S.3048!0if $(call ^d,$(call ~nth,2,$1)) $(call ^d,$(call ~begin-block,$(wordlist 3,99999999,$1))) $(if $2,$(call ^d,$(call ~cond-expand,$(call ^u,$(word 1,$2)),$(wordlist 2,99999999,$2),$3))))))
~ml.macro-cond = $(or $(call ~cond-expand,$(call ~nth,3,$1),$(wordlist 4,99999999,$1),$1),Q !.)
~ml.special-cond = $(call ~c0,$(call ~ml.macro-cond,$1),$2)
~ml.special-local-to-global = $(or $(call ~check-argc,1,$1),C $(call ^d,Q $(call ^d,$(call ~gen-global-name,))) $(call ^d,$(call ~c0,$(call ~nth,3,$1),$2)))
~ml.special-global-name = $(or $(call ~check-argc,1,$1),$(call ~check-type,S,$(call ~nth,3,$1),$1,NAME,(get-global NAME)),$(if $(filter V F,$(word 1,$(call ~resolve,$(call ~nth,3,$1),$2))),Q $(call ^d,$(call ~nth,2,$(call ~resolve,$(call ~nth,3,$1),$2))),$(call ~gen-error,$(call ~nth,3,$1),%q is not a global variable,$(call ~nth,2,$(call ~nth,3,$1)))))
~ml.special-defmacro = $(or $(call ~check-type,L,$(call ~nth,3,$1),$1,(NAME ARG...),(defmacro (NAME ARG...) BODY...)),$(call ~check-type,S,$(call ~nth,2,$(call ~nth,3,$1)),$(call ~nth,3,$1),NAME,(defmacro (NAME ARG...) ...)),$(call ^Y,$(call ~c0,$(call ~append,L $(call ^d,S define),$(wordlist 3,99999999,$1)),$2,$3),,,,,,,,,$`(call ~append,env $`(call ^d,$`(call ~hash-bind,$`(call ~nth,2,$`(call ~nth,2,$`(call ~nth,3,$(call ^E,$1)))),X $`(call ^d,$`(call ~gen-global-name,$`(call ~nth,2,$`(call ~nth,2,$`(call ~nth,3,$(call ^E,$1)))))) ,$`(call ~nth,2,$`1))),$`(wordlist 3,99999999,$`1))))
~ml.special-use = $(or $(call ~check-argc,1,$1),$(call ~check-type,Q,$(call ~nth,3,$1),$1,NAME,(use NAME)),$(call ^Y,$(call ~use-module,$(call ~nth,2,$(call ~nth,3,$1))),$2,,,,,,,,$`(if $`1,$`(call ~append,$`(if $(call ^E,$3),env $`(call ^d,$`(call ~append,$`1,$`2))),$`(or ,Q)))),$(call ~gen-error,use: Cannot find module %q,$(call ~nth,2,$(call ~nth,3,$1))))
$(if $(call ^add-tags,!1:Data0!=DataType!0W!0W!0S!0L),)
~get-type-r = $(or $(if $(if $1,,1),$(if $6,$(call ~gen-error,$2,no argument following last flag: %s,$6),!:Data0 $3 $(call ^u,$(word 1,$4)) $(call ^d,$(wordlist 2,99999999,$4)) $5)),$(call ~check-type,S,$(call ^u,$(word 1,$1)),$2,ARG,(CTOR ARG...)),$(if $(if $(filter &%,$(call ~nth,2,$(call ^u,$(word 1,$1)))),,1),$(call ~get-type-r,$(wordlist 2,99999999,$1),$2,$3,$4 $(if $(call ~eq,&word,$6),W,$(if $(and $(call ~eq,&list,$6),$(if $(word 2,$1),,1)),L,S)),$(call ~conj,$5,$(call ~nth,2,$(call ^u,$(word 1,$1)))),,$(filter &list,$6))),$(if $6,$(call ~gen-error,$(call ^u,$(word 1,$1)),two type flags supplied for one argument)),$(if $(filter &list &word,$(call ~nth,2,$(call ^u,$(word 1,$1)))),$(call ~get-type-r,$(wordlist 2,99999999,$1),$2,$3,$4,$5,$(call ~nth,2,$(call ^u,$(word 1,$1))))),$(call ~gen-error,$(call ^u,$(word 1,$1)),$(if ,,unknown flag [supported: &list, &word])))
~get-type = $(or $(call ~check-type,L,$1,$3,(CTOR ...),(data NAME (CTOR ...)...)),$(call ~check-type,S,$(call ~nth,2,$1),$3,CTOR,(data NAME (CTOR ...)...)),$(if $(filter Q%,$(word 1,$(call ~nth,3,$1))),$(call ~get-type-r,$(wordlist 4,99999999,$1),$1,$(call ~nth,2,$(call ~nth,3,$1)),$(call ~nth,2,$(call ~nth,2,$1)),,),$(call ~get-type-r,$(wordlist 3,99999999,$1),$1,$2,$(call ~nth,2,$(call ~nth,2,$1)),,)))
~get-types = $(if $3,$(call ~cons,$(call ~get-type,$(call ^u,$(word 1,$3)),$2$(words $4),$1),$(call ~get-types,$1,$2,$(wordlist 2,99999999,$3),$(call ~append,$4,1))))
~ml.special-data = $(or $(call ~check-type,S,$(call ~nth,3,$1),$1,NAME,(data NAME ...)),$(call ^Y,$(call ~get-types,$1,!:$(call ~nth,2,$(call ~nth,3,$1)),$(wordlist 4,99999999,$1),),,,,,,,,,$`(or $`(if $`(filter E%,$`1),B $`(filter E%,$`1)),$`(call ~append,$`(if $(call ^E,$3),env $`(call ^d,$`(call ~append,$`(filter %,$`(foreach ty&,$`1,$`(if $`(filter !:Data0,$`(firstword $`(call ^u,$`(ty&)))),$`(call ~hash-bind,$`(word 3,$`(call ^u,$`(ty&))),R $`(call ^d,$`(call ^n,4,$`(call ^u,$`(ty&)))) . $`(call ^d,$`(word 2,$`(call ^u,$`(ty&)))))))),$(call ^E,$2)))),$`(or f ^add-tags $`(call ^d,Q $`(call ^d,$`(filter %,$`(foreach ty&,$`1,$`(if $`(filter !:Data0,$`(firstword $`(call ^u,$`(ty&)))),$`(call ~hash-bind,$`(word 2,$`(call ^u,$`(ty&))),$`(call ~append,$`(word 3,$`(call ^u,$`(ty&))),$`(call ^n,4,$`(call ^u,$`(ty&)))))))))),Q)))))
~arg-bindings = $(foreach n,$(call ~indicesX,$2,.,1),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,$n,$1)),I $(call ^d,$(if $(filter S,$(word $n,$2)),f ^n $(call ^d,Q $(call ^d,$(call ~1+,$n))) $(call ^d,$3),$(if $(filter W,$(word $n,$2)),F word $(call ^d,Q $(call ^d,$(call ~1+,$n))) $(call ^d,$3),F wordlist $(call ^d,Q $(call ^d,$(call ~1+,$n))) $(call ^d,Q 99999999) $(call ^d,$3)))) .))
~c0-matches = $(foreach case&,$1,$(call ^d,$(or $(call ~check-type,L,$(call ^u,$(case&)),,(PATTERN BODY),(case VALUE (PATTERN BODY)...)),$(call ~check-type,L S,$(call ~nth,2,$(call ^u,$(case&))),$(call ^u,$(case&)),(CTOR ARG...),(case VALUE ((CTOR ARG..) BODY)...)),$(if $(filter S%,$(word 1,$(call ~nth,2,$(call ^u,$(case&))))),$(call ~c0-block,$(wordlist 3,99999999,$(call ^u,$(case&))),$(call ~hash-bind,$(call ~nth,2,$(call ~nth,2,$(call ^u,$(case&)))),I $(call ^d,$2),$3)),$(or $(call ~check-type,S,$(call ~nth,2,$(call ~nth,2,$(call ^u,$(case&)))),$(call ~nth,2,$(call ^u,$(case&))),CTOR,(CTOR ARG...)),$(call ~check-argc,$(words $(call ~nth,2,$(call ~hash-get,$(call ~nth,2,$(call ~nth,2,$(call ~nth,2,$(call ^u,$(case&))))),$3))),$(call ~nth,2,$(call ^u,$(case&)))),F if $(call ^d,F filter $(call ^d,Q $(call ^d,$(call ~nth,4,$(call ~hash-get,$(call ~nth,2,$(call ~nth,2,$(call ~nth,2,$(call ^u,$(case&))))),$3)))) $(call ^d,F firstword $(call ^d,$2))) $(call ^d,$(call ~c0-block,$(wordlist 3,99999999,$(call ^u,$(case&))),$(call ~append,$(call ~arg-bindings,$(wordlist 3,99999999,$(call ~nth,2,$(call ^u,$(case&)))),$(call ~nth,2,$(call ~hash-get,$(call ~nth,2,$(call ~nth,2,$(call ~nth,2,$(call ^u,$(case&))))),$3)),$2),$3))))))))
~nest-nodes = $(call ^u,$(word 1,$1))$(if $(word 2,$1), $(call ^d,$(call ~nest-nodes,$(wordlist 2,99999999,$1))))
~ml.special-case = $(if $(if $(word 3,$1),,1),$(call ~gen-error,$1,missing VALUE in (case VALUE ...)),$(call ~nest-nodes,$(call ~c0-matches,$(wordlist 4,99999999,$1),$(call ~c0,$(call ~nth,3,$1),$2),$2)))

endef
 
define ///num.min
# compiled from num.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: sum|~sum,.,!1. sum-small|~sum-small,.,!1. range|~range,.,!1. 0-|~0-,.,!1. u-range|~u-range,.,!1. mod|~mod,.,!1. mod-9|~mod-9,.,!1. mod-5|~mod-5,.,!1. mod-3|~mod-3,.,!1. mod-2|~mod-2,.,!1. mod-1|~mod-1,.,!1. div-10|~div-10,.,!1. mod-10|~mod-10,.,!1. mod-10|~mod-10,.,!1. umod|~umod,.,!1. /|~/,.,!1. u/|~u/,.,!1. longdiv|~longdiv,.,!1. longdiv-next|~longdiv-next,.,!1. longdiv|~longdiv,.,!1. digit-range|~digit-range,.,!1. strdiv|~strdiv,.,!1. topdigits|~topdigits,.,!1. ==|~==,.,!1. <=|~<=,.,!1. >=|~>=,.,!1. <|~<,.,!1. >|~>,.,!1. ^|~^,.,!1. *|~*,.,!1. -|~-,.,!1. +|~+,.,!1. u^|~u^,.,!1. u^2|~u^2,.,!1. u/2|~u/2,.,!1. nodd|~nodd,.,!1. cmp|~cmp,.,!1. ucmp|~ucmp,.,!1. u-|~u-,.,!1. ndecode|~ndecode,.,!1. u*|~u*,.,!1. u+1|~u+1,.,!1. u+|~u+,.,!1. ucarry|~ucarry,.,!1. udecode|~udecode,.,!1. uencode|~uencode,.,!1. nnorm|~nnorm,.,!1. sign|~sign,.,!1. foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
~sign = $(findstring -,$1)
~nnorm = $(strip $(subst ., .,$(call ~butlast,$(subst -.,- .,$(subst i.,i .,$(subst $  ,,$1.))))))
~uencode = $(call ~reverse,$(subst 0, .,$(subst -,,$(subst 1,0i,$(subst 2,1i,$(subst 3,2i,$(subst 4,3i,$(subst 5,4i,$(subst 6,5i,$(subst 7,6i,$(subst 8,7i,$(subst 9,8i,$1))))))))))))
~udecode = $(and $(findstring i,$1),$2)$(or $(subst 8i,9,$(subst 7i,8,$(subst 6i,7,$(subst 5i,6,$(subst 4i,5,$(subst 3i,4,$(subst 2i,3,$(subst 1i,2,$(subst 0i,1,$(subst .,0,$(subst $  ,,$(wordlist 2,99999999,$(subst .i, .i,.$(subst $  ,,$(call ~reverse,$1))))))))))))))),0)
~ucarry = $(call ~while,$`(findstring iiiiiiiiii .,$`1),$`(subst iiiiiiiiii ., .i,$`1),$1 .)
~u+ = $(call ~ucarry,$(subst ..,.,$(subst i.,i,$(join $1,$2))))
~u+1 = $(call ~ucarry,$(join $(or $1,.),i))
~u* = $(call ~u+,$(subst i,$(subst .,,$(firstword $1)),$2),$(if $(word 2,$1),$(call ~u*,$(wordlist 2,99999999,$1),. $2)))
~ndecode = $(call ~udecode,$(if $(findstring -,$1),$(wordlist 2,$(words $1),. $(call ~u+1,$(foreach d,$1,$(subst $d,.,.iiiiiiiii)))),$1),$(findstring -,$1))
~u- = $(call ~nnorm,$(subst .i-,.,$(call ~u+,$1,$(join $(foreach d,$(subst ..,.,$(join $(subst i,,$1),$2)),$(subst $d,.,.iiiiiiiii)),i) .-)))
~ucmp = $(if $(or $1,$2),$(or $(call ~ucmp,$(wordlist 2,99999999,$1),$(wordlist 2,99999999,$2)),$(if $(findstring $(word 1,$2)i,$(word 1,$1)),a),$(if $(findstring $(word 1,$1)i,$(word 1,$2)),b)))
~cmp = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`(call ~xor,$`1,$`2),$`(and $`(or $`(findstring i,$`3),$`(findstring i,$`4)),$`(if $`2,a,b)),$`(filter a b,$`(subst -a,b,$`(subst -b,a,$`1$`(call ~ucmp,$`3,$`4))))))
~nodd = $(findstring i,$(subst ii,,$(word 1,$1)))
~u/2 = $(call ~nnorm,$(wordlist 2,99999999,$(call ~ucarry,$(subst i,iiiii,$1))))
~u^2 = $(call ~u*,$1,$1)
~u^ = $(if $(call ~nodd,$2),$(call ~nnorm,$(call ~u*,$1,$(call ~u^2,$(call ~u^,$1,$(call ~u/2,$2))))),$(if $(findstring i,$2),$(call ~nnorm,$(call ~u^2,$(call ~u^,$1,$(call ~u/2,$2)))),.i))
~+ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`(call ~xor,$`1,$`2),$`(call ~ndecode,$`(if $`2,$`(call ~u-,$`3,$`4),$`(call ~u-,$`4,$`3))),$`(call ~udecode,$`(call ~u+,$`3,$`4),$`1)))
~- = $(call ~+,$1,$(subst --,,-$2))
~* = $(call ~udecode,$(call ~u*,$(call ~uencode,$1),$(call ~uencode,$2)),$(call ~xor,$(call ~sign,$1),$(call ~sign,$2)))
~^ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`2,nan,$`(call ~udecode,$`(call ~u^,$`3,$`4),$`(and $`1,$`(call ~nodd,$`4),-))))
~> = $(if $(filter a,$(call ~cmp,$1,$2)),1)
~< = $(if $(filter b,$(call ~cmp,$1,$2)),1)
$(if ,,~>=) = $(if $(filter b,$(call ~cmp,$1,$2)),,1)
$(if ,,~<=) = $(if $(filter a,$(call ~cmp,$1,$2)),,1)
$(if ,,~==) = $(if $(call ~cmp,$1,$2),,1)
~topdigits = $(call ^Y,$(wordlist $2,99999999,$1),,,,,,,,,$`(subst .,,$`(word 1,$`1)$`(subst i,iiiiiiiiii,$`(word 2,$`1)$`(subst i,iiiiiiiiii,$`(word 3,$`1)))))
~strdiv = $(subst I,i,$(subst i,,$(subst $2,I,$1)))
~digit-range = $(call ^Y,$(call ~topdigits,$1,$5),$(call ~topdigits,$2,$5),$3,$4,,,,,,.$`(call ~strdiv,$`1,$`2$`(if $`4,i)) .$`(patsubst iiiiiiiii%,iiiiiiiii,$`(call ~strdiv,$`1$`(if $`3,i),$`2)))
~longdiv-next = $(call ~append,$(if $3,$(call ~longdiv,$(call ~append,$(lastword $3),$2),$(call ~butlast,$3),$4)),$1)
~longdiv = $(call ^Y,$(call ~digit-range,$1,$3,$2,$(word 3,$3),$(patsubst 0,1,$(words $(wordlist 2,99999999,$3)))),$1,$3,$2,,,,,,$`(call ^Y,$`(call ~u-,$`2,$`(call ~ucarry,$`(subst i,$`(subst .,,$`(word 1,$`1)),$`3))),$`2,$`3,$`4,$`(word 1,$`1),$`(word 2,$`1),,,,$``(if $``(or $``(call ~eq,$``5,$``6),$``(filter b,$``(call ~ucmp,$``1,$``3))),$``(call ~longdiv-next,$``5,$``1,$``4,$``3),$``(call ~longdiv-next,$``6,$``(call ~u-,$``1,$``3),$``4,$``3))))
~u/ = $(if $(word $(words . $2),$1),$(call ~u/,$(wordlist 2,99999999,$1),$2,$(call ~append,$3,$(call ^u,$(word 1,$1)))),$(call ~longdiv,$1,$3,$2))
~/ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~nnorm,$(call ~uencode,$1)),$(call ~nnorm,$(call ~uencode,$2)),,,,,,$`(if $`(if $`4,,1),nan,$`(call ~udecode,$`(call ~u/,$`3,$`4),$`(call ~xor,$`1,$`2))))
~umod = $(call ^Y,$1,$2,$(subst .,,$2),$(subst $(subst .,,$2),,iiiiiiiiii),,,,,,$`(if $`(call ~eq,$`4,),$`(subst $`3,,$`(word 1,$`1)),$`(if $`(call ~eq,$`4,i),.$`(subst $`3,,$`(subst $`  ,,$`(subst .,,$`1))),$`(call ~u-,$`1,$`(call ~u*,$`(call ~u/,$`1,$`2),$`2)))))
~mod-10 = $(if $(filter %1 %2 %3 %4,$1),$(if $(filter %1 %2,$1),$(if $(filter %1,$1),1,2),$(if $(filter %3,$1),3,4)),$(if $(filter %5 %6 %7 %8,$1),$(if $(filter %5 %6,$1),$(if $(filter %5,$1),5,6),$(if $(filter %7,$1),7,8)),$(if $(filter %9,$1),9,0)))
~mod-10 = $(if $(filter %8 %9,$1),$(if $(filter %8,$1),8,9),$(words $(filter %1 %3 %5 %7 %9,$1)$(if $(filter %2 %3 %6 %7,$1), 1 1)$(if $(filter %4 %5 %6 %7,$1), 1 1 1 1)))
~div-10 = $(patsubst %$(call ~mod-10,$1),%,$1)
~mod-1 = 0
~mod-2 = $(if $(filter %1 %3 %5 %7 %9,$1),1,0)
~mod-3 = $(or $(subst 11,2,$(subst 111,,$(subst 2,11,$(subst 5,11,$(subst 8,11,$(subst 4,1,$(subst 7,1,$(subst 3,,$(subst 6,,$(subst 9,,$(subst 0,,$1))))))))))),0)
~mod-5 = $(word $(subst 0,10,$(call ~mod-10,$1)),1 2 3 4 0 1 2 3 4 0)
~mod-9 = $(words $(subst 1,1 ,$(subst 111111111,,$(subst 2,11,$(subst 3,21,$(subst 4,31,$(subst 5,41,$(subst 6,51,$(subst 7,61,$(subst 8,71,$(subst 9,,$(subst 0,,$1))))))))))))
~mod = $(if $(filter 1 2 3 5 9 10,$2),$(call ~mod-$2,$1),$(call ^Y,$(call ~sign,$1),$(call ~nnorm,$(call ~uencode,$1)),$(call ~nnorm,$(call ~uencode,$2)),,,,,,,$`(if $`(if $`3,,1),nan,$`(call ~udecode,$`(call ~umod,$`2,$`3),$`1))))
~u-range = $(if $(call ~>=,$1,$2),$(if $(call ~==,$1,$2),$1),$(if $(filter %0,$1),$(if $(filter %9,$2),$(if $(filter 0,$1),0 1 2 3 4 5 6 7 8 9 )$(foreach n,$(call ~u-range,$(or $(patsubst %0,%,$1),1),$(or $(patsubst %9,%,$2),0)),$n0 $n1 $n2 $n3 $n4 $n5 $n6 $n7 $n8 $n9 ),$(call ~u-range,$1,$(call ~-,$2,1)) $2),$1 $(call ~u-range,$(call ~1+,$1),$2)))
~0- = $(subst --,,-$(or $1,0))
~range = $(strip $(if $(call ~>=,$1,0),$(call ~u-range,$1,$2),$(addprefix -,$(call ~reverse,$(call ~u-range,$(if $(call ~<,$2,0),$(call ~0-,$2),1),$(call ~0-,$1)))) $(if $(call ~>=,$2,0),$(call ~u-range,0,$2))))
~sum-small = $(if $1,$(call ~+,$(word 1,$1),$(call ~sum-small,$(wordlist 2,99999999,$1))),0)
~sum = $(if $(word 50,$1),$(call ~+,$(call ~sum,$(wordlist 1,$(call ~/,$(words $1),2),$1)),$(call ~sum,$(wordlist $(call ~1+,$(call ~/,$(words $1),2)),99999999,$1))),$(call ~sum-small,$1))

endef
 
define ///parse.min
# compiled from parse.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: parse-text|~parse-text,.,!1. parse-subject|~parse-subject,.,!1. parse-subj-r|~parse-subj-r,p,!1. describe-error|~describe-error,.,!1. natural?|~natural?,p,!1. get-error-desc|~get-error-desc,p,!1. describe-line|~describe-line,p,!1. describe-lnum|~describe-lnum,.,!1. parse-exp|~parse-exp,.,!1. parse-x|~parse-x,p,!1. parse-x2|~parse-x2,p,!1. parse-array|~parse-array,p,!1. parse-seq|~parse-seq,p,!1. parse-seq-err|~parse-seq-err,p,!1. new-Q|~new-Q,p,!1. parse-exp|~parse-exp,.,!1. find-word|~find-word,.,!1. pdec-str|~pdec-str,p,!1. pdec|~pdec,.,!1. penc|~penc,.,!1. expand-spaces|~expand-spaces,p,!1. compress-spaces|~compress-spaces,p,!1. compact-comments|~compact-comments,p,!1. format-form|~format-form,.,!1. symbol-to-string|~symbol-to-string,.,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,.,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,.,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,.,!1. format-form|~format-form,.,!1. form-index|~form-index,.,!1. form-typename|~form-typename,.,!1. form-types!V~form-types, sunquoted?|#,.,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,.,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,.,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,.,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,.,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,.,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,.,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,.,form;L.118:S.119@type?:Q.121@S%:S.125@form foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
~form-types := $(call ~hash-bind,L,list,$(call ~hash-bind,Q,literal string,$(call ~hash-bind,S,symbol)))
~form-typename = $(or $(call ~hash-get,$(word 1,$1),$(~form-types)),invalid form)
~form-index = $(word 2,$(subst ., ,$(word 1,$1)))
define ~form-assert
$(if $(filter $1%,$(word 1,$2)),$2,$(error $(if ,,$3: expected $(call ~form-typename,$1), got $(call ~form-typename,$2):
$(call ~format-form,$2)
)))
endef
~string-value = $(call ~nth,2,$1)
~symbol-name = $(call ~nth,2,$1)
~symbol-to-string = Q $(word 2,$1)
~format-form = $(if $(filter L%,$(word 1,$1)),($(foreach f&,$(wordlist 2,99999999,$1),$(call ~format-form,$(call ^u,$(f&))))),$(if $(filter Q%,$(word 1,$1)),$(call ~format,$(call ~nth,2,$1)),$(if $(filter S%,$(word 1,$1)),$(call ~nth,2,$1),$(if $(filter '%,$(word 1,$1)),'$(call ~format-form,$(call ~nth,2,$1)),$(if $(filter `%,$(word 1,$1)),`$(call ~format-form,$(call ~nth,2,$1)),$(if ,,,$(call ~format,$1)))))))
define ~compact-comments
$(subst ; ;,;;,$(subst !s, ,$(subst $  ,,$(foreach c,$(subst ;, ;,$(subst 
, 
,$(subst ", ",$(subst $  ,!s,$1)))),$(if $(filter ;%,$c),$(subst !s,,$c)!s,$c)))))
endef
define ~compress-spaces
$(subst !6!6,!c,$(subst !2!0!2!0,!6,$(subst !0!0!0,!0!2,$(subst 
!0!0,
!2,$(subst 
 !0,
!0,$1)))))
endef
~expand-spaces = $(subst !2,!0!0,$(subst !6,!2!2!2,$(subst !c,!6!6,$1)))
define ~penc
$(call ~compress-spaces,$(call ~compact-comments,$(subst !+, !0!+ ,$(subst $   , ,$(subst 0  !,0!,$(subst $[, $[ ,$(subst $], $] ,$(subst [, [ ,$(subst ], ] ,$(subst ", " ,$(subst 
, 
 ,$(subst !0, !0 ,$(subst ;, ; ,$(subst \",!Q,$(subst \\,!b,$(subst ', ' ,$(subst `, ` ,$(subst $(if ,,, @),$(if ,,,@ ),$(subst $(if ,,,),$(if ,, , ),$(if $1,$(call ~demote,$1)))))))))))))))))))))
endef
~pdec = $(call ~promote,$(call ~expand-spaces,$(subst !b,\\,$(subst !Q,\",$(subst $  ,,$(subst !0!+,!+,$1))))))
define ~pdec-str
$(or $(call ~expand-spaces,$(subst !b,\,$(subst !Q,",$(subst \n,
,$(subst \t,!+,$(subst $  ,,$(subst !0!+,!+,$1))))))),!.)
endef
~find-word = $(foreach p,$(call ~1+,$(call ~1+,$2)),$(if $(filter $3,$(or $(wordlist $2,$p,$1),$3)),$(if $(filter $3,$(or $(word $2,$1),$3)),$2,$(foreach q,$(call ~1+,$2),$(if $(filter $3,$(or $(word $q,$1),$3)),$q,$p))),$(call ~find-word,$1,$(call ~1+,$p),$3)))
~new-Q = $(if $(word $3,$1),$3 Q.$2 $(call ~pdec-str,$(subst ",,$(wordlist $2,$3,$1))),$3 E.$2 ")
~parse-seq-err = $(if $(filter .,$(word 3,$3)),$(word 1,$2) E.$(word 1,$2) $(subst ],[,$(subst $],$[,$1)),$3 $1)
~parse-seq = $(if $(filter E%,$(word 2,$4)),$(if $(and $(filter $2,$(word 3,$4)),$(if $(word 4,$4),,1)),$(word 1,$4) L.$3 $5,$(call ~parse-seq-err,$2,$3,$4)),$(call ~parse-seq,$1,$2,$3,$(call ~parse-exp,$1,$(call ~1+,$(word 1,$4))),$(if $(word 2,$4),$(call ~conj,$5,$(wordlist 2,99999999,$4)))))
~parse-array = $(call ~parse-seq,$1,],$2 S!0vector,$2)
~parse-x2 = $(if $(filter E%,$(word 2,$3)),$(if $(filter .,$(word 3,$3)),$2 E.$2 $1,$3),$(call ~append,$(word 1,$3),$(or $(filter $(if ,,' ` , @),$(patsubst $(if ,,,@),@,$1)),$(error $(call ^Y,$1,,,,,,,,,Impossible x2: ))).$2 $(call ^d,$(wordlist 2,99999999,$3))))
define ~parse-x
$(if $(filter !0% 
% ;%,$(word $(call ~1+,$3),$2)),$3 E.$3 $1,$(call ~parse-x2,$1,$3,$(call ~parse-exp,$2,$(call ~1+,$3))))
endef
define ~parse-exp
$(or $(foreach w,$(word $2,$1),$(if $(filter !0% 
%,$w),$(call ~parse-exp,$1,$(call ~1+,$2)),$(if $(filter $] ],$w),$2 E.$2 $w,$(if $(filter $[,$w),$(call ~parse-seq,$1,$],$2,$2),$(if $(filter ",$w),$(call ~new-Q,$1,$2,$(call ~find-word,$1,$(call ~1+,$2),")),$(if $(filter ;%,$w),$(call ~parse-exp,$1,$(call ~1+,$(call ~find-word,$1,$2,
%))),$(if $(filter [,$w),$(call ~parse-array,$1,$2),$(if $(filter $(if ,,' ` , ,@),$w),$(call ~parse-x,$w,$1,$2),$(if $(call ~isnumber,$w),$2 Q.$2 $w,$2 S.$2 $w))))))))),$2 E.$2 .)
endef
define ~describe-lnum
$(words 1 $(filter 
,$(subst 
,
 ,$(wordlist 2,$(or $1,1),x$2))))
endef
define ~describe-line
$(call ^Y,$(call ~promote,$(lastword $(call ~split,
,$(wordlist 2,$(or $1,1),X $2)))),$(call ^u,$(word 1,$(call ~split,
,$(wordlist $(or $1,1),99999999,$2)))),,,,,,,,$`(call ^d,$`(call ~pdec,$`1)) $`(call ^d,$`(call ~pdec,$`(word 1,$`2))) $`(call ^d,$`(call ~pdec,$`(wordlist 2,99999999,$`2))))
endef
~get-error-desc = $(if $(filter ` ',$1),prefix "$1" must immediately precede expression,$(if $(filter ( ) [ ],$1),unmatched "$1",$(if $(filter ",$1),unterminated string,$1)))
~natural? = $(call ~isnumber,$(subst 0,,$(subst .,~,$(subst -,~,$(subst e,~,$(subst E,~,$1))))))
define ~describe-error
$(if $(if $(and $(filter E%,$(word 1,$1)),$(call ~natural?,$(or $(call ~form-index,$1),1))),,1),(internal error: bad error form)
,$(call ^Y,$(call ~penc,$2),$(call ~get-error-desc,$(call ~nth,2,$1)),$(if $3,$3:,line ),$(call ~form-index,$1),,,,,,$`3$`(call ~describe-lnum,$`4,$`1): $`2
at: $`(call ~concat-vec,$`(call ~describe-line,$`4,$`1),*)
))
endef
~parse-subj-r = $(if $(filter E%,$(word 2,$2)),$(if $(filter .,$(word 3,$2)),$3,$(call ~conj,$3,$(wordlist 2,99999999,$2))),$(call ~parse-subj-r,$1,$(call ~parse-exp,$1,$(call ~1+,$(word 1,$2))),$(call ~conj,$3,$(wordlist 2,99999999,$2))))
~parse-subject = $(call ~parse-subj-r,$1,$(call ~parse-exp,$1,1))
~parse-text = $(call ~parse-subject,$(call ~penc,$1))

endef
 
define ///repl.min
# compiled from repl.scm
# Requires: core io parse compile num runtime
# Requires: scam-ct
# Exports: repl-file|~repl-file,.,!1. repl-rep|~repl-rep,.,!1. repl|~repl,.,!1. initial-state!=M,L.1194;S.1195:eval-and-print;L.1197:S.1198@concat:Q.1200@(declare!40*1!40&global)!n:Q.1211@(declare!40*2!40&global)!n:L.1222@S.1223!40foreach@S.1225!40lib@S.1227!40LIBS@L.1229!40S.1230!50concat!40Q.1232!50(require!510"!40S.1239!50lib!40Q.1241!50"):Q.1248@!n;L.1253:S.1254@compile-prelude, read-eval-print|~read-eval-print,.,!1. eval-and-print|~eval-and-print,.,!1. describe-env|~describe-env,.,!1. describe-binding|~describe-binding,.,!1. envtypes!V~envtypes, help|~help,.,!1. *2!V*2, *1!V*1, LIBS!V~LIBS, sum|~sum,i,!1. sum-small|~sum-small,i,!1. range|~range,i,!1. 0-|~0-,i,!1. u-range|~u-range,i,!1. mod|~mod,i,!1. mod-9|~mod-9,i,!1. mod-5|~mod-5,i,!1. mod-3|~mod-3,i,!1. mod-2|~mod-2,i,!1. mod-1|~mod-1,i,!1. div-10|~div-10,i,!1. mod-10|~mod-10,i,!1. mod-10|~mod-10,i,!1. umod|~umod,i,!1. /|~/,i,!1. u/|~u/,i,!1. longdiv|~longdiv,i,!1. longdiv-next|~longdiv-next,i,!1. longdiv|~longdiv,i,!1. digit-range|~digit-range,i,!1. strdiv|~strdiv,i,!1. topdigits|~topdigits,i,!1. ==|~==,i,!1. <=|~<=,i,!1. >=|~>=,i,!1. <|~<,i,!1. >|~>,i,!1. ^|~^,i,!1. *|~*,i,!1. -|~-,i,!1. +|~+,i,!1. u^|~u^,i,!1. u^2|~u^2,i,!1. u/2|~u/2,i,!1. nodd|~nodd,i,!1. cmp|~cmp,i,!1. ucmp|~ucmp,i,!1. u-|~u-,i,!1. ndecode|~ndecode,i,!1. u*|~u*,i,!1. u+1|~u+1,i,!1. u+|~u+,i,!1. ucarry|~ucarry,i,!1. udecode|~udecode,i,!1. uencode|~uencode,i,!1. nnorm|~nnorm,i,!1. sign|~sign,i,!1. compile-file|~compile-file,i,!1. construct-file|#,icompile,infile:exports:exe:reqs:uses;L.523:S.524@concat:Q.526@#!40compiled!40from!40:S.535@infile:Q.537@!n:L.541@S.542!40if@S.544!40reqs@L.546!40S.547!50concat!40Q.549!50#!510Requires!c!510!40S.556!50reqs!40Q.558!50!n:L.564@S.565!40if@S.567!40uses@L.569!40S.570!50concat!40Q.572!50#!510Requires!c!510!40S.579!50uses!40Q.581!50!n:S.587@exports:S.589@exe compile-prelude|~compile-prelude,i,!1. compile-text|~compile-text,i,!1. ct-mod!=M,Q.201;scam-ct,icompile rt-mod!=M,Q.184;runtime,icompile parse-text|~parse-text,i,!1. parse-subject|~parse-subject,i,!1. describe-error|~describe-error,i,!1. describe-lnum|~describe-lnum,i,!1. parse-exp|~parse-exp,i,!1. parse-exp|~parse-exp,i,!1. find-word|~find-word,i,!1. pdec|~pdec,i,!1. penc|~penc,i,!1. format-form|~format-form,i,!1. symbol-to-string|~symbol-to-string,iparse,form;L.650:S.651@concat:Q.653@Q!40:L.658@S.659!40word@Q.661!402@S.663!40form symbol-name|~symbol-name,iparse,form;L.552:S.553@nth:Q.555@2:S.557@form string-value|~string-value,iparse,form;L.531:S.532@nth:Q.534@2:S.536@form form-assert|~form-assert,i,!1. format-form|~format-form,i,!1. form-index|~form-index,i,!1. form-typename|~form-typename,i,!1. form-types!V~form-types! sunquoted?|#,iparse,form;L.275:S.276@type?:Q.278@!e%:S.282@form unquoted?|#,iparse,form;L.252:S.253@type?:Q.255@!a%:S.260@form qquoted?|#,iparse,form;L.229:S.230@type?:Q.232@`%:S.237@form quoted?|#,iparse,form;L.206:S.207@type?:Q.209@'%:S.214@form error?|#,iparse,form;L.184:S.185@type?:Q.187@E%:S.191@form list?|#,iparse,form;L.162:S.163@type?:Q.165@L%:S.169@form string?|#,iparse,form;L.140:S.141@type?:Q.143@Q%:S.147@form symbol?|#,iparse,form;L.118:S.119@type?:Q.121@S%:S.125@form file-exists?|~file-exists?,i,!1. read-lines|~read-lines,i,!1. read-file|~read-file,i,!1. write-file|~write-file,i,!1. getline|~getline,i,!1. shell!1|~shell!2,i,!1. printn|~printn,i,!1. echo-command|~echo-command,i,!1. quote-sh-arg|~quote-sh-arg,i,!1. xshell|~xshell,i,!1. SCAM_DEBUG!VSCAM_DEBUG! foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,compile)
$(call ^require,num)
~LIBS := core io parse escape gen0 gen1 compile num
*1 := 
*2 := 
define ~help
$(info Commands:
  :q or ^D : exit REPL loop
  :        : reset input state
  :e       : show environment
  :E       : show environment (including imported entries)
  ?        : this message

Global variables in REPL:
  *1 = most recent value printed
  *2 = second most recent value

)
endef
~envtypes := $(call ~append,$(call ~hash-bind,F,function),$(call ~hash-bind,V,variable),$(call ~hash-bind,B,builtin))
define ~describe-binding
$(if $(filter M,$(word 1,$1)),symbol macro: $(call ~format-form,$(call ~nth,2,$1)),$(or $(and $(filter F,$(word 1,$1)),$(filter #,$(call ~nth,2,$1)),compound macro),$(call ~hash-get,$(word 1,$1),$(~envtypes)),<unknown>)$(if $(call ~nth,4,$1),$(call ~sprintf,: (%s) -> %s,$(call ^u,$(word 1,$(call ~nth,4,$1))),$(foreach f&,$(wordlist 2,99999999,$(call ~nth,4,$1)),$(call ~format-form,$(call ^u,$(f&)))))))
endef
~describe-env = $(foreach w,$(call ~reverse,$(call ~hash-compact,$1)),$(if $(or $2,$(if $(call ~nth,3,$(call ~nth,2,$(subst !=, ,$w))),,1)),$(call ~printf,  %s : %s,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$w)))),$(call ~describe-binding,$(call ~nth,2,$(subst !=, ,$w))))))
~eval-and-print = $(call ^Y,$(call ~compile-text,$1,$2,[console],),$2,$1,,,,,,,$`(if $`(filter $`[ [,$`(word 2,$`(call ^u,$`(word 1,$`(call ~nth,1,$`1))))),$`(call ^d,$`3) $`(call ^d,$`2),$`(if $`(filter .,$`(word 2,$`(call ^u,$`(word 1,$`(call ~nth,1,$`1))))),!. $`(call ^d,$`2),$`(if $`(call ~nth,1,$`1),$`(and $`(foreach err&,$`(call ~nth,1,$`1),$`(call ^d,$`(info $`(call ~describe-error,$`(call ^u,$`(err&)),$`3))))1,!. $`(call ^d,$`2)),$`(and $`(call ^Y,$`(call ^Y,,,,,,,,,,$`(call ~nth,2,$`1)),,,,,,,,,$``(if $``1,$``(and $``(call ^set,*2,$``(*1))1,$``(call ^set,*1,$``1)1,$``(info $``(call ~format,$``1)))))1,!. $`(call ^d,$`(call ~nth,3,$`1)))))))
define ~read-eval-print
$(call ^Y,$(call ~getline,$(if $(call ^u,$(word 1,$1)),+ ,> )),$(call ~nth,1,$1),$(call ~nth,2,$1),$1,,,,,,$`(if $`(call ~eq,$`1,?
),$`(and $`(call ~help)1,$`4),$`(if $`(call ~eq,$`1,:
),!. $`(call ^d,$`3),$`(if $`(call ~eq,$`1,:q
),,$`(if $`(call ~eq,$`1,),,$`(if $`(call ~eq,$`1,:e
),$`(and $`(call ~describe-env,$`3)1,$`4),$`(if $`(call ~eq,$`1,:E
),$`(and $`(call ~describe-env,$`3,1)1,$`4),$`(call ~eval-and-print,$`2$`1,$`3))))))))
endef
define ~repl
$(and $(info SCAM interactive mode. Type '?' for help.)1,$(call ~while,$(value ~identity),$(value ~read-eval-print),$(call ~eval-and-print,(declare *1 &global)
(declare *2 &global)
$(foreach lib,$(~LIBS),(require "$(lib)"))
,$(call ~compile-prelude)))1,$(info ))
endef
define ~repl-rep
$(call ^Y,$(call ~compile-text,$1,$(call ~nth,2,$(call ~eval-and-print,(declare *1 &global)
(declare *2 &global)
$(foreach lib,$(~LIBS),(require "$(lib)"))
,$(call ~compile-prelude))),$(or $2,[commandline]),),,,,,,,,,$`(if $`(call ~nth,1,$`1),$`(and $`(foreach err&,$`(call ~nth,1,$`1),$`(call ^d,$`(info $`(call ~describe-error,$`(call ^u,$`(err&)),$(call ^E,$1)))))1,1),$`(info $`(call ^Y,,,,,,,,,,$`(call ~nth,2,$`1)))))
endef
~repl-file = $(call ^Y,$(call ~read-file,$1),,,,,,,,,$`(if $`1,$`(call ^Y,$`(call ~compile-text,$`1,$`(call ~compile-prelude),$(call ^E,$1),///~,),,,,,,,,,$``(if $``(call ~nth,1,$``1),$``(and $``(foreach err&,$``(call ~nth,1,$``1),$``(call ^d,$``(info $``(call ~describe-error,$``(call ^u,$``(err&)),$`(call ^E,$`1),$(call ^E,$1,`)))))1,1),$``(eval $``(call ~nth,2,$``1)))),$`(and $`(call ~printf,error: empty/missing file %q,$(call ^E,$1))1,1)))

endef
 
define ///runtime.min
# compiled from runtime.scm
# Exports: SCAM_MAIN!VSCAM_MAIN, ^start|^start,.,!1. start|~start,.,!1. *started*!V*started*, ^require|^require,.,!1. ^required-files!V~^required-files, ^add-tags|^add-tags,.,!1. ^tags!V^tags, run-hooks|~run-hooks,.,!1. add-hook|~add-hook,.,!1. *hooks*!V~*hooks*, bound?|#,.,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,.,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,.,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,.,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,.,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,.,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2., apply|~apply,.,!1. set-rglobal|~set-rglobal,.,!1. set-global|~set-global,.,!1. nth|~nth,.,!1. demote|~demote,.,!1. promote|~promote,.,!1. ^E|^E,.,!1. ^fset|^fset,.,!1. ^set|^set,.,!1. esc-LHS|~esc-LHS,.,!1. esc-RHS|#,p,str;L.1051:S.1052@subst:Q.1054@$:Q.1058@$$:Q.1062@#:Q.1066@$":Q.1070@!n:Q.1074@$':S.1079@str ^t|^t,.,!1. F!=M,L.841;S.842:global-name;S.844:^f, TC!=M,L.828;S.829:global-name;S.831:^tc, ^ta|^ta,.,!1. ^tc|~^tc,.,!1. ^tp|^tp,.,!1. ^f|~^f,.,!1. ^apply|~^apply,.,!1. ^av|^av,.,!1. ^Y|^Y,.,!1. ^n|^n,.,!1. ^u|^u,.,!1. ^d|^d,.,!1. SCAM_DEBUG!VSCAM_DEBUG, SCAM_MODS!VSCAM_MODS, abspath!=B,abspath,b,1 basename!=B,basename,b,1 dir!=B,dir,b,1 error!=B,error,b,1 eval!=B,eval,b,1 firstword!=B,firstword,b,1 flavor!=B,flavor,b,1 info!=B,info,b,1 lastword!=B,lastword,b,1 notdir!=B,notdir,b,1 origin!=B,origin,b,1 realpath!=B,realpath,b,1 shell!=B,shell,b,1 sort!=B,sort,b,1 strip!=B,strip,b,1 suffix!=B,suffix,b,1 value!=B,value,b,1 warning!=B,warning,b,1 wildcard!=B,wildcard,b,1 words!=B,words,b,1 addprefix!=B,addprefix,b,2 addsuffix!=B,addsuffix,b,2 filter!=B,filter,b,2 filter-out!=B,filter-out,b,2 findstring!=B,findstring,b,2 join!=B,join,b,2 word!=B,word,b,2 .foreach!=B,foreach,b,3 patsubst!=B,patsubst,b,3 .subst!=B,subst,b,3 wordlist!=B,wordlist,b,3 and!=B,and,b,% or!=B,or,b,% call!=B,call,b,% if!=B,if,b,2;or;3 *args*!V^av,b MAKEFILE_LIST!VMAKEFILE_LIST,b .DEFAULT_GOAL!V.DEFAULT_GOAL,b
SCAM_DEBUG ?=
$(if $(if $(findstring R,$(SCAM_DEBUG)),$(info runtime: $(lastword $(MAKEFILE_LIST)))),)
define \n


endef
 [ := (
 ] := )
" := \#
' := $(\n)
` := $$
& := ,

^d = $(or $(subst $  ,!0,$(subst $ 	,!+,$(subst !,!1,$1))),!.)
^u = $(subst !1,!,$(subst !+,	,$(subst !0, ,$(subst !.,,$1))))
^n = $(call ^u,$(word $1,$2))
^Y = $(call if,,,$(10))
^av = $(subst !.,!. ,$(filter-out %!,$(subst !. ,!.,$(foreach n,1 2 3 4 5 6 7 8,$(call ^d,$($n)))$(if $9, $9) !)))
~^apply = $(call ^Y,$(call ^n,1,$2),$(call ^n,2,$2),$(call ^n,3,$2),$(call ^n,4,$2),$(call ^n,5,$2),$(call ^n,6,$2),$(call ^n,7,$2),$(call ^n,8,$2),$(wordlist 9,9999,$2),$1)
~^f = "$(subst ",\",$(subst \,\\,$1))"
^tp = $(info $1 $(call ~^f,$2))$2
~^tc = $(call $1,$2,$3,$4,$5,$6,$7,$8,$(call ^n,1,$9),$(wordlist 2,9999,$9))
^ta = $(if $(or $1,$2,$3,$4,$5,$6,$7,$8,$9), $(~^f)$(call ~^tc,^ta,$2,$3,$4,$5,$6,$7,$8,$9))
^t = $(info --> ($1$(call ~^tc,^ta,$2,$3,$4,$5,$6,$7,$8,$9)))$(call ^tp,<-- $1:,$(call ~^tc,$1,$2,$3,$4,$5,$6,$7,$8,$9))
define ~esc-LHS
$`(if ,,$(subst $],$`],$(subst $[,$`[,$(subst 
,$`',$(subst #,$`",$(subst $`,$`$`,$1))))))
endef
define ^set
$(eval $(call ~esc-LHS,$1) :=$` $(subst 
,$`',$(subst #,$`",$(subst $`,$`$`,$2))))$3
endef
define ^fset
$(and $(eval define $(call ~esc-LHS,$1)
$(subst \$ 
,\$` 
,$(subst define,$` define,$(subst endef,$` endef,$2
)))endef
)1,$3)
endef
$(if ,, ) := 
define ^E
$(subst $`,$`$2,$`(if ,,$(subst 
,$`',$(subst $[,$`[,$(subst $],$`],$(subst $`,$``,$1))))))
endef
~promote = $(call ^u,$1)
~demote = $(call ^d,$1)
~nth = $(call ^n,$1,$2)
~set-global = $(call ^set,$1,$2,$3)
~set-rglobal = $(call ^fset,$1,$2,$3)
~apply = $(call ~^apply,$1,$2)
~add-hook = $(call ^set,~*hooks*,$(~*hooks*) $1=$2)
~run-hooks = $(foreach funcname,$(patsubst $1=%,%,$(filter $1=%,$(~*hooks*))),$(call $(funcname)))
^tags := 
^add-tags = $(call ^set,^tags,$(^tags) $(filter-out $(^tags),$1))
~^required-files := ///runtime.min
^require = $(foreach ^file,$(filter-out $(~^required-files),$(or $(word 1,$(foreach f,$(SCAM_MODS),$(if $(filter $(notdir $1),$(notdir $(basename $f))),$f))),$(if $(if $(filter-out u%,$(flavor ///$(notdir $1).min)),1),///$(notdir $1).min,$1.min))),$(and $(call ^set,~^required-files,$(~^required-files) $(^file))1,$(if $(findstring R,$(SCAM_DEBUG)),$(info require: $(^file)))1,$(if $(filter ///%,$(^file)),$(eval $(value $(^file))),$(eval include $(^file)))1,$(call ~run-hooks,load)1,$(if $(findstring Rx,$(SCAM_DEBUG)),$(info exited: $(^file)))))
define ~start
$(if $(if $(*started*),,1),$(and $(call ^set,*started*,1)1,$(if $(if $(filter-out u%,$(flavor ///trace.min)),1),$(call ^require,trace))1,$(call ^require,$(notdir $1))1,$(call ^Y,$(call $2,$3),,,,,,,,,$`(eval .DEFAULT_GOAL :=
.PHONY: .scam/-exit
.scam/-exit: $`(.DEFAULT_GOAL); @exit '$`(or $`(subst ',,$`(strip $`1)),0)'$``(call ~run-hooks,exit)))))
endef
$(if $(if $(if $(if $(filter-out u%,$(flavor ^start)),1),,1),$(call ^fset,^start,$(value ~start))),)
$(if $(if $(SCAM_MAIN),$(call ~start,$(SCAM_MAIN),,)),)

endef
 
define ///scam-ct.min
# compiled from scam-ct.scm
# Requires: runtime
# Exports: unless!=X,~unless, unless|~unless,.,!1. when!=X,~when, when|~when,.,!1. SCAM_MAIN!VSCAM_MAIN! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! abspath!=B,abspath,b,1 basename!=B,basename,b,1 dir!=B,dir,b,1 error!=B,error,b,1 eval!=B,eval,b,1 firstword!=B,firstword,b,1 flavor!=B,flavor,b,1 info!=B,info,b,1 lastword!=B,lastword,b,1 notdir!=B,notdir,b,1 origin!=B,origin,b,1 realpath!=B,realpath,b,1 shell!=B,shell,b,1 sort!=B,sort,b,1 strip!=B,strip,b,1 suffix!=B,suffix,b,1 value!=B,value,b,1 warning!=B,warning,b,1 wildcard!=B,wildcard,b,1 words!=B,words,b,1 addprefix!=B,addprefix,b,2 addsuffix!=B,addsuffix,b,2 filter!=B,filter,b,2 filter-out!=B,filter-out,b,2 findstring!=B,findstring,b,2 join!=B,join,b,2 word!=B,word,b,2 .foreach!=B,foreach,b,3 patsubst!=B,patsubst,b,3 .subst!=B,subst,b,3 wordlist!=B,wordlist,b,3 and!=B,and,b,% or!=B,or,b,% call!=B,call,b,% if!=B,if,b,2;or;3 *args*!V^av,b MAKEFILE_LIST!VMAKEFILE_LIST,b .DEFAULT_GOAL!V.DEFAULT_GOAL,b
$(call ^require,runtime)
~when = L.56 S.57!0if $(call ^d,$(call ~nth,3,$1)) $(call ^d,L.62 S.63!0begin $(wordlist 4,99999999,$1))
~unless = L.118 S.119!0if $(call ^d,$(call ~nth,3,$1)) S.124!0nil $(call ^d,L.126 S.127!0begin $(wordlist 4,99999999,$1))

endef
 
define ///scam.min
# compiled from scam.scm
# Requires: core repl build getopts gen runtime
# Requires: scam-ct
# Exports: main|~main,.,!1. opt-err|~opt-err,.,!1. usage|~usage,.,!1. resolve|~resolve,i,!1. base-env!V~base-env! env-rewind|~env-rewind,i,!1. env-rewind-x|~env-rewind-x,i,!1. use-module|~use-module,i,!1. require-module|~require-module,i,!1. env-export|~env-export,i,!1. import-binding|~import-binding,i,!1. is-private?|#,igen,defn;L.2201:S.2202@filter:Q.2204@b!40p!40i%:L.2212@S.2213!40EDefn.priv@S.2215!40defn check-argc|~check-argc,i,!1. check-type|~check-type,i,!1. compile-warn|~compile-warn,i,!1. gen-error|~gen-error,i,!1. env-rewind-M|~env-rewind-M,i,!1. after|~after,i,!1. gensym|~gensym,i,!1. gensym-name|~gensym-name,i,!1. gen-global-name|~gen-global-name,i,!1. *compile-mods*!V~*compile-mods*! *compile-outfile*!V~*compile-outfile*! *compile-file*!V~*compile-file*! *compile-subject*!V~*compile-subject*! EDefn.priv|#,igen,defn;L.582:S.583@word:Q.585@3:S.587@defn EBuiltin!=R,S;W;S,igen,B EFunc!=R,S;W;S,igen,F EVar!=R,S;W,igen,V ESMacro!=R,S;W,igen,M EXMacro!=R,S;W,igen,X ERecord!=R,S;W;S,igen,R EIL!=R,S;W,igen,I EArg!=R,W,igen,A EMarker!=R,W,igen,$ is-balanced?|#,igen,node;L.377:S.378@filter:Q.380@F!40f!40Y!40V:L.390@S.391!40word@Q.393!401@S.395!40node String!=R,S,igen,Q Var!=R,S,igen,V Builtin!=R,W;L,igen,F Call!=R,S;L,igen,f Local!=R,W;W,igen,U Funcall!=R,L,igen,Y Concat!=R,L,igen,C Block!=R,L,igen,B Lambda!=R,S,igen,X getopts|~getopts,i,!1. getopts-loop|~getopts-loop,i,!1. build|~build,i,!1. prefix-of|#,ibuild,sym:name;L.3995:S.3996@subst:S.3998@name:Q.4000@!4.:L.4003@S.4004!40global-name@S.4006!40sym exe-rules|~exe-rules,i,!1. mmap-rules|~mmap-rules,i,!1. mmap-all-deps|~mmap-all-deps,i,!1. mmap-all-requires|~mmap-all-requires,i,!1. link-rule|~link-rule,i,!1. test-rule|~test-rule,i,!1. compile-rule|~compile-rule,i,!1. rule|~rule,i,!1. scan-modules|~scan-modules,i,!1. scan-deps|~scan-deps,i,!1. if-bundled|~if-bundled,i,!1. if-bound|~if-bound,i,!1. if-exists|~if-exists,i,!1. mmap-okfiles|#,ibuild,mmap:names;L.1856:S.1857@addsuffix:Q.1859@.ok:L.1863@S.1864!40mmap-objects@S.1866!40mmap@L.1868!40S.1869!50mmap-testmods!40S.1871!50mmap!40S.1873!50names mmap-testmods|#,ibuild,mmap:names;L.1822:S.1823@foreach:S.1825@m:S.1827@names:L.1829@S.1830!40mod-testmod@L.1832!40S.1833!50assoc!40S.1835!50m!40S.1837!50mmap mmap-minfiles|#,ibuild,mmap:names;L.1792:S.1793@filter-out:Q.1795@///%:L.1799@S.1800!40mmap-objects@S.1802!40mmap@S.1804!40names mmap-objects|#,ibuild,mmap:names;L.1758:S.1759@foreach:S.1761@m:S.1763@names:L.1765@S.1766!40mod-object@L.1768!40S.1769!50assoc!40S.1771!50m!40S.1773!50mmap mmap-add|#,ibuild,mmap:modname:source:object:testmod:requires:uses:is-boot;L.1719:S.1720@cons:L.1722@S!40vector@S.1723!40modname@S.1725!40source@S.1727!40object@S.1729!40testmod@S.1731!40requires@S.1733!40uses@S.1735!40is-boot:S.1738@mmap mod-deps|#,ibuild,mod;L.1678:S.1679@promote:L.1681@S.1682!40wordlist@Q.1684!405@Q.1686!406@S.1688!40mod mod-is-boot|#,ibuild,mod;L.1658:S.1659@nth:Q.1661@7:S.1663@mod mod-uses|#,ibuild,mod;L.1639:S.1640@nth:Q.1642@6:S.1644@mod mod-requires|#,ibuild,mod;L.1620:S.1621@nth:Q.1623@5:S.1625@mod mod-testmod|#,ibuild,mod;L.1601:S.1602@nth:Q.1604@4:S.1606@mod mod-object|#,ibuild,mod;L.1582:S.1583@nth:Q.1585@3:S.1587@mod mod-source|#,ibuild,mod;L.1563:S.1564@nth:Q.1566@2:S.1568@mod mod-name|#,ibuild,mod;L.1544:S.1545@nth:Q.1547@1:S.1549@mod strip-comments|~strip-comments,i,!1. scan-object|~scan-object,i,!1. scan-source|~scan-source,i,!1. echo-cmd|~echo-cmd,i,!1. *quiet*!V~*quiet*! *self*!V~*self*! link|~link,i,!1. epilogue|#,ibuild,main-mod:main-func:rt;L.861:S.862@concat:Q.864@$(eval!40$(value!40:L.875@S.876!40bundle-var@S.878!40rt:Q.881@))!n:Q.887@$(call!40^start!a:L.896@S.897!40bundle-var@S.899!40main-mod:Q.902@!a:S.906@main-func:Q.908@!a$(SCAM_ARGS))!n prologue!=M,Q.831;#!3/bin/bash!n!c!b:for:v:in:"${!e//!3/!4}":!b:do:v=${v//:/@}:!b:v=${v//!2+/!3+}!b:a[++n]=${v!c-!3.}:!b:done:!b:SCAM_ARGS=${a[*]}:exec:make:--no-print-directory:-j:${SCAM_JOBS!c-9}:-f"$0"!n!n,ibuild read-object|~read-object,i,!1. bundle-var|#,ibuild,file;L.761:S.762@concat:S.764@bundle-dir:L.766@S.767!40notdir@S.769!40file bundled?|#,ibuild,path;L.727:S.728@filter:L.730@S.731!40concat@S.733!40bundle-dir@Q.735!40%:S.740@path bundle-path|#,ibuild,source;L.695:S.696@concat:S.698@bundle-dir:L.700@S.701!40modnames-of@S.703!40source:Q.706@.min bundle-dir!=M,Q.673;///,ibuild strip-comments|~strip-comments,i,!1. skip-comments|~skip-comments,i,!1. traverse-graph|~traverse-graph,i,!1. dbg-print|~dbg-print,i,!1. resolve-mod|~resolve-mod,i,!1. clean-path|#,ibuild,f;L.303:S.304@patsubst:Q.306@./%:Q.310@%:L.314@S.315!40subst@Q.317!40/./@Q.321!40/@S.325!40f repl-file|~repl-file,i,!1. repl-rep|~repl-rep,i,!1. repl|~repl,i,!1. initial-state!=M,L.1194;S.1195:eval-and-print;L.1197:S.1198@concat:Q.1200@(declare!40*1!40&global)!n:Q.1211@(declare!40*2!40&global)!n:L.1222@S.1223!40foreach@S.1225!40lib@S.1227!40LIBS@L.1229!40S.1230!50concat!40Q.1232!50(require!510"!40S.1239!50lib!40Q.1241!50"):Q.1248@!n;L.1253:S.1254@compile-prelude,irepl read-eval-print|~read-eval-print,i,!1. eval-and-print|~eval-and-print,i,!1. describe-env|~describe-env,i,!1. describe-binding|~describe-binding,i,!1. envtypes!V~envtypes! help|~help,i,!1. *2!V*2! *1!V*1! LIBS!V~LIBS! foldl|~foldl,i,!1. index-of|~index-of,i,!1. assoc|#,icore,key:vec;L.4593:S.4594@assoc-initial:L.4596@S.4597!40subst@Q.4599!40!51@Q.4603!40!511@L.4607!40S!50vector!40S.4608!50key:S.4612@vec assoc-vec|#,icore,key-vec:vec;L.4560:S.4561@assoc-initial:L.4563@S!40vector@S.4564!40key-vec:S.4567@vec assoc-initial|~assoc-initial,i,!1. type?|#,icore,pat:struct;L.4420:S.4421@filter:S.4423@pat:L.4425@S.4426!40word@Q.4428!401@S.4430!40struct sort-by|~sort-by,i,!1. memoize|~memoize,i,!1. 1+|~1+,i,!1. split|~split,i,!1. uniq|~uniq,i,!1. see|~see,i,!1. expect|#,icore,o:i;L.3462:S.3463@expect-x:S.3465@o:S.3467@i:L.3469@S.3470!40current-file-line expect-x|~expect-x,i,!1. printf|~printf,i,!1. sprintf|~sprintf,i,!1. vsprintf|~vsprintf,i,!1. format|~format,i,!1. format-record|~format-record,i,!1. format-hash|~format-hash,i,!1. format|~format,i,!1. hash-compact|~hash-compact,i,!1. hash-get|~hash-get,i,!1. hash-find|~hash-find,i,!1. hash-value|~hash-value,icore,entry;L.1928:S.1929@nth:Q.1931@2:L.1933@S.1934!40subst@Q.1936!40!51=@Q.1940!40!50@S.1944!40entry hash-key|~hash-key,icore,entry;L.1879:S.1880@promote:L.1882@S.1883!40subst@Q.1885!40!518@Q.1889!40%@L.1893!40S.1894!50word!40Q.1896!501!40L.1898!50S.1899!510subst!50Q.1901!510!5111=!50Q.1905!510!5110!50S.1909!510entry hash-bind|~hash-bind,i,!1. append|~append,i,!1. isnumber|~isnumber,i,!1. while|~while,i,!1. reverse|~reverse,i,!1. indices|~indices,icore,list;L.564:S.565@indicesX:S.567@list:Q.569@.:Q.573@1 indicesX|~indicesX,i,!1. vec-or|~vec-or,icore,vec;L.474:S.475@first:L.477@S.478!40filter-out@L.480!40S!50vector!40Q.481!50!51.@S.485!40vec select-words|~select-words,i,!1. select-vec|~select-vec,i,!1. map-call|~map-call,i,!1. butlast|~butlast,i,!1. strip-vec|#,icore,vec;L.287:S.288@filter:Q.290@%:S.294@vec last|~last,icore,vec;L.250:S.251@promote:L.253@S.254!40lastword@S.256!40vec conj|~conj,i,!1. cons|~cons,i,!1. concat-vec|~concat-vec,i,!1. xor|~xor,i,!1. identity|~identity,icore,a;S.91:a eq|~eq,i,!1. SCAM_DEBUG!VSCAM_DEBUG! ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
$(call ^require,core)
$(call ^require,repl)
$(call ^require,build)
$(call ^require,getopts)
$(call ^require,gen)
define ~usage
$(and $(if $(^av),$(info scam: $(call ~vsprintf,$(^av))))1,$(info Usage:

    scam [-i]              : enter interactive mode
    scam -o EXE FILE...    : build an executable from SRC
    scam -e EXPR           : eval and print value of expression
    scam -r MAK            : load and execute executable file MAK
    scam [-x] FILE ARG...  : compile and execute FILE

Options:

  --no-trace : Omit tracing functionality.  This will produce a slightly
               smaller executable.
)1,$(if $1,1))
endef
~opt-err = $(call ~usage,Unrecognized command option '%s',$1)
~main = $(call ^Y,$(call ~getopts,$1,-e= -h -i -r= -o= --symbols --boot --no-trace -x=...,$(value ~opt-err)),,,,,,,,,$`(if $`(call ~hash-get,o,$`(call ~nth,2,$`1)),$`(call ~build,$`(call ~hash-get,o,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1),$`(call ~nth,2,$`1)),$`(if $`(call ~hash-get,h,$`(call ~nth,2,$`1)),$`(call ~usage),$`(if $`(call ~hash-get,e,$`(call ~nth,2,$`1)),$`(call ~repl-rep,$`(call ~hash-get,e,$`(call ~nth,2,$`1))),$`(if $`(call ~hash-get,r,$`(call ~nth,2,$`1)),$`(eval include $`(call ~hash-get,r,$`(call ~nth,2,$`1))),$`(if $`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)),$`(if $`(call ~eq,$`(call ~gen-global-name,main),~main),$`(and $`(info scam: -x not supported; namespace collision)1,1),$`(and $`(call ~repl-file,$`(call ^u,$`(word 1,$`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)))))1,$`(call ~run-hooks,load)1,$`(call $`(call ~gen-global-name,main),$`(wordlist 2,99999999,$`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)))))),$`(call ~repl)))))))

endef
 
define ///trace.min
# compiled from trace.scm
# Requires: runtime
# Requires: scam-ct
# Exports: trace|~trace,.,!1. trace-dump|~trace-dump,.,!1. trace-rev|~trace-rev,.,!1. trace-check|~trace-check,.,!1. *traces-active*!V~*traces-active*, trace-instrument|~trace-instrument,.,!1. trace-match-funcs|~trace-match-funcs,.,!1. trace-info|~trace-info,.,!1. trace-repeater|~trace-repeater,.,!1. list-of|~list-of,.,!1. trace-n2a|~trace-n2a,.,!1. trace-digits|~trace-digits,.,!1. *traces*!V~*traces*, variables!=M,L.475;S.476:filter-out;S.478:*trace-ignore-vars*;L.480:S.481@subst:Q.483@%:Q.487@():S.492@.VARIABLES, *trace-ignore-vars*!V~*trace-ignore-vars*, .VARIABLES!V.VARIABLES, SCAM_PRE!VSCAM_PRE, SCAM_TRACE!VSCAM_TRACE, ^start|^start,i,!1. start|~start,i,!1. *started*!V*started*! ^require|^require,i,!1. ^required-files!V~^required-files! ^add-tags|^add-tags,i,!1. ^tags!V^tags! run-hooks|~run-hooks,i,!1. add-hook|~add-hook,i,!1. *hooks*!V~*hooks*! bound?|#,iruntime,var;L.1785:S.1786@if:L.1788@S.1789!40filter-out@Q.1791!40u%@L.1795!40S.1796!50flavor!40S.1798!50var:Q.1802@1 rrest|#,iruntime,vec;L.1739:S.1740@nth-rest:Q.1742@3:S.1744@vec rest|#,iruntime,vec;L.1719:S.1720@nth-rest:Q.1722@2:S.1724@vec first|#,iruntime,vec;L.1695:S.1696@^u:L.1698@S.1699!40word@Q.1701!401@S.1703!40vec nth-rest|#,iruntime,n:vec;L.1673:S.1674@wordlist:S.1676@n:Q.1678@99999999:S.1680@vec not|#,iruntime,v;L.1645:S.1646@if:S.1648@v:S.1650@nil:Q.1652@1 nil!=M,Q.1630;!2.,iruntime apply|~apply,i,!1. set-rglobal|~set-rglobal,i,!1. set-global|~set-global,i,!1. nth|~nth,i,!1. demote|~demote,i,!1. promote|~promote,i,!1. ^E|^E,i,!1. ^fset|^fset,i,!1. ^set|^set,i,!1. esc-LHS|~esc-LHS,i,!1. ^t|^t,i,!1. F!=M,L.841;S.842:global-name;S.844:^f,iruntime TC!=M,L.828;S.829:global-name;S.831:^tc,iruntime ^ta|^ta,i,!1. ^tc|~^tc,i,!1. ^tp|^tp,i,!1. ^f|~^f,i,!1. ^apply|~^apply,i,!1. ^av|^av,i,!1. ^Y|^Y,i,!1. ^n|^n,i,!1. ^u|^u,i,!1. ^d|^d,i,!1. SCAM_DEBUG!VSCAM_DEBUG! SCAM_MODS!VSCAM_MODS! unless!=X,~unless! when!=X,~when,i
~*trace-ignore-vars* := 
~*traces* := 
override SCAM_PRE := $(value SCAM_PRE)
^K = $(eval ^K_$0:=$(subst ioooooooooo,oi,$(^K_$0:o%=io%)o))
~trace-digits = $(if $(if $(findstring i,$1),,1),$(call ~trace-digits,i$1),$(if $(findstring ioooooooooo,$1),$(call ~trace-digits,$(subst ioooooooooo,oi,$1)),$(subst $  ,,$(wordlist $(words $(subst i, i,$1)),99,. . . . . . . . $(foreach d,$(subst i, i,$1),$(words $(subst i,,$(subst o, o,$d))))))))
~trace-n2a = $(if $(if $(filter i%,$1),,1),$(call ~trace-n2a,i$1),$(if $(findstring ioooooooooo,$1),$(call ~trace-n2a,$(subst ioooooooooo,oi,$1)),$(subst 10,A,$(words $(subst i, i,$1)))!0$(subst $  ,,$(foreach d,$(subst i, i,$1),$(words $(subst i,,$(subst o, o,$d)))))))
~list-of = $(if $(word $1,$2),$2,$(call ~list-of,$1,$2 x))
~trace-repeater = $(subst NAME,$1,$(subst N-1,$(wordlist 2,99999999,$(call ~list-of,$(or $2,11))),$(if $3,$`(if $`(^X),$`(call if,,,$`(value NAME)),$`(if $`(foreach ^X,N-1,$`(if $`(NAME),)),)$`(foreach ^X,0,$`(NAME))),$`(NAME)$`(if $`(foreach ^xx,N-1,$`(NAME)),))))
~trace-info = $(info TRACE: $1$2$3$4$5)
~trace-match-funcs = $(foreach v,$(if $(findstring %,$1),$(filter $1,$(filter-out $(~*trace-ignore-vars*),$(subst %,(),$(.VARIABLES)))),$1),$(if $(filter recur%,$(flavor $v)),$v))
~trace-instrument = $(if $(filter v,$1),$(and $(call ~trace-info,$2, [,$(flavor $2),] = ,$(value $2))1,$3),$(if $(filter c,$1),$`(^K)$3,$(if $(filter x% X%,$1),$(and $(call ~set-rglobal,$2~0~,$3)1,$(call ~trace-repeater,$2~0~,$(patsubst x%,%,$(subst X,x,$1)),$(filter X%,$1))),$(if $(filter p,$1),$(or $(SCAM_PRE),$(call ~trace-info,SCAM_PRE undefined; needed for ,$2,:p))$3,$(if $(filter t,$1),$(subst CODE,$3,$`(info --> ($`0$`(^ta)))$`(call ^tp,<-- $`0:,CODE)),$(and $(call ~trace-info,Unknown action: ',$1,')1,$3))))))
~*traces-active* := 
~trace-check = $(call ^set,~*traces-active*,$(strip $(~*traces-active*) $(foreach w,$(~*traces*),$(foreach name,$(call ~trace-match-funcs,$(firstword $(subst :, % ,$w))),$(foreach action,$(or $(wordlist 2,99999999,$(subst :, ,.$w)),t),$(if $(if $(filter $(name):$(patsubst x%,x,$(subst X,x,$(action))),$(~*traces-active*)),,1),$(and $(call ~set-rglobal,$(name),$(call ~trace-instrument,$(action),$(name),$(value $(name))))1,$(name):$(patsubst x%,x,$(subst X,x,$(action))))))))))
~trace-rev = $(if $1,$(call ~trace-rev,$(wordlist 2,99999999,$1)) $(firstword $1))
~trace-dump = $(and $(foreach s,$(foreach s,$(~*traces*),$(word 1,$(subst :, ,$s))),$(if $(if $(filter $s,$(foreach s,$(~*traces-active*),$(word 1,$(subst :, ,$s)))),,1),$(call ~trace-info,spec ',$s,' did not match any functions.)))1,$(if $(filter %c,$(~*traces-active*)),$(and $(call ~trace-info,function invocations)1,$(foreach r,$(call ~trace-rev,$(sort $(foreach V,$(filter ^K_%,$(.VARIABLES)),$(call ~trace-digits,$(value $V))$(patsubst ^K_%,::%,$V)))),$(call ~trace-info,$(subst ., ,$(word 1,$(subst ::, ,$r))), : ,$(word 2,$(subst ::, ,$r)))))))
~trace = $(and $(call ^set,~*traces*,$(~*traces*) $1)1,$(call ~trace-check))
~*trace-ignore-vars* := $(filter-out $(~*trace-ignore-vars*),$(subst %,(),$(.VARIABLES)))
$(if $(call ~trace,$(SCAM_TRACE)),)
$(if $(call ~add-hook,load,~trace-check),)
$(if $(call ~add-hook,exit,~trace-dump),)

endef
$(eval $(value ///runtime.min))
$(call ^start,///scam,~main,$(SCAM_ARGS))

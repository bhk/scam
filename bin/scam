#!/bin/bash
:; for v in "${@//!/!1}" ; do v=${v// /!0} ; v=${v//	/!+}; a[++n]=${v:-!.} ; done ; SCAM_ARGS=${a[*]} exec make --no-print-directory -j ${SCAM_JOBS:-9} -f"$0"


define ///build.min
# compiled from build.scm
# Requires: core io parse compile gen runtime
# Requires: scam-ct
# Exports: build|x\3 prefix-of&1\:\p\2\sym`name(3956{3957<subst{3959<name@3961<>.)3964}3965]global-name}3967]sym exe-rules#5 mmap-rules#2 mmap-all-deps#2 mmap-all-requires#2 link-rule#6 test-rule#4 compile-rule#8 rule#4 scan-modules#2`or`3 scan-deps#2 if-bundled#1 if-bound#1 if-exists#1 mmap-okfiles&1\:\p\2\mmap`names(1785{1786<addsuffix@1788<.ok)1792}1793]mmap-objects}1795]mmap<[:P0]1797"1798[0mmap-testmods"1800[0mmap"1802[0names mmap-testmods&1\:\p\2\mmap`names(1751{1752<foreach{1754<m{1756<names)1758}1759]mod-testmod<[:P0]1761"1762[0assoc"1764[0m"1766[0mmap mmap-minfiles&1\:\p\2\mmap`names(1720{1721<filter-out@1723<///!p)1728}1729]mmap-objects}1731]mmap}1733]names mmap-objects&1\:\p\2\mmap`names(1686{1687<foreach{1689<m{1691<names)1693}1694]mod-object<[:P0]1696"1697[0assoc"1699[0m"1701[0mmap mmap-add&1\:\p\8\mmap`modname`source`object`testmod`requires`uses`is-boot(1647{1648<cons)1650}0]vector}1651]modname}1653]source}1655]object}1657]testmod}1659]requires}1661]uses}1663]is-boot{1666<mmap mod-deps&1\:\p\1\mod(1606{1607<promote)1609}1610]wordlist<[:P1]1612]5<[:P1]1614]6}1616]mod mod-is-boot&1\:\p\1\mod(1586{1587<nth@1589<7{1591<mod mod-uses&1\:\p\1\mod(1567{1568<nth@1570<6{1572<mod mod-requires&1\:\p\1\mod(1548{1549<nth@1551<5{1553<mod mod-testmod&1\:\p\1\mod(1529{1530<nth@1532<4{1534<mod mod-object&1\:\p\1\mod(1510{1511<nth@1513<3{1515<mod mod-source&1\:\p\1\mod(1491{1492<nth@1494<2{1496<mod mod-name&1\:\p\1\mod(1472{1473<nth@1475<1{1477<mod scan-object#1 scan-source#1 echo-cmd#0`or`more *quiet*&0\~%\p *self*&0\~%\p link#5 epilogue&1\:\p\3\main-mod`main-func`rt(822{823<concat@825<$!Oeval]$!Ovalue])836}837]bundle-var}839]rt@842<!P!P!n@848<$!Ocall]^start,)857}858]bundle-var}860]main-mod@863<,{867<main-func@869<,$!OSCAM_ARGS!P!P!n prologue&2\':P1`792`!M>/bin/bash!n:;<for<v<in<!N$!K!J//>/[!L!N<;<do<v=$!Kv//</]!L<;<v=$!Kv//'!Q/>!Q!L;<a!F!Q!Qn!G=$!Kv:->.!L<;<done<;<SCAM_ARGS=$!Ka!F*!G!L<exec<make<--no-print-directory<-j<$!KSCAM_JOBS:-9!L<-f!N$0!N!n!n\p read-object#1 bundle-var&1\:\p\1\file(722{723<concat{725<bundle-dir)727}728]notdir}730]file bundled?&1\:\p\1\path(688{689<filter)691}692]concat}694]bundle-dir<[:P1]696]!p{701<path bundle-path&1\:\p\1\source(656{657<concat{659<bundle-dir)661}662]modnames-of}664]source@667<.min bundle-dir&2\':P1`634`///\p modnames-of#1 strip-comments#1 skip-comments#1 traverse-graph#3 dbg-print#3 resolve-mod#2 clean-path&1\:\p\1\f(264{265<patsubst@267<./!p@272<!p)276}277]subst<[:P1]279]/./<[:P1]283]/}287]f begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 compile-file|icompile\6 compile-prelude|icompile\1 compile-text|icompile\4 ct-mod&2\':P1`194`scam-ct\icompile rt-mod&2\':P1`175`runtime\icompile parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 file-exists?|iio\1 read-lines|iio\1`or`2`or`3 read-file|iio\1 write-file|iio\2 getline|iio\1 shell!1&1\~%1\iio\1 printn|iio\0`or`more echo-command|iio\1 quote-sh-arg|iio\1 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,compile)
$(call ^require,gen)
~resolve-mod = $(patsubst ./%,%,$(subst /./,/,$(dir $1)$2$(suffix $1)))
~dbg-print = $(and $(if $(findstring $1,$(value SCAM_DEBUG)),$(call ~printf,$2,$3))1,$3)
~traverse-graph = $(if $(call ^u,$(word 1,$1)),$(call ~cons,$(call ^u,$(word 1,$1)),$(call ~traverse-graph,$(call ~append,$(wordlist 2,99999999,$1),$(filter-out $(call ~append,$1,$3),$(call ^Y,$(call ^u,$(word 1,$1)),,,,,,,,,$2))),$2,$(call ~append,$(call ^u,$(word 1,$1)),$3))))
define ~skip-comments
$(if $(or $(and $1,$(if $(call ^u,$(word 1,$1)),,1)),$(filter #%,$(word 1,$(call ^u,$(word 1,$1))))),$(call ~skip-comments,$(wordlist 2,99999999,$1)),$1)
endef
define ~strip-comments
$(call ~concat-vec,$(call ~skip-comments,$(call ~split,
,$1)),
)
endef
~modnames-of = $(basename $(notdir $1))
~read-object = $(if $(filter ///%,$1),$(value ///$(notdir $1)),$(call ~read-file,$1))
define ~link
$(and $(call ~write-file,$1,#!/bin/bash
:; for v in "$`{@//!/!1}" ; do v=$`{v// /!0} ; v=$`{v//	/!+}; a[++n]=$`{v:-!.} ; done ; SCAM_ARGS=$`{a[*]} exec make --no-print-directory -j $`{SCAM_JOBS:-9} -f"$`0"

$(foreach obj,$2,
$ define ///$(notdir $(call ^u,$(obj)))
$(call ^Y,$(call ~read-object,$(call ^u,$(obj))),,,,,,,,,$(if $5,$(value ~identity),$(value ~strip-comments)))
$ endef
)$`(eval $`(value ///$(notdir $4)))
$`(call ^start,///$(notdir $3),$(call ~gen-global-name,main,),$`(SCAM_ARGS))
)1,$(shell chmod +x $(call ~quote-sh-arg,$1)))
endef
~*self* := $(firstword $(MAKEFILE_LIST))
~*quiet* := $(if $(findstring M,$(SCAM_DEBUG)),,@)
~echo-cmd = $(subst $`,$`$`,@ echo $(call ~quote-sh-arg,$(call ~concat-vec,$(foreach N,1,$(^v)))))
~scan-source = $(call ^Y,$(shell sed -E 's/ //g;s/^\$[(require|use)"([^"]*)".*|.*/\1\2/g;/../!d' $(call ~quote-sh-arg,$1)),,,,,,,,,$`(filter-out !.,$`(foreach symbol,require% use%,$`(call ~demote,$`(foreach w,$`(patsubst $`(symbol),%,$`(filter $`(symbol),$`1)),$`(call ~demote,$`(call ~resolve-mod,$(call ^E,$1),$`w)))))))
define ~scan-object
$(call ^Y,$(wordlist 1,4,$(call ~split,
,$(call ~read-object,$1))),,,,,,,,,$`(foreach key,Requires Uses,$`(call ^d,$`(foreach m,$`(call ~promote,$`(patsubst $`(call ^d,# $`(key): %),%,$`(filter $`(call ^d,# $`(key): %),$`1))),$`(call ~resolve-mod,$(call ^E,$1),$`m)))))
endef
~if-exists = $(wildcard $1)
~if-bound = $(if $(if $(filter-out u%,$(flavor $1)),1),$1)
~if-bundled = $(call ~if-bound,///$(call ~modnames-of,$1).min)
~scan-deps = $(if $1,$(call ~scan-source,$1),$(call ~scan-object,$2))
~scan-modules = $(if $(if $(call ^u,$(word 1,$2)),,1),$3,$(if $(call ~assoc-initial,$(subst !,!1,$(call ^d,$(call ~modnames-of,$(call ^u,$(word 1,$2))))),$3),$(call ~scan-modules,$1,$(wordlist 2,99999999,$2),$3),$(call ^Y,$1,$(wordlist 2,99999999,$2),$3,$(call ~modnames-of,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(or $(if $(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(call ~hash-get,odir,$1)$(call ~modnames-of,$(call ^u,$(word 1,$2))).min),$(call ~if-exists,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(basename $(call ^u,$(word 1,$2))).min),$(if $(call ~hash-get,rebundle,$1),$(call ~if-bundled,$(call ^u,$(word 1,$2)))),$(call ^u,$(word 1,$2))),$(call ~scan-deps,$(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(or $(if $(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(call ~hash-get,odir,$1)$(call ~modnames-of,$(call ^u,$(word 1,$2))).min),$(call ~if-exists,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(basename $(call ^u,$(word 1,$2))).min),$(if $(call ~hash-get,rebundle,$1),$(call ~if-bundled,$(call ^u,$(word 1,$2)))),$(call ^u,$(word 1,$2)))),,,$`(call ~scan-modules,$`1,$`(call ~append,$`2,$`(call ~promote,$`7),$`(call ~if-exists,$`(patsubst %.scm,%-q.scm,$`5))),$`(call ~cons,$`(call ^d,$`4) $`(call ^d,$`5) $`(call ^d,$`6) $`(call ^d,$`(call ~modnames-of,$`(call ~if-exists,$`(patsubst %.scm,%-q.scm,$`5)))) $`(call ^d,$`(call ~modnames-of,$`(call ~append,$`(call ~nth,1,$`7),$`(if $`(call ~hash-get,boot,$`1),,runtime.scm)))) $`(call ^d,$`(call ~modnames-of,$`(call ~append,$`(call ~nth,2,$`7),$`(if $`(call ~hash-get,boot,$`1),,scam-ct.scm)))) $`(call ^d,$`(call ~hash-get,boot,$`1)),$`3)))))
define ~rule
$1: $2$(if $3, | )$3$(call ~concat-vec,$(call ~cons,,$(foreach cmd,$4,$(call ^d,$(if $(filter @%,$(word 1,$(call ^u,$(cmd)))),$(call ^u,$(cmd)),$(~*quiet*)$(call ^u,$(cmd)))))),
	)


endef
~compile-rule = $(call ~rule,$1,$(call ~append,$2,$3,$(~*self*)),$4,$(call ^d,@ true $(call ^Y,$2,$5,$6,$7,$8,,,,,$``(and $``(info => compiling $(call ^E,$1,`))1,$``(call ~compile-file,$`(call ^E,$`1),$(call ^E,$1,`),$`(call ^E,$`5),$`(call ^E,$`2),$`(call ^E,$`3),$`(call ^E,$`4))))))
~test-rule = $(call ~rule,$1,$2,,$(call ^d,$(call ~echo-cmd,=> running ,$(basename $2))) $(call ^d,$(MAKE) -s -f $(if $(filter ///%,$3),$(call ~quote-sh-arg,$(~*self*)),$3) SCAM_MAIN='$(patsubst %.min,%,$2)' SCAM_MODS='$4') $(call ^d,touch $1))
~link-rule = $(call ~rule,$1,$2,$3,$(call ^d,@ true $(call ^Y,$(call ~sort-by,$`(notdir $`1),$4),$(call ~modnames-of,$(call ^u,$(word 1,$4))),,,,,,,,$``(and $``(info => linking $(call ^E,$1,`))1,$``(call ~link,$(call ^E,$1,`),$`(call ^E,$`1),$`(call ^E,$`2),$(call ^E,$5,`),$(call ^E,$6,`))))))
~mmap-all-requires = $(call ^set,~*mmap*,$(call ^set,~*mmap*,$1,$(~*mmap*)),$(call ~traverse-graph,$2,$`(call ~nth,5,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`1)),$`(~*mmap*))),))
~mmap-all-deps = $(call ^set,~*mmap*,$(call ^set,~*mmap*,$1,$(~*mmap*)),$(call ~traverse-graph,$2,$`(call ~promote,$`(wordlist 5,6,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`1)),$`(~*mmap*)))),))
~mmap-rules = $(call ~concat-vec,$(filter-out !.,$(foreach mod,$1,$(call ^d,$(if $(call ~nth,2,$(call ^u,$(mod))),$(if $(filter %.min,$(call ~nth,3,$(call ^u,$(mod)))),$(call ~compile-rule,$(call ~nth,3,$(call ^u,$(mod))),$(call ~nth,2,$(call ^u,$(mod))),$(filter-out ///%,$(foreach m,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod)))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$(filter-out $(call ~nth,3,$(call ^u,$(mod))).ok,$(addsuffix .ok,$(foreach m,$(foreach m,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod)))),$(call ~nth,4,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))),$(filter-out ///%,$(foreach m,$(call ~mmap-all-deps,$1,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod))))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$(call ~nth,5,$(call ^u,$(mod))),$(call ~nth,6,$(call ^u,$(mod))),$(call ~nth,7,$(call ^u,$(mod))))))$(if $(call ~nth,4,$(call ^u,$(mod))),$(call ~test-rule,$(addsuffix .ok,$(filter-out ///%,$(foreach m,$(call ~nth,4,$(call ^u,$(mod))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))),$(filter-out ///%,$(foreach m,$(call ~nth,4,$(call ^u,$(mod))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$2,$(filter-out ///%,$(foreach m,$(call ~mmap-all-requires,$1,$(call ^d,$(call ~nth,4,$(call ^u,$(mod))))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))))))),)
~exe-rules = $(call ^Y,$(call ~scan-modules,$(call ~append,$(call ~hash-bind,odir,$(dir $1)),$(call ~hash-bind,rebundle,$(if $(call ~eq?,$(subst apply,,~apply),$(subst compile-file,,~compile-file)),1,$(if $4,,$(error Warning: must use --boot; bundles are unusable))))),$(call ~append,$2,$(if $(if $3,,1),$(subst %,trace,$(if $4,%.scm,///%.min))),$(if $4,$(subst %,scam-ct,$(if $4,%.scm,///%.min)))),$(call ~scan-modules,$(call ~hash-bind,boot,1,$(call ~append,$(call ~hash-bind,odir,$(dir $1)),$(call ~hash-bind,rebundle,$(if $(call ~eq?,$(subst apply,,~apply),$(subst compile-file,,~compile-file)),1,$(if $4,,$(error Warning: must use --boot; bundles are unusable)))))),$(call ^d,$(subst %,runtime,$(if $4,%.scm,///%.min))) $(call ^d,$(subst %,scam-ct,$(if $4,%.scm,///%.min))))),$(notdir $(basename $(call ~append,$2,$(if $(if $3,,1),$(subst %,trace,$(if $4,%.scm,///%.min))),$(if $4,$(subst %,scam-ct,$(if $4,%.scm,///%.min)))))),,,,,,,,$`(call ~link-rule,$(call ^E,$1),$`(filter-out ///%,$`(foreach m,$`2,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))),$`(addsuffix .ok,$`(foreach m,$`(foreach m,$`2,$`(call ~nth,4,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))),$`(foreach m,$`(call ~mmap-all-requires,$`1,$`2),$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$`(foreach m,runtime,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$(call ^E,$5))$`(call ~mmap-rules,$`1,$`(foreach m,runtime,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))))
~build = $(eval $(call ~dbg-print,B,Eval: %s,$(call ~rule,.PHONY,,/exe /dir,)$(call ~rule,/exe,,/dir $(call ^d,$1),)$(call ~rule,/dir,,,$(call ^d,mkdir -p $`(dir $(call ^E,$1))))$(call ~exe-rules,$1,$2,$(call ~hash-get,no-trace,$3),$(call ~hash-get,boot,$3),$(call ~hash-get,symbols,$3))))

endef
 
define ///compile.min
# compiled from compile.scm
# Requires: core parse gen gen0 gen1 io macros runtime
# Requires: scam-ct
# Exports: compile-file|x\6 construct-file&1\:\p\5\infile`env`exe`reqs`uses(406{407<concat@409<!M]compiled]from]{418<infile@420<!n)424}425]if}427]reqs<[:P0]429"430[0concat][1:P1[0432[0!M[10Requires:[10"440[0reqs][1:P1[0442[0!n)448}449]if}451]uses<[:P0]453"454[0concat][1:P1[0456[0!M[10Requires:[10"464[0uses][1:P1[0466[0!n)472}473]env-export}475]env{478<exe compile-prelude|x\1 compile-text|x\4 ct-mod&2\':P1`194`scam-ct\x rt-mod&2\':P1`175`runtime\x file-exists?|iio\1 read-lines|iio\1`or`2`or`3 read-file|iio\1 write-file|iio\2 getline|iio\1 shell!1&1\~%1\iio\1 printn|iio\0`or`more echo-command|iio\1 quote-sh-arg|iio\1 gen1|i%\2 c0|igen0\2`or`3 c0-block|igen0\2 c0-block-cc|igen0\3`or`4`or`5 c0-vec|igen0\2 skip-flags|igen0\2 get-flags|igen0\2 env-strip|igen0\2 block-result|igen0\3 begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,gen)
$(call ^require,gen0)
$(call ^require,gen1)
$(call ^require,io)
$(call ^require,macros)
~compile-text = $(call ^set,~*compile-subject*,$(call ^set,~*compile-subject*,$(call ~penc,$1),$(~*compile-subject*)),$(call ^set,~*compile-file*,$(call ^set,~*compile-file*,$3,$(~*compile-file*)),$(call ~c0-block-cc,$2,$(call ~parse-subject,$(~*compile-subject*)),$`(call ~conj,$`(call ~gen1,$`2,$(call ^E,$4)),$`1))))
~compile-prelude = $(if $(if $1,,1),$(call ~append,$(call ~require-module,runtime,),$(call ~use-module,scam-ct)))
define ~compile-file
$(and $(if $(findstring B,$(SCAM_DEBUG)),$(call ~printf,compile-file: %s -> %s%s
 mod-files = %s
 reqs = %s
 uses = %s
,$1,$2,$(if $3, [--boot]),$4,$5,$6))1,$(call ^set,~*compile-mods*,$(call ^set,~*compile-mods*,$4,$(~*compile-mods*)),$(call ^Y,$(call ~read-file,$1),$2,$(call ~compile-prelude,$3),,,,,,,$`(call ^Y,$`(call ~compile-text,$`1,$`3,$(call ^E,$1),$`2),$`1,$(call ^E,$1),$`2,,,,,,$``(if $``(call ^u,$``(word 1,$``1)),$``(and $``(foreach e,$``(call ^u,$``(word 1,$``1)),$``(call ^d,$``(info $``(call ~describe-error,$``(call ^u,$``e),$``2,$``3))))1,$``(error $``(subst %S,$``(if $``(call ~eq?,1,$``(words $``(call ^u,$``(word 1,$``1)))),,s),compilation error%S))),$``(call ~write-file,$``4,# compiled from $``3
$``(if $(call ^E,$5,`),# Requires: $(call ^E,$5,`)
)$``(if $(call ^E,$6,`),# Requires: $(call ^E,$6,`)
)$``(call ~env-export,$``(call ~nth,3,$``1))$``(call ~nth,2,$``1)))))))
endef

endef
 
define ///core.min
# compiled from core.scm
# Requires: runtime
# Requires: scam-ct
# Exports: intersperse|x\2 foldr|x\3 foldl|x\3 index-of|x\2 assoc&1\:\x\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\x\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|x\2 sort-by|x\2 memoize|x\1 memoenc#1`or`2`or`3 mcache#6 1!Q|x\1 split|x\2 uniq|x\1 see|x\2 fexpect&1\:\x\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\x\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|x\3 printf|x\1`or`more sprintf|x\1`or`more vsprintf|x\2 format|x\1 format-custom#2 format-add|x\1 *format-funcs*&0\~%\p format-record#1 data-foreach#4 format-hash#1 format|x\1 hash-keys|x\1 hash-compact|x\1`or`2 hash-get|x\2`or`3 hash-find|x\2 hash-value|x\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|x\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|x\2`or`3 append|x\0`or`more filtersub&1\:\x\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|x\1 numeric?|x\1 while|x\3 reverse|x\1 rev-zeroes#2 rev-by-10s#2 indices&1\:\x\1\list(592{593<%-x{595<list@597<1 indices-x#2 vec-or|x\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|x\2 select-vec|x\2 map-call|x\2 butlast|x\1 strip-vec|x\1\vec(304{305<filter@307<!p{311<vec last|x\1\vec(264{265<promote)267}268]%word}270]vec conj|x\2 cons|x\2 concat-vec|x\1`or`2 xor|x\2 identity|x\1\a\':P2`95`a eq?|x\2 SCAM_DEBUG&0\%\p ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
~eq? = $(if $(findstring 1$1,$(findstring 1$2,1$1)),1)
~identity = $1
~xor = $(if $1,$(if $2,,$1),$2)
~concat-vec = $(call ~promote,$(subst $  ,$(call ~demote,$2),$1))
~cons = $(call ~demote,$1)$(if $2, )$2
~conj = $1$(if $1, )$(call ~demote,$2)
~last = $(call ~promote,$(lastword $1))
~strip-vec = $(filter %,$1)
~butlast = $(wordlist 2,$(words $1),X $1)
~map-call = $(foreach x,$2,$(call ^d,$(call $1,$(call ^u,$x))))
~select-vec = $(filter-out !,$(foreach dx,$2,$(if $(call ^Y,$(call ~promote,$(dx)),,,,,,,,,$1),$(dx),!)))
~select-words = $(foreach a,$(foreach x,$2,$(if $(call ^Y,$x,,,,,,,,,$1),$x)),$a)
~vec-or = $(call ^u,$(word 1,$(filter-out !.,$1)))
~indices-x = $(if $(word $(words $2),$1),$(words $2) $(call ~indices-x,$1,1 $2))
~rev-by-10s = $(if $1,$(if $2,$(foreach p,10 9 8 7 6 5 4 3 2 1,$(call ~rev-by-10s,$(wordlist $(word $p,0 1 2 3 4 5 6 7 8 9)$(patsubst %0,%1,$2),$p$2,$1),$(patsubst 0%,%,$2))),$(foreach p,10 9 8 7 6 5 4 3 2 1,$(word $p,$1))))
~rev-zeroes = $(if $(word 1$21,$1),$(call ~rev-zeroes,$1,0$2),$2)
~reverse = $(wordlist 1,99999999,$(call ~rev-by-10s,$1,$(call ~rev-zeroes,$1,)))
~while-0 = $(if $(filter iiiiiiiiiiiiiiiiiiii,$4),1 $(call ^d,$3),$(if $(call ^Y,$3,,,,,,,,,$1),$(call ~while-0,$1,$2,$(call ^Y,$3,,,,,,,,,$2),i$4),0 $(call ^d,$3)))
~while-N = $(if $(filter 0,$(word 1,$3)),$3,$(if $(filter iii,$5),$(if $(filter 1,$4),$(call ~while-N,$1,$2,$3,$4 0,ii),$3),$(call ~while-N,$1,$2,$(if $4,$(call ~while-N,$1,$2,$3,$(wordlist 2,99999999,$4),),$(call ~while-0,$1,$2,$(call ~nth,2,$3),)),$4,i$5)))
~while = $(if $(call ^Y,$3,,,,,,,,,$1),$(call ^Y,$(call ^Y,$3,,,,,,,,,$2),,,,,,,,,$`(call ~nth,2,$`(call ~while-N,$(call ^E,$1),$(call ^E,$2),$`(call ~while-0,$(call ^E,$1),$(call ^E,$2),$`1,),1,ii))),$3)
~numeric? = $(if $(filter 0% 1% 2% 3% 4% 5% 6% 7% 8% 9%,$(subst -,,$1)),$(if $(patsubst .%,%,$(patsubst %e,%,$(subst 0,,$(patsubst -%,%,$(subst $  ,_,$(subst E0,e,$(subst E-,E,$(subst e,E,$(subst 9,0,$(subst 8,0,$(subst 7,0,$(subst 6,0,$(subst 5,0,$(subst 4,0,$(subst 3,0,$(subst 2,0,$(subst 1,0,$1))))))))))))))))),,$1))
~natural? = $(call ~numeric?,$(subst 0,,$(subst .,~,$(subst -,~,$(subst e,~,$(subst E,~,$1))))))
~append = $(filter %,$1 $2 $3 $4 $5 $6 $7 $8 $(if $(9),$(call ~promote,$(9))))
~hash-bind = $(subst %,!8,$(call ^d,$1))!=$(call ^d,$2)$(if $3, )$3
~hash-key = $(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$1))))
~hash-value = $(call ~nth,2,$(subst !=, ,$1))
~hash-find = $(word 1,$(filter $(subst %,!8,$(call ^d,$1))!=%,$2))
~hash-get = $(call ~nth,2,$(subst !=, ,$(call ~hash-find,$1,$2))$(if $3, x $(call ~demote,$3)))
~hash-compact = $(if $(if $1,,1),$2,$(call ~append,$(word 1,$1),$(call ~hash-compact,$(filter-out $(word 1,$(subst !=,!=% ,$(word 1,$1))),$(wordlist 2,99999999,$1)))))
~hash-keys = $(foreach e,$1,$(subst !8,%,$(word 1,$(subst !=, ,$e))))
~format-hash = $(if $(findstring !=,$1),$(if $(call ~eq?,$1,$(foreach w,$1,$(call ~hash-bind,$(call ~nth,1,$(subst !=, ,$w)),$(call ~nth,2,$(subst !=, ,$w))))),{$(call ~concat-vec,$(foreach e,$1,$(call ^d,$(call ~format,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$e))))): $(call ~format,$(call ~nth,2,$(subst !=, ,$e))))),$(if ,,, ))}))
~data-foreach = $(if $2,$(call ~data-foreach,$1,$(wordlist 2,99999999,$2),$(wordlist 2,99999999,$3),$4$(if $4, )$(call ^Y,$(if $(filter L,$(word 1,$2)),$3,$(if $(filter S,$(word 1,$2)),$(call ~nth,1,$3),$(if $(filter W,$(word 1,$2)),$(word 1,$3),$(error bad encoding in ctor pattern)))),$(word 1,$2),,,,,,,,$1)),$4)
~format-record = $(if $(filter !:%,$(word 1,$1)),$(call ^Y,$(call ~hash-get,$(word 1,$1),$(^tags)),$(wordlist 2,99999999,$1),$(word 1,$1),$1,,,,,,$`(and $`1,$`(call ~eq?,$`(filter %,$`4),$`(filter %,$`(call ~data-foreach,$``(if $``(call ~eq?,S,$``2),$``(call ^d,$``1),$``1),$`(wordlist 2,99999999,$`1),$`2,$`3))),($`(call ~nth,1,$`1)$`(if $`(wordlist 2,99999999,$`1), )$`(call ~data-foreach,$``(if $``(and $``(call ~eq?,L,$``2),$``(if $``1,,1)),[],$``(call ~format,$``1)),$`(wordlist 2,99999999,$`1),$`2,)))))
~*format-funcs* := 
~format-add = $(call ^set,~*format-funcs*,$(call ~cons,$1,$(~*format-funcs*)))
~format-custom = $(if $2,$(or $(call ^Y,$1,,,,,,,,,$(call ^u,$(word 1,$2))),$(call ~format-custom,$1,$(wordlist 2,99999999,$2))))
define ~format
$(or $(call ~format-custom,$1,$(~*format-funcs*)),$(if $(findstring !,$1),$(or $(call ~format-hash,$1),$(call ~format-record,$1))),$(if $(or $(findstring !,$1),$(and $(findstring $  ,$1),$(call ~numeric?,$(subst $  ,,$1)))),$(if $(call ~eq?,$1,$(foreach w,$1,$(call ~demote,$(call ~promote,$w)))),[$(foreach w,$1,$(call ~format,$(call ~promote,$w)))])),$(call ~numeric?,$1),"$(subst $ 	,\t,$(subst 
,\n,$(subst ",\",$(subst \,\\,$1))))")
endef
~vsprintf = $(call ~concat-vec,$(foreach w,$(join !. $2,$(subst $  !% !%,%,$(subst %, !%,%s$(call ^d,$1)))),$(if $(findstring !%s,$w),$(subst !%s,,$w),$(if $(findstring !%q,$w),$(call ~cons,$(call ~format,$(call ^u,$(word 1,$(subst !%q,!. ,$w)))),$(word 2,$(subst !%q,!. ,$w))),$(if $(findstring !%,$w),$(subst !%,[unkonwn % escape]%,$w))))))
~sprintf = $(call ~vsprintf,$1,$(foreach N,2,$(^v)))
~printf = $(info $(call ~vsprintf,$1,$(foreach N,2,$(^v))))
define ~expect-x
$(if $(call ~eq?,$1,$2),$(if $(findstring O,$(SCAM_DEBUG)),$(info $3: OK: $1)),$(and $(info $3: error: assertion failed
A: $(call ~format,$1)
B: $(call ~format,$2)

Raw:
A: $1
B: $2
)1,$(if $(if $(findstring K,$(SCAM_DEBUG)),,1),$(error ))))
endef
define ~see
$(if $(findstring $1,$2),1,$(and $(info Expected: $(subst 
,
          ,$1))1,$(info $   Within: $(subst 
,
          ,$2))))
endef
~uniq-x = $(if $1,$(word 1,$1) $(call ~uniq-x,$(filter-out $(word 1,$1),$(wordlist 2,99999999,$1))))
~uniq = $(subst ~1,~,$(subst ~p,%,$(filter %,$(call ~uniq-x,$(subst %,~p,$(subst ~,~1,$1))))))
~split = $(foreach w,$(subst $(or $(subst $ 	,{t},$(subst $  ,{s},$(subst {L,{L},$(subst },{R},$(subst {,{L,$1))))),{}),{} {},$(or $(subst $ 	,{t},$(subst $  ,{s},$(subst {L,{L},$(subst },{R},$(subst {,{L,$2))))),{})),$(call ^d,$(subst {L,{,$(subst {R},},$(subst {L},{L,$(subst {s}, ,$(subst {t},	,$(subst {},,$w))))))))
~1+ = $(if $(filter %1 %2 %3 %4,$1),$(subst 1~,2,$(subst 2~,3,$(subst 3~,4,$(subst 4~,5,$1~)))),$(if $(filter %5 %6 %7,$1),$(subst 5~,6,$(subst 6~,7,$(subst 7~,8,$1~))),$(if $(findstring 9~,$1~),$(call ~1+,$(or $(subst 9~,,$1~),0))0,$(patsubst %0,%1,$(patsubst %8,%9,$1)))))
~mcache = $(and $(if $6,$(info Warning: memoized function passed more than three arguments))1,$(if $(if $(if $(filter-out u%,$(flavor $1)),1),,1),$(call ~set-global,$1,$(call ^Y,$3,$4,$5,,,,,,,$2)))1,$(value $1))
~memoenc = $(if $(or $1,$2,$3),~~$(subst ~,~0,$1)$(call ~memoenc,$2,$3))
~memoize = $(if $(if $(if $(filter-out u%,$(flavor $1)),1),,1),$(info Warning: [memoize-1] function '$1' not defined.),$(call ^Y,$(value $1),*memo$(call ~memoenc,$1),$1,,,,,,,$`(call ~set-rglobal,$`3,$``(call ~mcache,$`(call ^E,$`2)$``(call ~memoenc,$``1,$``2,$``3),$`(call ^E,$`1),$``1,$``2,$``3,$``(or $``4,$``5,$``6,$``7,$``8)))))
~sort-by = $(filter-out %!!,$(subst !!,!! ,$(sort $(foreach w,$2,$(call ~demote,$(call ^Y,$(call ~promote,$w),,,,,,,,,$1))!!$w))))
~assoc-initial = $(call ~promote,$(firstword $(if $(findstring %,$1),$(subst !8,$1,$(filter !8 !8!0%,$(subst $1,!8,$2))),$(filter $1 $1!0%,$2))))
~index-of = $(words $(subst !_, ,$(filter %!|,$(subst !_$(call ^d,$2)!_,!_!| ,!_$(subst $  ,!_,$1)!_))))
~foldl = $(if $(firstword $3),$(call ~foldl,$1,$(call ^Y,$2,$(call ^u,$(word 1,$3)),,,,,,,,$1),$(wordlist 2,99999999,$3)),$2)
~foldr = $(if $(firstword $3),$(call ^Y,$(call ^u,$(word 1,$3)),$(call ~foldr,$1,$2,$(wordlist 2,99999999,$3)),,,,,,,,$1),$2)
~intersperse = $(subst $  , $(call ^d,$1) ,$2)
$(info core ok)

endef
 
define ///escape.min
# compiled from escape.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: protect-define|x\1 protect-rhs|x\1 protect-lhs|x\1 protect-expr|x\1 protect-arg|x\1 make-balanced#2 check-balance#1 check-balance-r#1 balance#1 balance-match#1 balance-match-r#3 balance2#1 protect-trim|x\1 protect-ltrim|x\1 replace-hash#1\str(435{436<subst@438<!M@442<$!N{447<str replace-nl#1\str(407{408<subst@410<!n@414<$!C{419<str quote-hash#1 protect-hash2#1 escape|x\1\str(243{244<subst@246<$@250<$!B{255<str intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
~escape = $(subst $`,$``,$1)
define ~protect-hash2
$(if $(findstring \.#,$1),$(call ~protect-hash2,$(subst \.#,.#\\,$1)),$(subst .#,,$1))
endef
define ~quote-hash
$(if $(findstring #,$1),$(call ~protect-hash2,$(subst #,.#\#,$1)),$1)
endef
define ~replace-nl
$(subst 
,$`',$1)
endef
define ~replace-hash
$(subst #,$`",$1)
endef
~protect-ltrim = $(if $(findstring $(word 1,0$10),0),$` )$1
define ~protect-trim
$(if $(and $(findstring $1,$(wordlist 1,99999999,$1)),$(filter-out 
%,$(word 1,$1)),$(filter-out %
,$(lastword $1))),$1,$(if $1,$`(if ,,$1)))
endef
~balance2 = $(call ~promote,$(if $(findstring !C,$1),$`(if ,,$(subst !C,,$1)),$1))
~balance-match-r = $(if $1,$(call ~balance-match-r,$(word 1,$2),$(wordlist 2,99999999,$2),$(if $(filter !L%,$1),$3 $1,$(if $(and $(filter !R,$1),$(word 2,$3)),$(filter-out %!,$3!)($(subst !L,,$(subst !C,,$(lastword $3)))),$3$1))),$3)
~balance-match = $(call ~balance-match-r,$(word 1,$1),$(wordlist 2,99999999,$1),!.)
~balance = $(call ~balance2,$(subst !L,$`[,$(subst !R,$`],$(subst $  ,,$(call ~balance-match,$(subst $[, !L,$(subst $], !R ,$(subst $(if ,,,),$(if ,,!C,),$(call ~demote,$1)))))))))
~check-balance-r = $(if $(word 2,$1),$(call ~check-balance-r,$(subst $  ,,$(filter-out !L%!R,$(subst !L, !L,$(word 1,$1))))$(wordlist 2,99999999,$1)),$1)
~check-balance = $(call ~check-balance-r,$(subst $],!R .,$(subst $[,!L,$(subst !,,$(subst $ 	,,$(subst $  ,,$1))))))
~make-balanced = $(if $(findstring !,$2),$(call ~balance,$1),$(if $(findstring $(if ,,,),$2),$`(if ,,$1),$1))
~protect-arg = $(if $(or $(findstring $[,$1),$(findstring $],$1),$(findstring $(if ,,,),$1)),$(call ~make-balanced,$1,$(call ~check-balance,$1)),$1)
define ~protect-expr
$(subst 
,$`',$1)
endef
define ~protect-lhs
$(subst #,$`",$(subst X,$(subst 
,$`',$(call ~protect-arg,$1)),$(if $(or $(findstring :,$1),$(findstring =,$1),$(if $(findstring $1,$(wordlist 1,99999999,$1)),,1),$(filter ifeq ifneq ifdef ifndef else endif define endef override include sinclude -include export unexport private undefine vpath,$1)),$`(if ,,X),X)))
endef
define ~protect-rhs
$(call ~quote-hash,$(call ~protect-ltrim,$(subst 
,$`',$1)))
endef
define ~protect-define
$(if $(or $(findstring define,$1),$(findstring endef,$1),$(findstring \,$1)),$(subst |1,|,$(subst |0, ,$(subst $  ,
,$(foreach w,$(call ~split,
,$1),$(subst $  ,|0,$(subst |,|1,$(if $(filter define endef,$(word 1,$(call ^u,$w))),$` )$(call ^u,$w)$(if $(filter %\,$w),$` ))))))),$1)
endef

endef
 
define ///gen.min
# compiled from gen.scm
# Requires: core io parse escape runtime
# Requires: scam-ct
# Exports: begin-block|x\1 resolve|x\2 base-env&0\~%\p builtin-names&0\~%\x builtins-3&0\~%\p builtins-2&0\~%\p builtins-1&0\~%\p env-rewind|x\2 env-rewind-x#2 use-module|x\1 require-module|x\2 mod-find#1 env-from-file#2 *dummy-env*&0\~%\p env-load&1\:\p\1\filename(3723{3724<define`>:P4<3726<>:P0<3727}3728]read-module-lines}3730]filename)3733}3734]if<[:P0]3736"3737[0filter][1:P1[03739[0///!p"3744[0filename<[:P0]3747"3748[0split][1:P1[03750[0!n][1:P0[03754[0[11:P2[103755[10value[0[11:P2[103757[10filename<[:P0]3761"3762[0read-lines"3764[0filename][1:P1[03766[01][1:P1[03768[04(3774{3775<env-parse)3777}3778]read-module-lines}3780]filename env-parse&1\:\p\1\lines(3666{3667<subst@3669<[n@3673<!n)3677}3678]env-expand<[:P0]3680"3681[0first][1:P0[03683[0[11:P2[103684[10filtersub[0[11:P0[103686[10[111:P2[1100[110vector[10[111:P1[1103687[110!M[1110Exports:[1110!p[0[11:P1[103696[10!p[0[11:P2[103700[10lines env-export|x\1 env-import#3 import-binding#3 env-expand#1 env-compress#1 detokenize-key#1 tokenize-key#1 env-exp#1 env-cmp#1 check-argc|x\3 err-expected|x\5`or`6`or`7 form-description#1 compile-warn|x\2`or`3`or`4`or`5 gen-error|x\2`or`more env-rewind-M#2 after#2 gensym|x\2 gensym-name|x\3 gen-global-name|x\2 il-promote|x\1 il-demote|x\1 il-concat|x\1 il-flatten#1 il-merge-strings#2 NoOp&2(1134{1135<IString@1137<>.\x *compile-mods*&0\~%\x *compile-outfile*&0\~%\x *compile-file*&0\~%\x *compile-subject*&0\~%\x MacroMarkerKey&2\':P1`804`:m\x LambdaMarkerKey&2\':P1`788`:\x NoGlobalName&2\':P1`548`:\x EDefn.is-public?&1\:\x\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.set-scope&1\:\p\2\defn`scope(486{487<append)489}490]wordlist<[:P1]492]1<[:P1]494]2}496]defn{499<scope)501}502]nth-rest<[:P1]504]4}506]defn EDefn.scope&1\:\x\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\x\':EDefn0 EFunc&4\S`W`S`L\x\':EDefn1 ESMacro&4\S`W\x\':EDefn2 EXMacro&4\S`W\x\':EDefn3 ERecord&4\S`W`S\x\':EDefn4 EBuiltin&4\S`W`S\x\':EDefn5 EIL&4\S\x\':EDefn6 EArg&4\W\x\':EDefn7 EMarker&4\W\x\':EDefn8 IString&4\S\x\':IL0 IVar&4\S\x\':IL1 IBuiltin&4\W`L\x\':IL2 ICall&4\S`L\x\':IL3 ILocal&4\W`W\x\':IL4 IFuncall&4\L\x\':IL5 IConcat&4\L\x\':IL6 IBlock&4\L\x\':IL7 ILambda&4\S\x\':IL8 IEnv&4\S`L\x\':IL9 protect-define|iescape\1 protect-rhs|iescape\1 protect-lhs|iescape\1 protect-expr|iescape\1 protect-arg|iescape\1 protect-trim|iescape\1 protect-ltrim|iescape\1 escape|i%\1\str(243{244<subst@246<$@250<$!B{255<str parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 file-exists?|iio\1 read-lines|iio\1`or`2`or`3 read-file|iio\1 write-file|iio\2 getline|iio\1 shell!1&1\~%1\iio\1 printn|iio\0`or`more echo-command|iio\1 quote-sh-arg|iio\1 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,escape)
$(if $(call ^add-tags,!1:IL0!=IString!0S !1:IL1!=IVar!0S !1:IL2!=IBuiltin!0W!0L !1:IL3!=ICall!0S!0L !1:IL4!=ILocal!0W!0W !1:IL5!=IFuncall!0L !1:IL6!=IConcat!0L !1:IL7!=IBlock!0L !1:IL8!=ILambda!0S !1:IL9!=IEnv!0S!0L),)
$(if $(call ^add-tags,!1:EDefn0!=EVar!0S!0W !1:EDefn1!=EFunc!0S!0W!0S!0L !1:EDefn2!=ESMacro!0S!0W !1:EDefn3!=EXMacro!0S!0W !1:EDefn4!=ERecord!0S!0W!0S !1:EDefn5!=EBuiltin!0S!0W!0S !1:EDefn6!=EIL!0S !1:EDefn7!=EArg!0W !1:EDefn8!=EMarker!0W),)
~il-merge-strings = $(if $(filter !:IL0,$(firstword $(call ^u,$(word 1,$1)))),$(call ~il-merge-strings,$(wordlist 2,99999999,$1),$2$(call ^n,2,$(call ^u,$(word 1,$1)))),$(call ~append,$(if $2,$(call ^d,!:IL0 $(call ^d,$2))),$(word 1,$1),$(if $(word 2,$1),$(call ~il-merge-strings,$(wordlist 2,99999999,$1),))))
~il-flatten = $(filter %,$(foreach node,$1,$(if $(filter !:IL6,$(firstword $(call ^u,$(node)))),$(call ~il-flatten,$(wordlist 2,99999999,$(call ^u,$(node)))),$(node))))
~il-concat = $(call ^Y,$(call ~il-merge-strings,$(call ~il-flatten,$1),),,,,,,,,,$`(if $`(word 2,$`1),!:IL6 $`1,$`(or $`(call ^u,$`(word 1,$`1)),!:IL0 !.)))
~il-demote = $(or $(if $(filter !:IL0,$(firstword $1)),!:IL0 $(call ^d,$(word 2,$1)),$(if $(filter !:IL3,$(firstword $1)),$(if $(call ~eq?,$(call ^n,2,$1),^u),$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))))),!:IL3 ^d $(call ^d,$1))
~il-promote = !:IL3 ^u $(call ^d,$1)
~gen-global-name = $(if $(filter %&global,$2),$1,$(SCAM_NS)$1)
~gensym-name = $(if $(filter $1&$3!=%,$2),$(call ~gensym-name,$1,$2 .,$(words $2)),$1&$3)
~gensym = !:P2 0 $(call ^d,$(call ~gensym-name,$(call ~symbol-name,$1),$2,))
~after = $(filter %,$(subst !S, ,$(wordlist 2,99999999,$(subst !S$1!S,!S$1!S ,!S$(subst $  ,!S,$2)!S))))
~env-rewind-M = $(call ~append,$(call ~hash-find,:,$1),$(call ~after,$(call ~hash-find,$2,$1),$1))
~gen-error = !:P7 $(call ~form-index,$1) $(call ^d,$(call ~vsprintf,$2,$(foreach N,3,$(^v))))
~compile-warn = $(info $(call ~describe-error,$(call ~gen-error,$1,$2,$3,$4,$5),$(call ~pdec,$(~*compile-subject*)),$(~*compile-file*)))
~form-description = $(if $(call ~eq?,$1,%),form,$(if $(call ~eq?,$1,L),list,$(if $(call ~eq?,$1,S),symbol,$(if $(call ~eq?,$1,Q),literal string,$(call ~form-typename,$1)))))
~err-expected = $(call ~gen-error,$(or $2,$3),$(if $2,invalid,missing) $4 in $5$(if $1,; expected a $(subst |1,|,$(subst |0, ,$(subst $  , or ,$(foreach ty,$1,$(subst $  ,|0,$(subst |,|1,$(call ~form-description,$(call ^u,$(ty)))))))))),$6,$7)
~check-argc = $(if $(if $(or $(filter $1,$(words $2)),$(and $(filter more,$1),$(or $(call ~eq?,0,$(word 1,$1)),$(word $(word 1,$1),$2)))),,1),$(call ~gen-error,$3,$(subst %S,$(if $(call ~eq?,$1,1),,s),$(if ,,%q accepts %s argument%S, not %s)),$(call ~symbol-name,$3),$1,$(words $2)))
define ~env-cmp
$(subst special-,+,$(subst `>:P0<,$],$(subst \':P0`,$[,$(subst ][1:P2[0,",$(subst |p\,#,$(subst <[:P2],},$(subst `>:P2<,{,$(subst `>:P1<,@,$(subst &1\~%\,|,$(subst !=!1:EDefn,&,$(subst >0,],$(subst >1,[,$(subst '1,>,$(subst '0,<,$(subst !11,',$(subst !10,`,$(subst !0,\,$(subst +,!Q,$(subst $],!P,$(subst $[,!O,$(subst ",!N,$(subst #,!M,$(subst },!L,$(subst {,!K,$(subst @,!J,$(subst |,!I,$(subst &,!H,$(subst ],!G,$(subst [,!F,$(subst >,!E,$(subst <,!D,$(subst ',!C,$(subst `,!B,$(subst \,!A,$1))))))))))))))))))))))))))))))))))
endef
define ~env-exp
$(subst !A,\,$(subst !B,`,$(subst !C,',$(subst !D,<,$(subst !E,>,$(subst !F,[,$(subst !G,],$(subst !H,&,$(subst !I,|,$(subst !J,@,$(subst !K,{,$(subst !L,},$(subst !M,#,$(subst !N,",$(subst !O,$[,$(subst !P,$],$(subst !Q,+,$(subst \,!0,$(subst `,!10,$(subst ',!11,$(subst <,'0,$(subst >,'1,$(subst [,>1,$(subst ],>0,$(subst &,!=!1:EDefn,$(subst |,&1\~%\,$(subst @,`>:P1<,$(subst {,`>:P2<,$(subst },<[:P2],$(subst #,|p\,$(subst ",][1:P2[0,$(subst $[,\':P0`,$(subst $],`>:P0<,$(subst +,special-,$1))))))))))))))))))))))))))))))))))
endef
~tokenize-key = $(foreach w,$1,$(word 1,$(subst !=,!= ,$w))$(subst $(word 1,$(subst !=, ,$w)),%,$(subst %,!p,$(word 2,$(subst !=,!= ,$w)))))
~detokenize-key = $(foreach w,$1,$(word 1,$(subst !=,!= ,$w))$(subst !p,%,$(subst %,$(word 1,$(subst !=, ,$w)),$(word 2,$(subst !=,!= ,$w)))))
define ~env-compress
$(call ~env-cmp,$(call ~tokenize-key,$(patsubst %!0,%,$(subst 
,!n,$1))))
endef
define ~env-expand
$(subst !n,
,$(call ~detokenize-key,$(call ~env-exp,$1)))
endef
~import-binding = $(if $(filter x,$(word 3,$2)),$(call ~hash-bind,$1,$(call ~append,$(wordlist 1,2,$2),i$(if $(if $(filter !:EDefn1,$(firstword $2)),1,$(if $(filter !:EDefn2,$(firstword $2)),1)),$3),$(wordlist 4,99999999,$2))))
~env-import = $(if $2,$1,$(filter %,$(foreach b,$1,$(call ~import-binding,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$b)))),$(call ~nth,2,$(subst !=, ,$b)),$3))))
define ~env-export
# Exports: $(call ~env-compress,$1)

endef
~*dummy-env* := $(call ~hash-bind,,!:EDefn6 $(call ^d,!:IL0 !.))
define ~env-from-file
$(if $1,$(or $(call ~env-import,$(subst !n,
,$(call ~env-expand,$(call ^u,$(word 1,$(patsubst #!0Exports:!0%,%,$(filter #!0Exports:!0%,$(if $(filter ///%,$1),$(call ~split,
,$(value $1)),$(call ~read-lines,$1,1,4)))))))),$2,$(call ^d,$(notdir $(basename $1)))),$(~*dummy-env*)))
endef
$(if $(call ~memoize,~env-from-file),)
~mod-find = $(or $(firstword $(filter %$(notdir $1).min,$(~*compile-mods*))),$(if $(and $(if $(filter %/runtime.min,$(~*compile-mods*)),,1),$(if $(filter-out u%,$(flavor ///$(notdir $1).min)),1)),///$(notdir $1).min,$(info warning: cannot find module $1)))
~require-module = $(call ~env-from-file,$(call ~mod-find,$1),$2)
~use-module = $(call ^Y,$(call ~require-module,$1,),,,,,,,,,$`(if $`1,$`(call ^set,SCAM_MODS,$`(call ^set,SCAM_MODS,$`(~*compile-mods*),$`(SCAM_MODS)),$`(and $`(call ^require,$(call ^E,$1))1,$`(or $`(filter %,$`(foreach e,$`1,$`(if $`(filter !:EDefn3,$`(firstword $`(call ~nth,2,$`(subst !=, ,$`e)))),$`e))),$`(~*dummy-env*))))))
~env-rewind-x = $(call ^Y,$(call ~hash-find,$2,$1),$1,$2,,,,,,,$`(if $`(patsubst i%,%,$`(filter i%,$`(word 3,$`(call ~nth,2,$`(subst !=, ,$`1))))),$`(call ~env-rewind-x,$`(call ~require-module,$`(call ~promote,$`(patsubst i%,%,$`(filter i%,$`(word 3,$`(call ~nth,2,$`(subst !=, ,$`1)))))),1),$`3),$`(call ~after,$`1,$`2)))
~env-rewind = $(call ~append,$(call ~hash-find,:,$1),$(call ~env-rewind-x,$1,$2))
~builtins-1 := abspath basename dir error eval firstword flavor info lastword notdir origin realpath shell sort strip suffix value warning wildcard words
~builtins-2 := addprefix addsuffix filter filter-out findstring join word
~builtins-3 := .foreach patsubst .subst wordlist
~builtin-names := $(patsubst .%,%,$(~builtins-1) $(~builtins-2) $(~builtins-3))
~base-env := $(call ~append,$(foreach b,$(~builtins-1),$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$b) i 1)),$(foreach b,$(~builtins-2),$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$b) i 2)),$(foreach b,$(~builtins-3),$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$(patsubst .%,%,$b)) i 3)),$(foreach b,and or call,$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$b) i %)),$(call ~hash-bind,if,!:EDefn5 if i 2!0or!03),$(foreach v,MAKEFILE_LIST .DEFAULT_GOAL,$(call ~hash-bind,$v,!:EDefn0 $(call ^d,$v) i)))
~resolve = $(if $(filter !:P2,$(firstword $1)),$(call ~nth,2,$(subst !=, ,$(or $(filter $(subst !,!1,$(call ^n,3,$1))!=%,$2),$(filter $(subst !,!1,$(call ^n,3,$1))!=%,$(~base-env))))),-)
~begin-block = $(if $(and $1,$(if $(word 2,$1),,1)),$(call ^u,$(word 1,$1)),!:P0 0 $(call ~cons,!:P2 0 begin,$1))

endef
 
define ///gen0.min
# compiled from gen0.scm
# Requires: core parse escape gen runtime
# Requires: scam-ct
# Exports: c0|x\2`or`3 c0-error#1 c0-qq#2`or`3 c0-qq-form#2 QQS&2\':P1`4959`*>*\p c0-qq#0 ml.+begin#4 c0-block|x\2 c0-block-cc|x\3`or`4`or`5 ml.+require#4 ml.+declare#4 ml.+define#4 c0-def&1\:\p\5\env`sym`args`inblock`is-define(4274{4275<env-strip{4277<inblock)4279}4280]%2}4282]env<[:P0]4284"4285[0form-index"4287[0sym<[:P0]4290"4291[0first"4293[0args<[:P0]4296"4297[0get-flags"4299[0args][1:P1[04301[01<[:P0]4304"4305[0skip-flags"4307[0args][1:P1[04309[01}4312]is-define}4314]nil c0-def2#7 c0-def-compound#8 get-argc#1 check-optional-args#1`or`2 c0-def-symbol#7 c0-check-body#3 ml.+lambda#4 lambda-error#4 c0-lambda#3 lambda-env&1\:\p\2\args`env(2594{2595<append)2597}2598]%-args}2600]args<[:P0]2602"2603[0concat][1:P1[02605[0.][1:P0[02609[0[11:P2[102610[10emarker-level[0[11:P0[102612[10[111:P2[1102613[110hash-get[10[111:P2[1102615[110LambdaMarkerKey[10[111:P2[1102617[110env{2623<env emarker-level#1 lambda-env-args#2 lambda-env-arg9#2 lambda-arg&1\:\p\3\sym`single-value`rest-value(2094{2095<foreach{2097<name)2099}2100]symbol-name}2102]sym)2105}2106]if<[:P0]2108"2109[0filter][1:P1[02111[0...!p"2116[0name<[:P0]2144"2145[0hash-bind][1:P0[02147[0[11:P2[102148[10or[0[11:P0[102150[10[111:P2[1102151[110patsubst[10[111:P1[1102153[110...!p[10[111:P1[1102158[110!p[10[111:P2[1102162[110name[0[11:P2[102165[10name"2168[0rest-value<[:P0]2171"2172[0hash-bind][1:P0[02174[0[11:P2[102175[10patsubst[0[11:P1[102177[10?!p[0[11:P1[102182[10!p[0[11:P2[102186[10name"2189[0single-value c0-L#6 c0-record#5 +form-func&1\:\p\1\name(1504{1505<declare)1507}1508]ml.+(1512{1513<concat)1515}1516]global-name}1518]ml.+{1521<name c0-call#6 c0-vec|x\2 c0-S#4 c0-S-error#2 c0-builtin#3 c0-macro#3 c0-ctor#3 c0-local#3 c0-lambda#3 c0-block#2 c0#2`or`3 skip-flags|x\2 get-flags|x\2 scan-flags-x#3 scan-flags&1\:\p\2\args`skip(172{173<%-x{175<args)177}178]1!Q}180]skip{183<skip scan-flags-x#3 env-strip|x\2 block-result|x\3 begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 protect-define|iescape\1 protect-rhs|iescape\1 protect-lhs|iescape\1 protect-expr|iescape\1 protect-arg|iescape\1 protect-trim|iescape\1 protect-ltrim|iescape\1 escape|i%\1\str(243{244<subst@246<$@250<$!B{255<str parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,escape)
$(call ^require,gen)
~block-result = $(if $1,!:IL9 $(call ^d,$2) $3,$(or $3,!:IL0 !.))
~env-strip = $(if $1,$2,$(if $(filter !:IL9,$(firstword $2)),$(wordlist 3,99999999,$2),$2))
~scan-flags-x = $(or $(if $(filter !:P2,$(firstword $(call ~nth,$2,$1))),$(if $(filter &private &public &inline &global,$(call ^n,3,$(call ~nth,$2,$1))),$(call ~scan-flags-x,$1,$(call ~1+,$2),$2))),$3)
~get-flags = $(filter %,$(foreach form,$(wordlist $(call ~1+,$2),$(call ~scan-flags-x,$1,$(call ~1+,$2),$2),$1),$(if $(filter !:P2,$(firstword $(call ^u,$(form)))),$(call ^n,3,$(call ^u,$(form))))))
~skip-flags = $(wordlist $(call ~1+,$(call ~scan-flags-x,$1,$(call ~1+,$2),$2)),99999999,$1)
~c0-local = $(and $(if $(and $(findstring U,$(SCAM_DEBUG)),$(if $(findstring $(if $(filter !:EDefn8,$(firstword $2)),$(word 2,$2)),$1),,1)),$(call ~compile-warn,$3,reference to upvalue %q,$(call ~symbol-name,$3)))1,!:IL4 $(subst .,,$1) $(words $(subst .,. ,$(subst $1,,$(if $(filter !:EDefn8,$(firstword $2)),$(word 2,$2))$(subst .,,$1)))))
~c0-ctor = $(call ~c0-lambda,$1,$(foreach i,$(call ~indices-x,$3,1),$(call ^d,!:P2 0 $(call ^d,a$(call ^u,$i)))),$(call ^d,!:P0 0 $(call ~cons,$2,$(foreach i,$(call ~indices-x,$3,1),$(call ^d,!:P2 0 $(call ^d,a$(call ^u,$i)))))))
~c0-macro = $(call ~c0-lambda,$1,$(foreach a,$(call ^u,$(word 1,$3)),$(call ^d,!:P2 0 $a)),$(call ^d,!:P0 0 $(call ~cons,$2,$(foreach a,$(call ^u,$(word 1,$3)),$(call ^d,!:P2 0 $a)))))
~c0-builtin = !:IL8 $(call ^d,$(if $(firstword $(filter 3 2 1,$3)),!:IL2 $2 $(foreach n,$(wordlist 1,$(firstword $(filter 3 2 1,$3)),1 2 3),$(call ^d,!:IL4 $(call ^u,$n) 0)),!:IL3 ^apply $(call ^d,!:IL0 $(call ^d,$2)) $(call ^d,!:IL1 ^av)))
~c0-S-error = $(if $2,$(call ~gen-error,$1,internal: %q binds to %q,$1,$2),$(call ~gen-error,$1,undefined variable %q,$(call ~symbol-name,$1)))
~c0-S = $(if $(filter !:EDefn7,$(firstword $4)),$(call ~c0-local,$(word 2,$4),$(call ~hash-get,:,$1),$2),$(if $(filter !:EDefn0,$(firstword $4)),!:IL1 $(call ^d,$(call ^n,2,$4)),$(if $(filter !:EDefn1,$(firstword $4)),$(if $(filter :,$(call ^n,2,$4)),$(call ~c0-macro,$1,$2,$(wordlist 5,99999999,$4)),!:IL2 value $(call ^d,!:IL0 $(call ^d,$(call ^n,2,$4)))),$(if $(filter !:EDefn2,$(firstword $4)),$(call ~c0,$(call ^n,2,$4),$(call ~env-rewind,$1,$3)),$(if $(filter !:EDefn6,$(firstword $4)),$(call ^n,2,$4),$(if $(filter !:EDefn4,$(firstword $4)),$(call ~c0-ctor,$1,$2,$(call ^n,2,$4)),$(if $(filter !:EDefn5,$(firstword $4)),$(call ~c0-builtin,$1,$(call ^n,2,$4),$(call ^n,4,$4)),$(call ~c0-S-error,$2,$4))))))))
~c0-vec = $(foreach f,$1,$(call ^d,$(call ~c0,$(call ^u,$f),$2)))
~c0-call = $(or $(call ~check-argc,$5,$3,$2),$(if $(wordlist 2,99999999,$6),$(call ~c0-block,$(wordlist 2,99999999,$6),$(call ~append,$(join $(addsuffix !=,$(call ^u,$(word 1,$6))),$(foreach a,$3,$(call ^d,!:EDefn6 $(call ^d,$(call ~c0,$(call ^u,$a),$1,))))),$(call ~hash-bind,:m,!:EDefn8 $(call ~form-index,$2)),$(if $(if $(filter :,$4),,1),$(call ~hash-bind,$(call ~symbol-name,$2),!:EDefn1 $(call ^d,$4) . $(call ^d,$5) )),$(call ~env-rewind,$1,$(call ~symbol-name,$2)))),!:IL3 $(call ^d,$4) $(call ~c0-vec,$3,$1)))
~c0-record = $(or $(call ~check-argc,$(words $4),$3,$2),!:IL6 $(call ~cons,!:IL0 $(call ^d,$5),$(foreach n,$(call ~indices-x,$4,1),$(call ~append,$(call ^d,!:IL0 !0),$(call ^d,$(if $(filter S,$(word $n,$4)),$(call ~il-demote,$(call ~c0,$(call ~nth,$n,$3),$1)),$(call ~c0,$(call ~nth,$n,$3),$1)))))))
~c0-L = $(if $(filter !:EDefn1,$(firstword $5)),$(call ~c0-call,$1,$3,$4,$(call ^n,2,$5),$(call ^n,4,$5),$(wordlist 5,99999999,$5)),$(if $(filter !:EDefn5,$(firstword $5)),$(or $(call ~check-argc,$(call ^n,4,$5),$4,$3),!:IL2 $(call ^n,2,$5) $(call ~c0-vec,$4,$1)),$(if $(filter !:EDefn3,$(firstword $5)),$(if $(call ~eq?,$(word 3,$5),x),$(call ~gen-error,$3,cannot use xmacro in its own file),$(call ~c0,$(call $(call ^n,2,$5),$4),$1,$6)),$(if $(filter !:EDefn4,$(firstword $5)),$(call ~c0-record,$1,$3,$4,$(call ^n,2,$5),$(call ^n,4,$5)),$(if $(if $3,,1),$(call ~gen-error,$2,missing function/macro name),$(if $5,!:IL5 $(call ~c0-vec,$(call ~cons,$3,$4),$1),$(if $(if $(filter-out u%,$(flavor ~ml.special-$(call ~symbol-name,$3))),1),$(call ~ml.special-$(call ~symbol-name,$3),$1,$3,$4,$6),$(and $(if $(findstring Cu,$(SCAM_DEBUG)),$(call ~printf,env: %q,$1))1,$(call ~gen-error,$3,undefined symbol: %q,$(call ~symbol-name,$3))))))))))
~lambda-env-arg9 = $(foreach n,$(call ~indices-x,$1,1),$(foreach name,$(call ~symbol-name,$(call ~nth,$n,$1)),$(if $(filter ...%,$(name)),$(call ~hash-bind,$(or $(patsubst ...%,%,$(name)),$(name)),$(if $(call ~eq?,$n,1),!:EDefn6 $(call ^d,!:IL1 9),!:EDefn6 $(call ^d,!:IL2 wordlist $(call ^d,!:IL0 $(call ^d,$n)) $(call ^d,!:IL0 999999) $(call ^d,!:IL1 9)))),$(call ~hash-bind,$(patsubst ?%,%,$(name)),!:EDefn6 $(call ^d,!:IL2 call $(call ^d,!:IL0 ^n) $(call ^d,!:IL0 $(call ^d,$n)) $(call ^d,!:IL1 9))))))
~lambda-env-args = $(call ~append,$(call ~hash-bind,:,!:EDefn8 $2),$(foreach n,$(call ~indices-x,$(wordlist 1,8,$1),1),$(foreach name,$(call ~symbol-name,$(call ~nth,$n,$1)),$(if $(filter ...%,$(name)),$(call ~hash-bind,$(or $(patsubst ...%,%,$(name)),$(name)),!:EDefn6 $(call ^d,!:IL2 foreach $(call ^d,!:IL0 N) $(call ^d,!:IL0 $(call ^d,$n)) $(call ^d,!:IL1 ^v))),$(call ~hash-bind,$(patsubst ?%,%,$(name)),!:EDefn7 $2$n)))),$(if $(word 9,$1),$(call ~lambda-env-arg9,$(wordlist 9,99999999,$1),$2)))
~emarker-level = $(if $(filter !:EDefn8,$(firstword $1)),$(word 2,$1))
~c0-lambda = !:IL8 $(call ^d,$(call ~c0-block,$3,$(call ~append,$(call ~lambda-env-args,$2,.$(call ~emarker-level,$(call ~hash-get,:,$1))),$1)))
~lambda-error = $(call ~err-expected,$1,$2,$3,$4,(lambda (ARGNAME...) BODY))
~ml.special-lambda = $(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$3)))),$(or $(call ^u,$(word 1,$(filter-out !.,$(foreach a,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))),$(call ^d,$(if $(filter !:P2,$(firstword $(call ^u,$a))),,$(call ~lambda-error,S,$(call ^u,$a),$2,ARGNAME))))))),$(call ~c0-lambda,$1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))),$(wordlist 2,99999999,$3))),$(call ~lambda-error,L,$(call ^u,$(word 1,$3)),$2,(ARGNAME...)))
~c0-check-body = $(if $3,$(if $(if $2,,1),$(call ~gen-error,$1,no BODY supplied to (define FORM BODY))),$(if $2,$(call ~gen-error,$2,too many arguments to (declare ...))))
~c0-def-symbol = $(or $(if $(filter &inline,$4),$(call ~gen-error,$2,'&inline' does not apply to symbol definitions)),$(call ~c0-check-body,$2,$(call ^u,$(word 1,$5)),$6),!:IL9 $(call ^d,$(call ~hash-bind,$3,$(if $7,!:EDefn2 $(call ^d,$(call ~begin-block,$5)) $(if $(filter &public,$4),x,p),!:EDefn0 $(call ^d,$(call ~gen-global-name,$3,$4)) $(if $(filter &public,$4),x,p)),$1)) $(if $(and $6,$(if $7,,1)),!:IL3 ^set $(call ^d,!:IL0 $(call ^d,$(call ~gen-global-name,$3,$4))) $(call ^d,$(call ~c0-block,$5,$1))))
~check-optional-args = $(if $1,$(if $(filter ...% ?%,$(call ~symbol-name,$(call ^u,$(word 1,$1)))),$(call ~check-optional-args,$(wordlist 2,99999999,$1),1),$(if $2,$(call ~gen-error,$(call ^u,$(word 1,$1)),non-optional parameter after optional one),$(call ~check-optional-args,$(wordlist 2,99999999,$1),))))
~get-argc = $(if $(filter ...% ?%,$(lastword $1)),$(if $(filter ...%,$(lastword $1)),$(words $(filter-out ...% ?%,$1)) or more,$(call ~get-argc,$(call ~butlast,$1)) or $(words $1)),$(words $1))
~c0-def-compound = $(or $(call ~c0-check-body,$2,$(call ^u,$(word 1,$6)),$7),$(if $(or $8,$(and $(if $8,,1),$(filter &inline,$5))),$(call ^u,$(word 1,$(filter-out !.,$(foreach a,$4,$(call ^d,$(if $(filter ...% ?%,$(call ~symbol-name,$(call ^u,$a))),$(call ~gen-error,$(call ^u,$a),%s cannot have optional parameters,$(if $8,macros,inline functions)))))))),$(call ~check-optional-args,$4)),$(if $(and $(if $8,,1),$(filter $3,$(~builtin-names))),$(call ~gen-error,$2,cannot redefine built-in function %q,$3)),!:IL9 $(call ^d,$(call ~hash-bind,$3,!:EDefn1 $(call ^d,$(if $8,:,$(call ~gen-global-name,$3,$5))) $(if $(filter &public,$5),x,p) $(call ^d,$(call ~get-argc,$(foreach a,$4,$(call ^d,$(call ~symbol-name,$(call ^u,$a)))))) $(if $(or $(and $(if $8,,1),$(filter &inline,$5)),$8),$(call ~cons,$(foreach a,$4,$(call ^d,$(call ~symbol-name,$(call ^u,$a)))),$6)),$1)) $(if $(and $7,$(if $8,,1)),!:IL3 ^fset $(call ^d,!:IL0 $(call ^d,$(call ~gen-global-name,$3,$5))) $(call ^d,$(call ~c0-lambda,$(if $8,$1,$(call ~hash-bind,$3,!:EDefn1 $(call ^d,$(call ~gen-global-name,$3,$5)) $(if $(filter &public,$5),x,p) $(call ^d,$(call ~get-argc,$(foreach a,$4,$(call ^d,$(call ~symbol-name,$(call ^u,$a)))))) ,$1)),$4,$6))))
~c0-def2 = $(or $(if $(if $7,,1),$(if $(filter !:P4,$(firstword $3)),$(call ~c0-def2,$1,$(word 2,$3),$(wordlist 3,99999999,$3),$4,$5,$6,1))),$(if $(filter !:P2,$(firstword $3)),$(call ~c0-def-symbol,$1,$(word 2,$3),$(call ^n,3,$3),$4,$5,$6,$7),$(if $(filter !:P0,$(firstword $3)),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$3))))),$(call ~c0-def-compound,$1,$(word 2,$3),$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$3)))),$(wordlist 2,99999999,$(wordlist 3,99999999,$3)),$4,$5,$6,$7),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$3))),$3,NAME,(%s %s(NAME...)),$(if $6,define,declare),$(if $7,`))),$(call ~err-expected,L S,$3,$2,FORM,(%s %sFORM ...),$(if $6,define,declare),$(if $7,`)))))
~ml.special-define = $(call ~env-strip,$4,$(call ~c0-def2,$1,$(call ~form-index,$2),$(call ^u,$(word 1,$3)),$(call ~get-flags,$3,1),$(call ~skip-flags,$3,1),1,))
~ml.special-declare = $(call ~env-strip,$4,$(call ~c0-def2,$1,$(call ~form-index,$2),$(call ^u,$(word 1,$3)),$(call ~get-flags,$3,1),$(call ~skip-flags,$3,1),,))
~ml.special-require = $(or $(if $(call ~skip-flags,$3,1),$(call ~gen-error,$(call ~skip-flags,$3,1),too many arguments to require)),$(if $(filter !:P1,$(firstword $(call ^u,$(word 1,$3)))),$(call ^Y,$(call ~require-module,$(call ^n,3,$(call ^u,$(word 1,$3))),$(filter &private,$(call ~get-flags,$3,1))),$(call ^u,$(word 1,$3)),$1,$(call ^n,3,$(call ^u,$(word 1,$3))),$4,,,,,$`(if $`1,$`(call ~block-result,$`5,$`(call ~append,$`1,$`3),!:IL3 ^require $`(call ^d,!:IL0 $`(call ^d,$`(notdir $`4)))),$`(call ~gen-error,$`2,require: Cannot find module %q,$`4))),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,STRING,(require STRING))))
~c0-block-cc = $(if $(filter !:IL9,$(firstword $5)),$(call ~c0-block-cc,$(call ^n,2,$5),$2,$3,$4,$(wordlist 3,99999999,$5)),$(if $(if $2,,1),$(call ^Y,$1,$(filter-out !:IL0 !.,$(call ~append,$4,$(if $5,$(call ^d,$5)))),,,,,,,,$3),$(call ~c0-block-cc,$1,$(wordlist 2,99999999,$2),$3,$(call ~append,$4,$(if $5,$(call ^d,$5))),$(call ~c0,$(call ^u,$(word 1,$2)),$1,1))))
~c0-block = $(call ~c0-block-cc,$2,$1,$`(if $`(word 2,$`2),!:IL7 $`2,$`(or $`(call ^u,$`(word 1,$`2)),!:IL0 !.)))
~ml.special-begin = $(call ~c0-block,$3,$1)
~c0-qq-form = $(if $(findstring *!*,$1),$(call ~il-concat,$(call ~intersperse,$2,$(foreach a,$(call ~split,*!*,$1),$(call ^d,!:IL0 $a)))),$(if $(findstring *!1*,$1),$(call ~il-concat,$(call ~intersperse,$(call ~il-demote,$2),$(foreach a,$(call ~split,*!1*,$1),$(call ^d,!:IL0 $a)))),!:P7 0 $(call ^d,c0-qq-form: template='$1')))
~c0-qq = $(if $(filter !:P5,$(firstword $2)),$(if $3,$(call ~c0-qq-form,!:P5 $(word 2,$2) *!*,$(call ~c0-qq,$1,$(wordlist 3,99999999,$2),$(wordlist 2,99999999,$3))),$(call ~c0,$(wordlist 3,99999999,$2),$1)),$(if $(filter !:P4,$(firstword $2)),$(call ~c0-qq-form,!:P4 $(word 2,$2) *!*,$(call ~c0-qq,$1,$(wordlist 3,99999999,$2),$(call ~cons,1,$3))),$(if $(filter !:P0,$(firstword $2)),$(call ~c0-qq-form,!:P0 $(word 2,$2) *!*,$(call ~il-concat,$(call ~intersperse,!:IL0 !0,$(foreach c,$(wordlist 3,99999999,$2),$(call ^d,$(if $(filter !:P6,$(firstword $(call ^u,$c))),$(call ~c0,$(wordlist 3,99999999,$(call ^u,$c)),$1),$(call ~il-demote,$(call ~c0-qq,$1,$(call ^u,$c),$3)))))))),$(if $(filter !:P7,$(firstword $2)),$2,!:IL0 $(call ^d,$2)))))
~c0-error = $(call ~gen-error,$1,$(if $(filter !:P5,$(firstword $1)),unquote (,) outside of a quasiquoted (`) form,$(if $(filter !:P6,$(firstword $1)),splice (,@) outside of a quasiquoted (`) form,bad AST node: %q)),$1)
~c0 = $(and $(if $(findstring c0,$(SCAM_DEBUG)),$(and $(call ~printf,form: %q,$1)1,$(if $(findstring c0e,$(SCAM_DEBUG)),$(call ~printf,env: %q,$2))))1,$(if $(filter !:P2,$(firstword $1)),$(call ~c0-S,$2,$1,$(call ^n,3,$1),$(call ~resolve,$1,$2)),$(if $(filter !:P1,$(firstword $1)),!:IL0 $(call ^d,$(call ^n,3,$1)),$(if $(filter !:P0,$(firstword $1)),$(call ~c0-L,$2,$(word 2,$1),$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(call ~resolve,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$2),$3),$(if $(filter !:P3,$(firstword $1)),!:IL0 $(call ^d,$(wordlist 3,99999999,$1)),$(if $(filter !:P4,$(firstword $1)),$(call ~c0-qq,$2,$(wordlist 3,99999999,$1)),$(if $(filter !:P7,$(firstword $1)),$1,$(call ~c0-error,$1))))))))

endef
 
define ///gen1.min
# compiled from gen1.scm
# Requires: core escape parse gen runtime
# Requires: scam-ct
# Exports: gen1|x\2 c1-file#1 c1-file*#1 c1-file-fset#2 c1-file-set#2 c1-file#1 c1#1 c1-Var#1 c1-Block#1 c1-Funcall#1 c1-Local#2 make-list#3 c1-Call#2 c1-args9#1 c1-Builtin#2 il-vector#1 c1-Error#1 c1-vec#3 c1-arg-trim#1 c1-arg#1 is-balanced?&1\:\p\1\node(1505{1506<case{1508<node)1510<[:P0]1511"1512[0ICall"1514[0_"1516[0_<[:P1]1519]1)1522<[:P0]1523"1524[0IVar"1526[0_<[:P1]1529]1)1532<[:P0]1533"1534[0IBuiltin"1536[0_"1538[0_<[:P1]1541]1)1544<[:P0]1545"1546[0IFuncall"1548[0_<[:P1]1551]1 c1#1 one-char-names&2(1359{1360<concat@1362<a]b]c]d]e]f]g]h]i]j]k]l]m]n]o]p]q]r]s]t]u]v]w]x]y]z]@1417<A]B]C]D]E]F]G]H]I]J]K]L]M]N]O]P]Q]R]S]T]U]V]W]X]Y]Z]_\p voidify&1\:\p\1\node(1275{1276<if)1278}1279]case}1281]node<[:P0]1283][1:P0[01284[0[11:P2[101285[10IBuiltin[0[11:P2[101287[10name[0[11:P2[101289[10args][1:P0[01292[0[11:P2[101293[10filter[0[11:P1[101295[10error[110eval[110info[0[11:P2[101303[10name<[:P0]1307][1:P0[01308[0[11:P2[101309[10ICall[0[11:P2[101311[10name[0[11:P2[101313[10args][1:P0[01316[0[11:P2[101317[10filter[0[11:P1[101319[10^require[0[11:P2[101323[10name{1328<node)1330}1331]IBuiltin<[:P1]1333]if<[:P0]1337"0[0vector"1338[0node][1:P0[01340[0[11:P2[101341[10IString[0[11:P1[101343[10[11. gen-extract#1 gen-embed#1 gen-decode&1\:\p\1\str(1093{1094<subst@1096<~N@1100<!n@1104<~S@1108<$@1112<~R@1116<!P@1120<~C@1124<,@1128<~L@1132<!O@1136<~1@1140<~{1144<str gen-encode&1\:\p\1\str(1026{1027<subst@1029<~@1033<~1@1037<!O@1041<~L@1045<,@1049<~C@1053<!P@1057<~R@1061<$@1065<~S@1069<!n@1073<~N{1077<str c1-Lambda#1 begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 protect-define|iescape\1 protect-rhs|iescape\1 protect-lhs|iescape\1 protect-expr|iescape\1 protect-arg|iescape\1 protect-trim|iescape\1 protect-ltrim|iescape\1 escape|i%\1\str(243{244<subst@246<$@250<$!B{255<str intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,escape)
$(call ^require,parse)
$(call ^require,gen)
~c1-Lambda = $(subst $``.,$`.,$(subst $``-,$`,$(subst $`,$``,$1)))
define ~gen-embed
$`.{$(subst 
,~N,$(subst $`,~S,$(subst $],~R,$(subst $(if ,,,),~C,$(subst $[,~L,$(subst ~,~1,$1))))))$`.}
endef
define ~gen-extract
$(if $(findstring $`.{,$1),$(foreach e,$(wordlist 2,99999999,$(call ~split,$`.{,$1)),$(call ^d,$(subst ~1,~,$(subst ~L,$[,$(subst ~C,$(if ,,,),$(subst ~R,$],$(subst ~S,$`,$(subst ~N,
,$(call ^u,$(word 1,$(call ~split,$`.},$(call ^u,$e)))))))))))))
endef
~c1-arg = $(if $(if $(filter !:IL3,$(firstword $1)),1,$(if $(filter !:IL1,$(firstword $1)),1,$(if $(filter !:IL2,$(firstword $1)),1,$(if $(filter !:IL5,$(firstword $1)),1)))),$(call ~c1,$1),$(call ~protect-arg,$(call ~c1,$1)))
~c1-arg-trim = $(if $(if $(filter !:IL3,$(firstword $1)),1,$(if $(filter !:IL1,$(firstword $1)),1,$(if $(filter !:IL2,$(firstword $1)),1,$(if $(filter !:IL5,$(firstword $1)),1)))),$(call ~c1,$1),$(call ~protect-trim,$(call ~protect-arg,$(call ~c1,$1))))
~c1-vec = $(subst |1,|,$(subst |0, ,$(subst $  ,$(subst |,|1,$2),$(foreach a,$1,$(subst $  ,|0,$(subst |,|1,$(call $3,$(call ^u,$a))))))))
~c1-Error = $(call ~gen-embed,$(if $(filter !:P7,$(firstword $1)),$1,!:P7 0 $(call ^d,internal:bad IL: $1)))
~il-vector = $(call ~il-concat,$(subst $  , $(call ^d,!:IL0 !0) ,$(foreach n,$1,$(call ^d,$(call ~il-demote,$(call ^u,$n))))))
~c1-Builtin = $`($1 $(call ~protect-ltrim,$(call ~c1-vec,$2,$(if ,,,),$(if $(filter and or,$1),~c1-arg-trim,~c1-arg))))
~c1-args9 = $(if $(word 9,$1),$(if ,,$(call ~c1-vec,$(wordlist 1,8,$1),$(if ,,,),~c1-arg),$(call ~protect-arg,$(call ~c1,$(call ~il-vector,$(wordlist 9,99999999,$1))))),$(call ~c1-vec,$1,$(if ,,,),~c1-arg))
~c1-Call = $`(call $(call ~protect-ltrim,$(subst $`,$``,$1))$(if $2,$(if ,,,))$(call ~c1-args9,$2))
~make-list = $(if $(word $2,$3),$(subst $  ,,$(wordlist $1,$2,$3)),$(call ~make-list,$1,$2,$3 $3 $3))
~c1-Local = $(if $(filter-out 0,$2),$(subst $(if ,,,$]),$],$(subst -,$(call ~make-list,1,$2,-),$`-(call ^E,$`-$1,$(call ~make-list,2,$2,`)))),$`$1)
~c1-Funcall = $`(call ^Y,$(call ~c1-args9,$(wordlist 2,99999999,$1))$(subst $  ,,$(or $(wordlist $(words x$(wordlist 2,99999999,$1)),9,$(if ,,, , , , , , , , ,)),$(if ,,,)))$(call ~protect-arg,$(call ~c1,$(call ^u,$(word 1,$1)))))
~c1-Block = $(if $(word 2,$1),$`(and $(call ~c1-vec,$1,$(if ,,1,),~c1-arg)),$(if $1,$(call ~c1,$(call ^u,$(word 1,$1)))))
~c1-Var = $`$(or $(filter a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _,$1),($(subst $`,$``,$1)))
~c1 = $(if $(filter !:IL0,$(firstword $1)),$(subst $`,$``,$(call ^n,2,$1)),$(if $(filter !:IL4,$(firstword $1)),$(call ~c1-Local,$(word 2,$1),$(word 3,$1)),$(if $(filter !:IL3,$(firstword $1)),$(call ~c1-Call,$(call ^n,2,$1),$(wordlist 3,99999999,$1)),$(if $(filter !:IL1,$(firstword $1)),$(call ~c1-Var,$(call ^n,2,$1)),$(if $(filter !:IL6,$(firstword $1)),$(call ~c1-vec,$(wordlist 2,99999999,$1),,~c1),$(if $(filter !:IL8,$(firstword $1)),$(call ~c1-Lambda,$(call ~c1,$(call ^n,2,$1))),$(if $(filter !:IL7,$(firstword $1)),$(call ~c1-Block,$(wordlist 2,99999999,$1)),$(if $(filter !:IL5,$(firstword $1)),$(call ~c1-Funcall,$(wordlist 2,99999999,$1)),$(if $(filter !:IL2,$(firstword $1)),$(call ~c1-Builtin,$(word 2,$1),$(wordlist 3,99999999,$1)),$(call ~c1-Error,$1))))))))))
define ~c1-file-set
$(call ~protect-lhs,$1) := $(call ~protect-rhs,$2)

endef
define ~c1-file-fset
$(if $(or $(findstring $`,$(subst $``,,$2)),$(findstring $``.,$2)),$`(call ^fset,$(call ~protect-arg,$1),$(call ~protect-arg,$2))
,$(if $(or $(findstring #,$2),$(findstring 
,$2),$(filter ~%,$(subst $  ,~,$(subst $ 	,~,$2)))),define $(call ~protect-lhs,$1)
$(call ~protect-define,$(subst $``,$`,$2))
$ endef
,$(call ~protect-lhs,$1) = $(subst $``,$`,$(call ~protect-rhs,$2))
))
endef
~c1-file* = $(subst |1,|,$(subst |0, ,$(subst $  ,,$(foreach node,$1,$(subst $  ,|0,$(subst |,|1,$(call ~c1-file,$(call ^u,$(node)))))))))
define ~c1-file
$(or $(if $(filter !:IL2,$(firstword $1)),$(if $(filter !:IL0,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(if $(filter eval,$(word 2,$1)),$(call ^n,2,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))))
,$(if $(filter call,$(word 2,$1)),$(call ~c1-file,!:IL3 $(call ^d,$(call ^n,2,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))))) $(wordlist 2,99999999,$(wordlist 3,99999999,$1)))))),$(if $(filter !:IL3,$(firstword $1)),$(if $(if $(filter-out $(call ^d,!:IL0 !.),$(word 3,$(wordlist 3,99999999,$1))),,1),$(if $(filter ^set,$(call ^n,2,$1)),$(call ~c1-file-set,$(call ~c1,$(call ~nth,1,$(wordlist 3,99999999,$1))),$(call ~c1,$(call ~nth,2,$(wordlist 3,99999999,$1)))),$(if $(filter ^fset,$(call ^n,2,$1)),$(call ~c1-file-fset,$(call ~c1,$(call ~nth,1,$(wordlist 3,99999999,$1))),$(call ~c1,$(call ~nth,2,$(wordlist 3,99999999,$1))))))),$(if $(filter !:IL7,$(firstword $1)),$(call ~c1-file*,$(wordlist 2,99999999,$1))))),$(if ,,$(call ~protect-expr,$(call ~c1,$(if $(if $(filter !:IL2,$(firstword $1)),$(filter error eval info,$(word 2,$1)),$(if $(filter !:IL3,$(firstword $1)),$(filter ^require,$(call ^n,2,$1)))),$1,!:IL2 if $(call ^d,$1) $(call ^d,!:IL0 !.))))
))
endef
~gen1 = $(call ^Y,$(if $2,$(call ~c1-file*,$1),$(call ~c1,!:IL7 $1)),,,,,,,,,$`(call ^d,$`(call ~gen-extract,$`1)) $`(call ^d,$`1))

endef
 
define ///getopts.min
# compiled from getopts.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: getopts|x\3 getopts-loop#7 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
~getopts-loop = $(and $(call ^set,~opt,$(word 1,$5))1,$(call ^set,~file,$(call ~nth,1,$5))1,$(if $(if $5,,1),$(call ^d,$6) $(call ^d,$7),$(if $(if $(filter -%,$(~opt)),,1),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 2,99999999,$5),$(call ~conj,$6,$(~file)),$7),$(if $(filter $1,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 2,99999999,$5),$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),1,$7)),$(if $(filter $2,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 3,99999999,$5),$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),$(call ~nth,2,$5),$7)),$(if $(filter $3,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,,$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),$(wordlist 2,99999999,$5),$7)),$(call ^Y,$(~opt),$(wordlist 2,99999999,$5),,,,,,,,$4)))))))
~getopts = $(call ~getopts-loop,$(filter-out %= %=...,$2),$(patsubst %=,%,$(filter %=,$2)),$(patsubst %=...,%,$(filter %=...,$2)),$3,$1,,)

endef
 
define ///io.min
# compiled from io.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: file-exists?|x\1 read-lines|x\1`or`2`or`3 read-file|x\1 write-file|x\2 getline|x\1 shell!1&1\~%1\x\1 printn|x\0`or`more echo-command|x\1 quote-sh-arg|x\1 shellc#0`or`more logshell&1\:\p\1\cmd(36{37<if)39}40]filter<[:P1]42]S}46]SCAM_DEBUG)49}50]print<[:P1]52]shell:[0}58]cmd(62{63<shell{65<cmd SCAM_DEBUG&0\%\p intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
~shellc = $(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: $(call ~concat-vec,$(foreach N,1,$(^v)))))1,$(shell $(call ~concat-vec,$(foreach N,1,$(^v)))))
~quote-sh-arg = '$(subst ','\'',$1)'
define ~echo-command
printf '%b' $(call ~quote-sh-arg,$(subst 
,\n,$(subst \,\\,$1)))
endef
~printn = $(call ~shellc,$(call ~echo-command,$(call ~concat-vec,$(foreach N,1,$(^v)))), >&2)
define ~shell!
$(subst !1,!,$(subst !0, ,$(subst !n,
,$(subst $  ,,$(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: $1 | sed -e 's/!/!1/g;s/ /!0/g;s/$`/!n/g'))1,$(shell $1 | sed -e 's/!/!1/g;s/ /!0/g;s/$`/!n/g'))))))
endef
~getline = $(and $(if $1,$(call ~printn,$1))1,$(call ~shell!,head -1))
define ~write-file
$(if $1,$(if $(if $(call ~shellc,$(call ~echo-command,), > ,$1.pre, || echo ERROR),,1),$(and $(foreach line,$(subst $  ,
 ,$(call ~split,
,$2)),$(call ^d,$(if $(call ^u,$(line)),$(call ~shellc,$(call ~echo-command,$(call ^u,$(line))), >> ,$1.pre))))1,$(call ~shellc,mv ,$1.pre, ,$1))),$(info error: write-file: nil filename))
endef
~read-file = $(if $1,$(call ~shell!,cat < $(call ~quote-sh-arg,$1)),$(info error: read-file: nil filename))
~read-lines = $(if $1,$(subst !n,,$(subst $  !n, !.,$(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: sed -E '$(if $2,$(if ,,$2,$3!d;))s/!/!1/g;s/	/!+/g;s/ /!0/g;s/$`/!n/g' $1))1,$(shell sed -E '$(if $2,$(if ,,$2,$3!d;))s/!/!1/g;s/	/!+/g;s/ /!0/g;s/$`/!n/g' $1)))),$(info error: read-lines: nil filename))
~file-exists? = $(if $(call ~shellc,ls ,$(call ~quote-sh-arg,$1), 2> /dev/null),1)

endef
 
define ///macros.min
# compiled from macros.scm
# Requires: core parse gen gen0 runtime
# Requires: scam-ct
# Exports: ml.+case#3 case-fold#1 case-append-arg#2 c0-matches#3 arg-bindings#3 case-where&0\~%\p ml.+data#4 read-types#3`or`4`or`5`or`6 read-type#3 read-type-r#6 data-where&0\~%\p DataType&4\W`W`S`L\p\':Data0 ml.+use#4 ml.+defmacro#4 defmacro-where&0\~%\p ml.+global-name#3 defn-global-name#1 ml.+cond#3 cond-wrap#2 cond-where&0\~%\p ml.+concat-for#3 il-spc-decode#1 il-spc-encode#1 il-subst#3 concat-for-where&0\~%\p ml.+append-for#3 ml.+for#3 ml.+foreach#3 c0-for#6 ml.+let!H#3 let!H-env#1 let!H-where&0\~%\p ml.+let-global#3 letg-expand#4 letg-where&0\~%\p ml.+let#3 let-where&0\~%\p read-pairs#3 read-pairs-r#3 ml.+?#3 ml.+set#3 c0-set#6 ml.+subst#3 subst-x#2 ml.+vector#3 ml.+concat#3 ml.+current-file-line#3 ml.+current-env#3 ml.+print#3 c0|igen0\2`or`3 c0-block|igen0\2 c0-block-cc|igen0\3`or`4`or`5 c0-vec|igen0\2 skip-flags|igen0\2 get-flags|igen0\2 env-strip|igen0\2 block-result|igen0\3 begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,gen)
$(call ^require,gen0)
~ml.special-print = !:IL2 info $(call ^d,!:IL6 $(call ~c0-vec,$3,$1))
~ml.special-current-env = !:IL0 $(call ^d,$1)
~ml.special-current-file-line = !:IL0 $(call ^d,$(~*compile-file*):$(call ~describe-lnum,$(call ^Y,$(call ~hash-get,:m,$1),,,,,,,,,$`(if $`(filter !:EDefn8,$`(firstword $`1)),$`(word 2,$`1),$`(call ~form-index,$(call ^E,$2)))),$(~*compile-subject*)))
~ml.special-concat = $(call ~il-concat,$(call ~c0-vec,$3,$1))
~ml.special-vector = $(call ~il-concat,$(call ~intersperse,!:IL0 !0,$(foreach f,$3,$(call ^d,$(call ~il-demote,$(call ~c0,$(call ^u,$f),$1))))))
~subst-x = $(if $1,$(call ~subst-x,$(wordlist 3,99999999,$1),!:IL2 subst $(call ~conj,$(wordlist 1,2,$1),$2)),$2)
~ml.special-subst = $(if $(filter %2 %4 %6 %8 %0 1,$(words $3)),$(call ~gen-error,$2,$(if ,,(subst {FROM TO}+ STR) accepts 2n+1 arguments, not %s),$(words $3)),$(call ~subst-x,$(call ~c0-vec,$(call ~butlast,$3),$1),$(call ~c0,$(call ~promote,$(lastword $3)),$1)))
~c0-set = $(call ^Y,$(call ~resolve,$2,$1),$2,$3,$4,$1,,,,,$`(if $`(filter !:P2,$`(firstword $`2)),$`(if $`(filter !:EDefn0,$`(firstword $`1)),!:IL3 ^set $`(call ~append,$`(call ^d,!:IL0 $`(call ^d,$`(call ^n,2,$`1))) $`(call ^d,$`3),$`(if $`4,$`(call ^d,$`4))),$`(if $`(filter !:EDefn1,$`(firstword $`1)),!:IL3 ^fset $`(call ~append,$`(call ^d,!:IL0 $`(call ^d,$`(call ^n,2,$`1))) $`(call ^d,$`3),$`(if $`4,$`(call ^d,$`4))),$`(call ~gen-error,$`2,%q is not a global variable,$`(call ~symbol-name,$`2)))),$`(call ~err-expected,S,$`2,,$(call ^E,$5),$(call ^E,$6))))
~ml.special-set = $(or $(call ~check-argc,2 or 3,$3,$2),$(call ~c0-set,$1,$(call ^u,$(word 1,$3)),$(call ~c0,$(call ~nth,2,$3),$1),$(if $(call ~nth,3,$3),$(call ~c0,$(call ~nth,3,$3),$1)),NAME,(set NAME VALUE [RETVAL])))
~ml.special-? = $(call ^Y,$(call ~resolve,$(call ^u,$(word 1,$3)),$1),$1,$2,$3,,,,,,$`(or $`(if $`(call ~eq?,-,$`1),$`(call ~err-expected,S,$`(call ^u,$`(word 1,$(call ^E,$3))),$`3,FUNC,(? FUNC ARGS...)),$`(if $`(filter !:EDefn1,$`(firstword $`1)),$`(if $`(if $`(call ~eq?,$`(call ^n,2,$`1),:),,1),$`(call ^Y,^t,$`(call ~cons,!:IL0 $`(call ^d,$`(call ^n,2,$`1)),$`(call ~c0-vec,$`(wordlist 2,99999999,$(call ^E,$3)),$`2)),,,,,,,,!:IL3 $``(call ^d,$``1) $``2)),$`(if $`(filter !:EDefn5,$`(firstword $`1)),$`(call ^Y,^t,$`(call ~cons,!:IL0 $`(call ^d,$`(call ^n,2,$`1)),$`(call ~c0-vec,$`(wordlist 2,99999999,$(call ^E,$3)),$`2)),,,,,,,,!:IL2 $``1 $``2)))),$`(if $`1,$`(call ~gen-error,$`(call ^u,$`(word 1,$(call ^E,$3))),FUNC in (? FUNC ...) is not traceable),$`(call ~gen-error,$`(call ^u,$`(word 1,$(call ^E,$3))),undefined variable: %q,$`(call ~symbol-name,$`3)))))
~read-pairs-r = $(if $(if $1,,1),$3,$(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$1)))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$1))))))),$(if $(call ~nth,2,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),$(if $(if $(call ~nth,3,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),,1),$(call ~read-pairs-r,$(wordlist 2,99999999,$1),$2,$(call ~conj,$3,$(wordlist 3,99999999,$(call ^u,$(word 1,$1))))),$(call ~gen-error,$(call ~nth,3,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),extra form after value in %q,$2)),$(call ~err-expected,,$(call ~nth,2,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),$(call ^u,$(word 1,$1)),VALUE,$2)),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$1))))),$(call ^u,$(word 1,$1)),VAR,$2)),$(call ~err-expected,L,$(call ^u,$(word 1,$1)),,(VAR VALUE),$2)))
~read-pairs = $(if $(filter !:P0,$(firstword $1)),$(call ~read-pairs-r,$(wordlist 3,99999999,$1),$3,),$(call ~err-expected,L,$1,$2,((VAR VALUE)...),$3))
~let-where := (let ((VAR VALUE)...) BODY)
~ml.special-let = $(call ~c0,$(call ^Y,$(wordlist 2,99999999,$3),$(call ~read-pairs,$(call ^u,$(word 1,$3)),$2,$(~let-where)),,,,,,,,$`(or $`(if $`(filter !:P7,$`(firstword $`2)),$`2),!:P0 0 $`(call ~cons,!:P0 0 $`(call ~append,$`(call ^d,!:P2 0 lambda),$`(call ^d,!:P0 0 $`(foreach p,$`2,$`(call ^d,$`(call ~nth,1,$`(call ^u,$`p))))),$`1),$`(foreach p,$`2,$`(call ^d,$`(call ~nth,2,$`(call ^u,$`p))))))),$1)
~letg-where := (let-global ((VAR VALUE)...) BODY)
~letg-expand = $(or $(if $(filter !:P7,$(firstword $4)),$4),$(if $(if $4,,1),$(call ~c0-block,$3,$1)),$(call ~c0-set,$1,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$(call ~c0-set,$1,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$(call ~c0,$(call ~nth,2,$(call ^u,$(word 1,$4))),$1),$(call ~c0,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$1),,),$(call ~letg-expand,$1,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$3,$(wordlist 2,99999999,$4)),,))
~ml.special-let-global = $(call ~letg-expand,$1,$2,$(wordlist 2,99999999,$3),$(call ~read-pairs,$(call ^u,$(word 1,$3)),$2,$(~letg-where)))
~let&-where := (let& ((VAR VALUE)...) BODY)
~let&-env = $(call ~reverse,$(filter %,$(foreach p,$1,$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(call ^u,$p))))),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$(call ^u,$p)))),!:EDefn2 $(call ^d,$(call ~nth,2,$(call ^u,$p))) )))))
~ml.special-let& = $(call ^Y,$(wordlist 2,99999999,$3),$(call ~read-pairs,$(call ^u,$(word 1,$3)),$2,$(~let&-where)),$1,,,,,,,$`(if $`(filter !:P7,$`(firstword $`2)),$`2,$`(call ~c0-block,$`1,$`(call ~append,$`(call ~let&-env,$`2),$`3))))
~c0-for = $(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$3)))),$(if $(wordlist $(words $(wordlist 2,99999999,$4)),99999999,$3),!:IL2 foreach $(call ^d,!:IL0 $(call ^d,$(call ^n,3,$(call ^u,$(word 1,$3))))) $(call ^d,$(call ~c0,$(call ~nth,2,$3),$1)) $(call ^d,$(call ^Y,$(call ~c0-block,$(wordlist $(words $(wordlist 2,99999999,$4)),99999999,$3),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$3))),!:EDefn6 $(call ^d,$(call ^Y,!:IL1 $(call ^d,$(call ^n,3,$(call ^u,$(word 1,$3)))),,,,,,,,,$5)),$1)),,,,,,,,,$6)),$(call ~err-expected,,,$2,$(word $(words . . $3),$(subst $],,$4)),$4)),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,VAR,$4))
~ml.special-foreach = $(call ~c0-for,$1,$2,$3,(foreach VAR LIST BODY),$(value ~identity),$(value ~identity))
~ml.special-for = $(call ~c0-for,$1,$2,$3,(for VAR VEC BODY),$(value ~il-promote),$(value ~il-demote))
~ml.special-append-for = !:IL2 filter $(call ^d,!:IL0 %) $(call ^d,$(call ~c0-for,$1,$2,$3,(append-for VAR VEC BODY),$(value ~il-promote),$(value ~identity)))
~concat-for-where := (concat-for VAR VEC DELIM BODY)
~il-subst = $(if $(filter !:IL0,$(firstword $3)),!:IL0 $(call ^d,$(subst $1,$2,$(call ^n,2,$3))),!:IL2 subst $(call ^d,!:IL0 $(call ^d,$1)) $(call ^d,!:IL0 $(call ^d,$2)) $(call ^d,$3))
~il-spc-encode = $(call ~il-subst, ,|0,$(call ~il-subst,|,|1,$1))
~il-spc-decode = $(call ~il-subst,|1,|,$(call ~il-subst,|0, ,$1))
~ml.special-concat-for = $(or $(if $(filter !:P1,$(firstword $(call ~nth,3,$3))),$(if $(call ~eq?,$(call ^n,3,$(call ~nth,3,$3)), ),$(call ~c0-for,$1,$2,$3,$(~concat-for-where),$(value ~il-promote),$(value ~identity)))),$(call ~il-spc-decode,!:IL2 subst $(call ^d,!:IL0 !0) $(call ^d,$(call ~il-subst,|,|1,$(call ~c0,$(call ~nth,3,$3),$1))) $(call ^d,$(call ~c0-for,$1,$2,$3,$(~concat-for-where),$(value ~il-promote),$(value ~il-spc-encode)))))
~cond-where := (cond (TEST BODY)...)
~cond-wrap = $(if $(filter !:P0,$(firstword $1)),$(if $(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(if $(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(call ~eq?,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))),else)),$(if $(if $2,,1),$(call ~begin-block,$(wordlist 2,99999999,$(wordlist 3,99999999,$1))),$(call ~gen-error,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),(else ...) is followed by additional clauses)),!:P0 0 $(call ~append,$(call ^d,!:P2 0 if) $(word 1,$(wordlist 3,99999999,$1)) $(call ^d,$(call ~begin-block,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)))),$(if $2,$(call ^d,$2)))),$(if $(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$(call ~err-expected,,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(wordlist 3,99999999,$1),BODY,$(~cond-where)),$(call ~err-expected,,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(wordlist 3,99999999,$1),TEST,$(~cond-where)))),$(call ~err-expected,L,$1,,(TEST BODY),$(~cond-where)))
~ml.special-cond = $(call ~c0,$(call ~foldr,$(value ~cond-wrap),,$3),$1)
~defn-global-name = $(if $(filter !:EDefn1,$(firstword $1)),$(call ^n,2,$1),$(if $(filter !:EDefn0,$(firstword $1)),$(call ^n,2,$1)))
~ml.special-global-name = $(or $(call ~check-argc,1,$3,$2),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$3)))),$(call ^Y,$(call ~defn-global-name,$(call ~resolve,$(call ^u,$(word 1,$3)),$1)),$(call ^n,3,$(call ^u,$(word 1,$3))),,,,,,,,$`(if $`1,!:IL0 $`(call ^d,$`1),$`(call ~gen-error,$`(call ^u,$`(word 1,$(call ^E,$3))),%q is not a global variable,$`2))),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,NAME,(global-name NAME))))
~defmacro-where := (defmacro (NAME ARG...) BODY)
~ml.special-defmacro = $(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$3)))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))))))),$(call ^Y,$(call ~c0,!:P0 0 $(call ~cons,!:P2 0 define,$3),$1),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3)))))),!:EDefn3 $(call ^d,$(call ~gen-global-name,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3)))))),$1)) x,$1),,,,,,,,!:IL9 $`(call ^d,$`2) $`1),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))))),$2,NAME,$(~defmacro-where))),$(call ~err-expected,L,$(call ^u,$(word 1,$3)),$2,(NAME ARG...),$(~defmacro-where)))
~ml.special-use = $(or $(call ~check-argc,1,$3,$2),$(if $(filter !:P1,$(firstword $(call ^u,$(word 1,$3)))),$(call ^Y,$(call ~use-module,$(call ^n,3,$(call ^u,$(word 1,$3)))),$(call ^n,3,$(call ^u,$(word 1,$3))),$1,,,,,,,$`(if $`1,$`(call ~block-result,$(call ^E,$4),$`(call ~append,$`1,$`3),!:IL0 !.),$`(call ~gen-error,use: Cannot find module %q,$`2))),$(call ~err-expected,Q,$(call ^u,$(word 1,$3)),$2,MODULE,(use MODULE))))
$(if $(call ^add-tags,!1:Data0!=DataType!0W!0W!0S!0L),)
~data-where := (data NAME (CTOR ARG...)...)
~read-type-r = $(or $(if $(if $1,,1),$(if $6,$(call ~gen-error,$2,no argument following last flag: %s,$6),!:Data0 $3 $(call ^u,$(word 1,$4)) $(call ^d,$(wordlist 2,99999999,$4)) $5)),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$1)))),$(or $(if $(if $(filter &%,$(call ^n,3,$(call ^u,$(word 1,$1)))),,1),$(call ~read-type-r,$(wordlist 2,99999999,$1),$2,$3,$4 $(if $(call ~eq?,&word,$6),W,$(if $(and $(call ~eq?,&list,$6),$(if $(word 2,$1),,1)),L,S)),$(call ~conj,$5,$(call ^n,3,$(call ^u,$(word 1,$1)))),)),$(if $6,$(call ~gen-error,$(call ^u,$(word 1,$1)),two type flags supplied for one argument)),$(if $(filter &list &word,$(call ^n,3,$(call ^u,$(word 1,$1)))),$(call ~read-type-r,$(wordlist 2,99999999,$1),$2,$3,$4,$5,$(call ^n,3,$(call ^u,$(word 1,$1))))),$(call ~gen-error,$(call ^u,$(word 1,$1)),$(if ,,unknown flag [supported: &list, &word]))),$(call ~err-expected,S,$(call ^u,$(word 1,$1)),$2,ARG,$(~data-where))))
~read-type = $(if $(filter !:P0,$(firstword $1)),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(if $(filter !:P1,$(firstword $(call ~nth,2,$(wordlist 3,99999999,$1)))),$(call ~read-type-r,$(wordlist 3,99999999,$(wordlist 3,99999999,$1)),$1,$(call ^n,3,$(call ~nth,2,$(wordlist 3,99999999,$1))),$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))),,),$(call ~read-type-r,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$1,$2,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))),,)),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$3,CTOR,$(~data-where))),$(call ~err-expected,L,$1,$3,(CTOR ...),$(~data-where)))
~read-types = $(if $(filter !:P7,$(firstword $5)),$5,$(if $(if $3,,1),$(call ~append,$6,$(if $5,$(call ^d,$5))),$(call ~read-types,$1,$2,$(wordlist 2,99999999,$3),$(call ~append,$4,1),$(call ~read-type,$(call ^u,$(word 1,$3)),$2$(words $4),$1),$(call ~append,$6,$(if $5,$(call ^d,$5))))))
~ml.special-data = $(call ~env-strip,$4,$(call ^Y,$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$3)))),$(call ~read-types,$2,!:$(call ^n,3,$(call ^u,$(word 1,$3))),$(call ~skip-flags,$3,1)),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,NAME,$(~data-where))),$(if $(filter &public,$(call ~get-flags,$3,1)),x,p),$1,,,,,,,$`(or $`(if $`(filter !:P7,$`(firstword $`1)),$`1),!:IL9 $`(call ^d,$`(call ~append,$`(filter %,$`(foreach ty,$`1,$`(if $`(filter !:Data0,$`(firstword $`(call ^u,$`(ty)))),$`(call ~hash-bind,$`(word 3,$`(call ^u,$`(ty))),!:EDefn4 $`(call ^d,$`(call ^n,4,$`(call ^u,$`(ty)))) $`2 $`(call ^d,$`(word 2,$`(call ^u,$`(ty)))))))),$`3)) !:IL3 ^add-tags $`(call ^d,!:IL0 $`(call ^d,$`(filter %,$`(foreach ty,$`1,$`(if $`(filter !:Data0,$`(firstword $`(call ^u,$`(ty)))),$`(call ~hash-bind,$`(word 2,$`(call ^u,$`(ty))),$`(call ~append,$`(word 3,$`(call ^u,$`(ty))),$`(call ^n,4,$`(call ^u,$`(ty)))))))))))))
~case-where := (case VALUE (PATTERN BODY)...)
~arg-bindings = $(foreach n,$(call ~indices-x,$2,1),$(call ~hash-bind,$(call ~symbol-name,$(call ~nth,$n,$1)),!:EDefn6 $(call ^d,$(if $(call ~eq?,S,$(word $n,$2)),!:IL3 ^n $(call ^d,!:IL0 $(call ^d,$(call ~1+,$n))) $(call ^d,$3),$(if $(call ~eq?,W,$(word $n,$2)),!:IL2 word $(call ^d,!:IL0 $(call ^d,$(call ~1+,$n))) $(call ^d,$3),!:IL2 wordlist $(call ^d,!:IL0 $(call ^d,$(call ~1+,$n))) $(call ^d,!:IL0 99999999) $(call ^d,$3))))))
~c0-matches = $(foreach c,$1,$(call ^d,$(if $(filter !:P0,$(firstword $(call ^u,$c))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))))),$(call ~c0-block,$(wordlist 2,99999999,$(wordlist 3,99999999,$(call ^u,$c))),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))),!:EDefn6 $(call ^d,$2),$3)),$(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))))),$(or $(call ^Y,$(call ~resolve,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))),$3),$2,$(wordlist 2,99999999,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))))),$(wordlist 2,99999999,$(wordlist 3,99999999,$(call ^u,$c))),,,,,,$`(if $`(filter !:EDefn4,$`(firstword $`1)),!:IL2 if $`(call ^d,!:IL2 filter $`(call ^d,!:IL0 $`(call ^d,$`(call ^n,4,$`1))) $`(call ^d,!:IL2 firstword $`(call ^d,$`2))) $`(call ^d,$`(call ~c0-block,$`4,$`(call ~append,$`(call ~arg-bindings,$`3,$`(call ^n,2,$`1),$`2),$(call ^E,$3)))))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))))),$(call ~gen-error,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))),symbol %q does not identify a record type,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))))),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))),$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))),CTOR,$(~case-where)))),$(call ~err-expected,L S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))),$(call ^u,$c),PATTERN,$(~case-where)))),$(call ~err-expected,L,$(call ^u,$c),,(PATTERN BODY),$(~case-where)))))
~case-append-arg = $(if $(filter !:IL2,$(firstword $1)),!:IL2 $(word 2,$1) $(call ~conj,$(wordlist 3,99999999,$1),$2),$1)
~case-fold = $(if $(word 2,$1),$(call ~foldr,$(value ~case-append-arg),$(call ~promote,$(lastword $1)),$(call ~butlast,$1)),$(call ^u,$(word 1,$1)))
~ml.special-case = $(call ^Y,$(call ~c0,$(call ^u,$(word 1,$3)),$1),$1,$3,$2,,,,,,$`(if $`(filter !:P7,$`(firstword $`1)),$`1,$`(if $`(call ^u,$`(word 1,$(call ^E,$3))),$`(call ~case-fold,$`(call ~c0-matches,$`(wordlist 2,99999999,$`3),$`1,$`2)),$`(call ~err-expected,,$`(call ^u,$`(word 1,$(call ^E,$3))),$`4,VALUE,$`(~case-where)))))

endef
 
define ///num.min
# compiled from num.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: zero-pad|x\2 extend-list#2 sum|x\1 sum-small#1 range|x\2 0-#1 u-range#2 mod|x\2 mod-9#1 mod-8#1 mod-5#1 mod-3#1 mod-2#1 mod-1#1 div-10#1 mod-10#1 mod-10#1 umod#2 /|x\2 u/#2`or`3 longdiv#3 longdiv-next#4 longdiv#3 digit-range#5 strdiv#2 topdigits#2 ==|x\2 !D=|x\2 !E=|x\2 !D|x\2 !E|x\2 ^|x\2 *|x\2 -|x\2 !Q|x\2 u^#2 u^2#1 u/2#1 nodd#1 cmp#2 ucmp#2 u-#2 ndecode#1 u*#2 u!Q1#1 u!Q#2 ucarry#1 udecode#2 uencode#1 nnorm#1 sign#1 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
~sign = $(findstring -,$1)
~nnorm = $(strip $(subst ., .,$(call ~butlast,$(subst -.,- .,$(subst i.,i .,$(subst $  ,,$1.))))))
~uencode = $(call ~reverse,$(subst 0, .,$(subst -,,$(subst 1,0i,$(subst 2,1i,$(subst 3,2i,$(subst 4,3i,$(subst 5,4i,$(subst 6,5i,$(subst 7,6i,$(subst 8,7i,$(subst 9,8i,$1))))))))))))
~udecode = $(and $(findstring i,$1),$2)$(or $(subst 8i,9,$(subst 7i,8,$(subst 6i,7,$(subst 5i,6,$(subst 4i,5,$(subst 3i,4,$(subst 2i,3,$(subst 1i,2,$(subst 0i,1,$(subst .,0,$(subst $  ,,$(wordlist 2,99999999,$(subst .i, .i,.$(subst $  ,,$(call ~reverse,$1))))))))))))))),0)
~ucarry = $(call ~while,$`(findstring iiiiiiiiii .,$`1),$`(subst iiiiiiiiii ., .i,$`1),$1 .)
~u+ = $(call ~ucarry,$(subst ..,.,$(subst i.,i,$(join $1,$2))))
~u+1 = $(call ~ucarry,$(join $(or $1,.),i))
~u* = $(call ~u+,$(subst i,$(subst .,,$(firstword $1)),$2),$(if $(word 2,$1),$(call ~u*,$(wordlist 2,99999999,$1),. $2)))
~ndecode = $(call ~udecode,$(if $(findstring -,$1),$(wordlist 2,$(words $1),. $(call ~u+1,$(foreach d,$1,$(subst $d,.,.iiiiiiiii)))),$1),$(findstring -,$1))
~u- = $(call ~nnorm,$(subst .i-,.,$(call ~u+,$1,$(join $(foreach d,$(subst ..,.,$(join $(subst i,,$1),$2)),$(subst $d,.,.iiiiiiiii)),i) .-)))
~ucmp = $(if $(or $1,$2),$(or $(call ~ucmp,$(wordlist 2,99999999,$1),$(wordlist 2,99999999,$2)),$(if $(findstring $(word 1,$2)i,$(word 1,$1)),a),$(if $(findstring $(word 1,$1)i,$(word 1,$2)),b)))
~cmp = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`(call ~xor,$`1,$`2),$`(and $`(or $`(findstring i,$`3),$`(findstring i,$`4)),$`(if $`2,a,b)),$`(filter a b,$`(subst -a,b,$`(subst -b,a,$`1$`(call ~ucmp,$`3,$`4))))))
~nodd = $(findstring i,$(subst ii,,$(word 1,$1)))
~u/2 = $(call ~nnorm,$(wordlist 2,99999999,$(call ~ucarry,$(subst i,iiiii,$1))))
~u^2 = $(call ~u*,$1,$1)
~u^ = $(if $(call ~nodd,$2),$(call ~nnorm,$(call ~u*,$1,$(call ~u^2,$(call ~u^,$1,$(call ~u/2,$2))))),$(if $(findstring i,$2),$(call ~nnorm,$(call ~u^2,$(call ~u^,$1,$(call ~u/2,$2)))),.i))
~+ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`(call ~xor,$`1,$`2),$`(call ~ndecode,$`(if $`2,$`(call ~u-,$`3,$`4),$`(call ~u-,$`4,$`3))),$`(call ~udecode,$`(call ~u+,$`3,$`4),$`1)))
~- = $(call ~+,$1,$(subst --,,-$2))
~* = $(call ~udecode,$(call ~u*,$(call ~uencode,$1),$(call ~uencode,$2)),$(call ~xor,$(call ~sign,$1),$(call ~sign,$2)))
~^ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`2,nan,$`(call ~udecode,$`(call ~u^,$`3,$`4),$`(and $`1,$`(call ~nodd,$`4),-))))
~> = $(if $(filter a,$(call ~cmp,$1,$2)),1)
~< = $(if $(filter b,$(call ~cmp,$1,$2)),1)
$(if ,,~>=) = $(if $(filter b,$(call ~cmp,$1,$2)),,1)
$(if ,,~<=) = $(if $(filter a,$(call ~cmp,$1,$2)),,1)
$(if ,,~==) = $(if $(call ~cmp,$1,$2),,1)
~topdigits = $(call ^Y,$(wordlist $2,99999999,$1),,,,,,,,,$`(subst .,,$`(word 1,$`1)$`(subst i,iiiiiiiiii,$`(word 2,$`1)$`(subst i,iiiiiiiiii,$`(word 3,$`1)))))
~strdiv = $(subst I,i,$(subst i,,$(subst $2,I,$1)))
~digit-range = $(call ^Y,$(call ~topdigits,$1,$5),$(call ~topdigits,$2,$5),$3,$4,,,,,,.$`(call ~strdiv,$`1,$`2$`(if $`4,i)) .$`(patsubst iiiiiiiii%,iiiiiiiii,$`(call ~strdiv,$`1$`(if $`3,i),$`2)))
~longdiv-next = $(call ~append,$(if $3,$(call ~longdiv,$(call ~append,$(lastword $3),$2),$(call ~butlast,$3),$4)),$1)
~longdiv = $(call ^Y,$(call ~digit-range,$1,$3,$2,$(word 3,$3),$(patsubst 0,1,$(words $(wordlist 2,99999999,$3)))),$1,$3,$2,,,,,,$`(call ^Y,$`(call ~u-,$`2,$`(call ~ucarry,$`(subst i,$`(subst .,,$`(word 1,$`1)),$`3))),$`2,$`3,$`4,$`(word 1,$`1),$`(word 2,$`1),,,,$``(if $``(or $``(call ~eq?,$``5,$``6),$``(filter b,$``(call ~ucmp,$``1,$``3))),$``(call ~longdiv-next,$``5,$``1,$``4,$``3),$``(call ~longdiv-next,$``6,$``(call ~u-,$``1,$``3),$``4,$``3))))
~u/ = $(if $(word $(words . $2),$1),$(call ~u/,$(wordlist 2,99999999,$1),$2,$(call ~append,$3,$(call ^u,$(word 1,$1)))),$(call ~longdiv,$1,$3,$2))
~/ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~nnorm,$(call ~uencode,$1)),$(call ~nnorm,$(call ~uencode,$2)),,,,,,$`(if $`(if $`4,,1),nan,$`(call ~udecode,$`(call ~u/,$`3,$`4),$`(call ~xor,$`1,$`2))))
~umod = $(call ^Y,$1,$2,$(subst .,,$2),$(subst $(subst .,,$2),,iiiiiiiiii),,,,,,$`(if $`(call ~eq?,$`4,),$`(subst $`3,,$`(word 1,$`1)),$`(if $`(call ~eq?,$`4,i),.$`(subst $`3,,$`(subst $`  ,,$`(subst .,,$`1))),$`(call ~u-,$`1,$`(call ~u*,$`(call ~u/,$`1,$`2),$`2)))))
~mod-10 = $(if $(filter %1 %2 %3 %4,$1),$(if $(filter %1 %2,$1),$(if $(filter %1,$1),1,2),$(if $(filter %3,$1),3,4)),$(if $(filter %5 %6 %7 %8,$1),$(if $(filter %5 %6,$1),$(if $(filter %5,$1),5,6),$(if $(filter %7,$1),7,8)),$(if $(filter %9,$1),9,0)))
~mod-10 = $(if $(filter %8 %9,$1),$(if $(filter %8,$1),8,9),$(words $(filter %1 %3 %5 %7 %9,$1)$(if $(filter %2 %3 %6 %7,$1), 1 1)$(if $(filter %4 %5 %6 %7,$1), 1 1 1 1)))
~div-10 = $(patsubst %$(call ~mod-10,$1),%,$1)
~mod-1 = 0
~mod-2 = $(if $(filter %1 %3 %5 %7 %9,$1),1,0)
~mod-3 = $(or $(subst 11,2,$(subst 111,,$(subst 2,11,$(subst 5,11,$(subst 8,11,$(subst 4,1,$(subst 7,1,$(subst 3,,$(subst 6,,$(subst 9,,$(subst 0,,$1))))))))))),0)
~mod-5 = $(word $(subst 0,10,$(call ~mod-10,$1)),1 2 3 4 0 1 2 3 4 0)
~mod-8 = $(subst 8,0,$(subst 9,1,$(call ~mod-10,$1)))
~mod-9 = $(words $(subst 1,1 ,$(subst 111111111,,$(subst 2,11,$(subst 3,21,$(subst 4,31,$(subst 5,41,$(subst 6,51,$(subst 7,61,$(subst 8,71,$(subst 9,,$(subst 0,,$1))))))))))))
~mod = $(if $(filter 1 2 3 5 9 10,$2),$(call ~mod-$2,$1),$(call ^Y,$(call ~sign,$1),$(call ~nnorm,$(call ~uencode,$1)),$(call ~nnorm,$(call ~uencode,$2)),,,,,,,$`(if $`(if $`3,,1),nan,$`(call ~udecode,$`(call ~umod,$`2,$`3),$`1))))
~u-range = $(if $(call ~>=,$1,$2),$(if $(call ~==,$1,$2),$1),$(if $(filter %0,$1),$(if $(filter %9,$2),$(if $(filter 0,$1),0 1 2 3 4 5 6 7 8 9 )$(foreach n,$(call ~u-range,$(or $(patsubst %0,%,$1),1),$(or $(patsubst %9,%,$2),0)),$n0 $n1 $n2 $n3 $n4 $n5 $n6 $n7 $n8 $n9 ),$(call ~u-range,$1,$(call ~-,$2,1)) $2),$1 $(call ~u-range,$(call ~1+,$1),$2)))
~0- = $(subst --,,-$(or $1,0))
~range = $(strip $(if $(call ~>=,$1,0),$(call ~u-range,$1,$2),$(addprefix -,$(call ~reverse,$(call ~u-range,$(if $(call ~<,$2,0),$(call ~0-,$2),1),$(call ~0-,$1)))) $(if $(call ~>=,$2,0),$(call ~u-range,0,$2))))
~sum-small = $(if $1,$(call ~+,$(word 1,$1),$(call ~sum-small,$(wordlist 2,99999999,$1))),0)
~sum = $(if $(word 50,$1),$(call ~+,$(call ~sum,$(wordlist 1,$(call ~/,$(words $1),2),$1)),$(call ~sum,$(wordlist $(call ~1+,$(call ~/,$(words $1),2)),99999999,$1))),$(call ~sum-small,$1))
~extend-list = $(if $(word $2,$1),$(wordlist 1,$2,$1),$(call ~extend-list,$1 $1 $1,$2))
~zero-pad = $(if $(if $(subst 0,,$2),,1),$(and $(info zero-pad: invalid digits: $2)1,$1),$(subst $  ,,$(call ~reverse,$(wordlist 1,$2,$(call ~append,$(call ~reverse,$(subst 9,9 ,$(subst 8,8 ,$(subst 7,7 ,$(subst 6,6 ,$(subst 5,5 ,$(subst 4,4 ,$(subst 3,3 ,$(subst 2,2 ,$(subst 1,1 ,$(subst 0,0 ,$1))))))))))),$(call ~extend-list,0 0 0 0 0 0,$2))))))

endef
 
define ///parse.min
# compiled from parse.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: parse-text|x\1 parse-subject|x\1 parse-forms&1\:\p\3\subj`pos`k(3903{3904<%-r{3906<subj{3908<k)3910}3911]parse-exp}3913]subj}3915]pos{3918<nil parse-forms-r#4 describe-error|x\3 get-error-msg#1 describe-line#2 describe-lnum|x\2 parse-exp#2 parse-x#3 parse-x2#3 parse-array#2 parse-list&1\:\p\2\subj`pos(2518{2519<parse-seq{2521<subj@2523<!P{2527<pos)2529}2530]parse-exp}2532]subj<[:P0]2534"2535[01!Q"2537[0pos{2541<nil parse-seq#5 parse-seq-err#4 new-Q#3 parse-exp#2 POut-format#1 POut-form&1\:\p\1\st(1954{1955<rest{1957<st POut-pos&1\:\p\1\st(1934{1935<word@1937<1{1939<st POut&1\:\p\2\pos`form(1910{1911<concat{1913<pos@1915<]{1919<form find-word#3 pdec-str#1 pdec|x\1 penc|x\1 expand-spaces#1 compress-spaces#1 compact-comments#1 format-form|x\1 form-set-indices|x\2 form-typename|x\1 form-index|x\1 PList-is-empty?|x\1 string-value|x\1 symbol-to-string|x\1 symbol-name|x\1 PList&4\W`L\x\':P0 PString&4\W`S\x\':P1 PSymbol&4\W`S\x\':P2 PQuote&4\W`L\x\':P3 PQQuote&4\W`L\x\':P4 PUnquote&4\W`L\x\':P5 PSplice&4\W`L\x\':P6 PError&4\W`S\x\':P7 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(if $(call ^add-tags,!1:P0!=PList!0W!0L !1:P1!=PString!0W!0S !1:P2!=PSymbol!0W!0S !1:P3!=PQuote!0W!0L !1:P4!=PQQuote!0W!0L !1:P5!=PUnquote!0W!0L !1:P6!=PSplice!0W!0L !1:P7!=PError!0W!0S),)
~symbol-name = $(if $(filter !:P2,$(firstword $1)),$(call ^n,3,$1),ERROR:symbol-name($1))
~symbol-to-string = $(if $(filter !:P2,$(firstword $1)),!:P1 $(word 2,$1) $(call ^d,$(call ^n,3,$1)),ERROR:symbol-to-string($1))
~string-value = $(if $(filter !:P1,$(firstword $1)),$(call ^n,3,$1),ERROR:string-value($1))
~PList-is-empty? = $(if $(filter !:P0,$(firstword $1)),$(if $(wordlist 3,99999999,$1),,1),ERROR:PList.is-empty?($1))
~form-index = $(if $(filter !:%,$(word 1,$1)),$(word 2,$1),$(if $(call ~numeric?,$1),$1,0))
~form-typename = $(if $(filter !:P0,$(firstword $1)),list,$(if $(filter !:P2,$(firstword $1)),symbol,$(if $(filter !:P1,$(firstword $1)),literal string,invalid form)))
~form-set-indices = $(if $2,$(if $(filter !:P1,$(firstword $2)),!:P1 $1 $(call ^d,$(call ^n,3,$2)),$(if $(filter !:P2,$(firstword $2)),!:P2 $1 $(call ^d,$(call ^n,3,$2)),$(if $(filter !:P7,$(firstword $2)),!:P7 $1 $(call ^d,$(call ^n,3,$2)),$(if $(filter !:P0,$(firstword $2)),!:P0 $1 $(foreach f,$(wordlist 3,99999999,$2),$(call ^d,$(call ~form-set-indices,$1,$(call ^u,$f)))),$(if $(filter !:P3,$(firstword $2)),!:P3 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),$(if $(filter !:P4,$(firstword $2)),!:P4 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),$(if $(filter !:P5,$(firstword $2)),!:P5 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),$(if $(filter !:P6,$(firstword $2)),!:P6 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),ERROR:form-set-indices($2))))))))))
~format-form = $(if $(filter !:P0,$(firstword $1)),($(foreach f,$(wordlist 3,99999999,$1),$(call ~format-form,$(call ^u,$f)))),$(if $(filter !:P1,$(firstword $1)),$(call ~format,$(call ^n,3,$1)),$(if $(filter !:P2,$(firstword $1)),$(call ^n,3,$1),$(if $(filter !:P3,$(firstword $1)),'$(call ~format-form,$(wordlist 3,99999999,$1)),$(if $(filter !:P4,$(firstword $1)),`$(call ~format-form,$(wordlist 3,99999999,$1)),$(if ,,,$(call ~format,$1)))))))
define ~compact-comments
$(subst ; ;,;;,$(subst !s, ,$(subst $  ,,$(foreach c,$(subst ;, ;,$(subst 
, 
,$(subst ", ",$(subst $  ,!s,$1)))),$(if $(filter ;%,$c),$(subst !s,,$c)!s,$c)))))
endef
define ~compress-spaces
$(subst !6!6,!c,$(subst !2!0!2!0,!6,$(subst !0!0!0,!0!2,$(subst 
!0!0,
!2,$(subst 
 !0,
!0,$1)))))
endef
~expand-spaces = $(subst !2,!0!0,$(subst !6,!2!2!2,$(subst !c,!6!6,$1)))
define ~penc
$(call ~compress-spaces,$(call ~compact-comments,$(subst !+, !0!+ ,$(subst $   , ,$(subst 0  !,0!,$(subst %, !p ,$(subst :, : ,$(subst $`, $` ,$(subst $[, $[ ,$(subst $], $] ,$(subst [, [ ,$(subst ], ] ,$(subst ", " ,$(subst 
, 
 ,$(subst !0, !0 ,$(subst ;, ; ,$(subst \",!Q,$(subst \\,!b,$(subst ', ' ,$(subst `, ` ,$(subst $(if ,,, @),$(if ,,,@ ),$(subst $(if ,,,),$(if ,, , ),$(if $1,$(call ~demote,$1))))))))))))))))))))))))
endef
~pdec = $(call ~promote,$(call ~expand-spaces,$(subst !p,%,$(subst !b,\\,$(subst !Q,\",$(subst $  ,,$(subst !0!+,!+,$1)))))))
define ~pdec-str
$(or $(call ~expand-spaces,$(subst !p,%,$(subst !b,\,$(subst !Q,",$(subst \n,
,$(subst \t,!+,$(subst $  ,,$(subst !0!+,!+,$1)))))))),!.)
endef
~find-word = $(foreach p,$(call ~1+,$(call ~1+,$2)),$(if $(filter $3,$(or $(wordlist $2,$p,$1),$3)),$(if $(filter $3,$(or $(word $2,$1),$3)),$2,$(foreach q,$(call ~1+,$2),$(if $(filter $3,$(or $(word $q,$1),$3)),$q,$p))),$(call ~find-word,$1,$(call ~1+,$p),$3)))
~POut-format = $(if $(and $(call ~numeric?,$(word 1,$1)),$(filter !:%,$(word 2,$1))),(POut $(word 1,$1) $(call ~format,$(wordlist 2,99999999,$1))))
~new-Q = $3 $(if $(word $3,$1),!:P1 $2 $(call ^d,$(call ~promote,$(call ~pdec-str,$(subst ",,$(wordlist $2,$3,$1))))),!:P7 $2 ")
~parse-seq-err = $(if $(filter .,$4),$2 !:P7 $2 $(call ^d,$(subst ],[,$(subst $],$[,$1))),$3 !:P7 $3 $(call ^d,$4 $1))
~parse-seq = $(if $(filter !:P7,$(firstword $(wordlist 2,99999999,$4))),$(if $(call ~eq?,$2,$(call ^n,3,$(wordlist 2,99999999,$4))),$(word 1,$4) !:P0 $3 $5,$(call ~parse-seq-err,$2,$3,$(word 2,$(wordlist 2,99999999,$4)),$(call ^n,3,$(wordlist 2,99999999,$4)))),$(call ~parse-seq,$1,$2,$3,$(call ~parse-exp,$1,$(call ~1+,$(word 1,$4))),$(call ~conj,$5,$(wordlist 2,99999999,$4))))
~parse-array = $(call ~parse-seq,$1,],$2,$(call ~parse-exp,$1,$(call ~1+,$2)),$(call ^d,!:P2 0 vector))
~parse-x2 = $(if $(filter !:P7,$(firstword $(wordlist 2,99999999,$3))),$3,$(word 1,$3) $(call ^Y,$2,$(wordlist 2,99999999,$3),,,,,,,,$(if $(filter ',$1),!:P3 $`1 $`2,$(if $(filter `,$1),!:P4 $`1 $`2,$(if $(filter $(if ,,,),$1),!:P5 $`1 $`2,$(if $(filter $(if ,,,@),$1),!:P6 $`1 $`2,!:P7 $(call ^E,$2) $`(call ^d,internal:parse-x2:$(call ^E,$1))))))))
define ~parse-x
$(if $(filter !0% 
% ;% (),$(or $(word $(call ~1+,$3),$2),())),$3 !:P7 $3 $(call ^d,$1),$(call ~parse-x2,$1,$3,$(call ~parse-exp,$2,$(call ~1+,$3))))
endef
define ~parse-exp
$(or $(foreach w,$(word $2,$1),$(if $(filter !0% 
%,$w),$(call ~parse-exp,$1,$(call ~1+,$2)),$(if $(filter $] ],$w),$2 !:P7 $2 $(call ^d,$w),$(if $(filter $[,$w),$(call ~parse-seq,$1,$],$2,$(call ~parse-exp,$1,$(call ~1+,$2)),),$(if $(filter ",$w),$(call ~new-Q,$1,$2,$(call ~find-word,$1,$(call ~1+,$2),")),$(if $(filter ;%,$w),$(call ~parse-exp,$1,$(call ~1+,$(call ~find-word,$1,$2,
%))),$(if $(filter [,$w),$(call ~parse-array,$1,$2),$(if $(filter $(if ,,' ` , ,@),$w),$(call ~parse-x,$w,$1,$2),$(if $(call ~numeric?,$w),$2 !:P1 $2 $(call ^d,$w),$(if $(filter $` : !p,$w),$2 !:P7 $2 $(call ^d,$(call ~pdec,$w)),$2 !:P2 $2 $(call ^d,$(call ~promote,$w)))))))))))),$2 !:P7 $2 .)
endef
define ~describe-lnum
$(words 1 $(filter 
,$(subst 
,
 ,$(wordlist 2,$(or $1,1),x$2))))
endef
define ~describe-line
$(call ^Y,$(call ~promote,$(lastword $(call ~split,
,$(wordlist 2,$(or $1,1),X $2)))),$(call ^u,$(word 1,$(call ~split,
,$(wordlist $(or $1,1),99999999,$2)))),,,,,,,,$`(call ^d,$`(call ~pdec,$`1)) $`(call ^d,$`(call ~pdec,$`(word 1,$`2))) $`(call ^d,$`(call ~pdec,$`(wordlist 2,99999999,$`2))))
endef
~get-error-msg = $(if $(filter ` ',$(word 1,$1)),prefix "$(word 1,$1)" must immediately precede expression,$(if $(filter ( ) [ ],$(word 1,$1)),unmatched "$(word 1,$1)",$(if $(filter ",$(word 1,$1)),unterminated string,$1)))
define ~describe-error
$(if $(filter !:P7,$(firstword $1)),$(call ^Y,$(call ~penc,$2),$(if $3,$3:,line ),$(call ~get-error-msg,$(call ^n,3,$1)),$(word 2,$1),,,,,,$`(if $`(call ~natural?,$`4),$`(call ~sprintf,%s%s: %s
at: %s
,$`2,$`(call ~describe-lnum,$`4,$`1),$`3,$`(call ~concat-vec,$`(call ~describe-line,$`4,$`1),*)),$`(call ~sprintf,%s:?: %s
,$`2,$`3))))
endef
~parse-forms-r = $(if $(filter !:P7,$(firstword $(wordlist 2,99999999,$3))),$(call ^Y,$4,$(if $(call ~eq?,$(call ^n,3,$(wordlist 2,99999999,$3)),.),,$(wordlist 2,99999999,$3)),,,,,,,,$2),$(call ~parse-forms-r,$1,$2,$(call ~parse-exp,$1,$(call ~1+,$(word 1,$3))),$(call ~conj,$4,$(wordlist 2,99999999,$3))))
~parse-subject = $(call ~parse-forms-r,$1,$`(if $`2,$`(call ~conj,$`1,$`2),$`1),$(call ~parse-exp,$1,1),)
~parse-text = $(call ~parse-subject,$(call ~penc,$1))

endef
 
define ///repl.min
# compiled from repl.scm
# Requires: core io parse compile gen num runtime
# Requires: scam-ct
# Exports: repl-file|x\1 repl-rep|x\2 repl|x\0 initial-state&2(1186{1187<eval-and-print)1189}1190]foreach}1192]lib}1194]LIBS<[:P0]1196"1197[0concat][1:P1[01199[0!Orequire[10!N"1206[0lib][1:P1[01208[0!N!P!n)1216}1217]compile-prelude}1219]nil\p read-eval-print#1 eval-and-print#2 describe-env#2 describe-binding#3 help#0 *2&0\~%\x *1&0\~%\x LIBS&0\~%\p zero-pad|inum\2 sum|inum\1 range|inum\2 mod|inum\2 /|inum\2 ==|inum\2 !D=|inum\2 !E=|inum\2 !D|inum\2 !E|inum\2 ^|inum\2 *|inum\2 -|inum\2 !Q|inum\2 begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 compile-file|icompile\6 compile-prelude|icompile\1 compile-text|icompile\4 ct-mod&2\':P1`194`scam-ct\icompile rt-mod&2\':P1`175`runtime\icompile parse-text|iparse\1 parse-subject|iparse\1 describe-error|iparse\3 describe-lnum|iparse\2 pdec|iparse\1 penc|iparse\1 format-form|iparse\1 form-set-indices|iparse\2 form-typename|iparse\1 form-index|iparse\1 PList-is-empty?|iparse\1 string-value|iparse\1 symbol-to-string|iparse\1 symbol-name|iparse\1 PList&4\W`L\i\':P0 PString&4\W`S\i\':P1 PSymbol&4\W`S\i\':P2 PQuote&4\W`L\i\':P3 PQQuote&4\W`L\i\':P4 PUnquote&4\W`L\i\':P5 PSplice&4\W`L\i\':P6 PError&4\W`S\i\':P7 file-exists?|iio\1 read-lines|iio\1`or`2`or`3 read-file|iio\1 write-file|iio\2 getline|iio\1 shell!1&1\~%1\iio\1 printn|iio\0`or`more echo-command|iio\1 quote-sh-arg|iio\1 intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,compile)
$(call ^require,gen)
$(call ^require,num)
~LIBS := core io parse escape gen0 gen1 compile num repl
~*1 := 
~*2 := 
define ~help
$(and $(info Commands:
  :q or ^D : exit REPL loop
  :        : reset input state
  :e       : show environment
  :E       : show environment (including imported entries)
  ?        : this message

Global variables in REPL:
  *1 = most recent value printed
  *2 = second most recent value
)1,$(call ~printf,LIBS = %s
,$(~LIBS)))
endef
define ~describe-binding
$(if $(or $3,$(if $(filter i%,$(word 3,$2)),,1)),$(if $(filter !:EDefn5,$(firstword $2)),built-in function,$(if $(filter !:EDefn1,$(firstword $2)),$(if $(call ~eq?,$(call ^n,2,$2),:),compound macro,function)$(if $(wordlist 2,99999999,$(call ^n,4,$2)),$(call ~sprintf,
    (%s %s) -> %s,$1,$(call ^u,$(word 1,$(call ^n,4,$2))),$(call ~format-form,$(call ~begin-block,$(wordlist 2,99999999,$(call ^n,4,$2)))))),$(if $(filter !:EDefn0,$(firstword $2)),variable,$(if $(filter !:EDefn2,$(firstword $2)),symbol macro: $(call ~format-form,$(call ^n,2,$2)),$(if $(filter !:EDefn3,$(firstword $2)),executable macro,$(if $(filter !:EDefn4,$(firstword $2)),constructor,)))))))
endef
~describe-env = $(foreach w,$(call ~reverse,$(call ~hash-compact,$1)),$(call ^Y,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$w)))),$(call ~describe-binding,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$w)))),$(call ~nth,2,$(subst !=, ,$w)),$2),,,,,,,,$`(if $`2,$`(call ~printf,  %s : %s,$`1,$`2))))
~eval-and-print = $(call ^Y,$(call ~compile-text,$1,$2,[console],),$2,$1,,,,,,,$`(if $`(filter $`[ [,$`(if $`(filter !:P7,$`(firstword $`(call ^u,$`(word 1,$`(call ~nth,1,$`1))))),$`(call ^n,3,$`(call ^u,$`(word 1,$`(call ~nth,1,$`1)))))),$`(call ^d,$`3) $`(call ^d,$`2),$`(if $`(filter .,$`(if $`(filter !:P7,$`(firstword $`(call ^u,$`(word 1,$`(call ~nth,1,$`1))))),$`(call ^n,3,$`(call ^u,$`(word 1,$`(call ~nth,1,$`1)))))),!. $`(call ^d,$`2),$`(if $`(call ~nth,1,$`1),$`(and $`(foreach err,$`(call ~nth,1,$`1),$`(call ^d,$`(info $`(call ~describe-error,$`(call ^u,$`(err)),$`3,))))1,!. $`(call ^d,$`2)),$`(and $`(call ^Y,$`(call ^Y,,,,,,,,,,$`(call ~nth,2,$`1)),,,,,,,,,$``(if $``1,$``(and $``(call ^set,~*2,$``(~*1))1,$``(call ^set,~*1,$``1)1,$``(info $``(call ~format,$``1)))))1,!. $`(call ^d,$`(call ~nth,3,$`1)))))))
define ~read-eval-print
$(call ^Y,$(call ~getline,$(if $(call ^u,$(word 1,$1)),+ ,> )),$(call ~nth,1,$1),$(call ~nth,2,$1),$1,,,,,,$`(if $`(call ~eq?,$`1,?
),$`(and $`(call ~help)1,$`4),$`(if $`(call ~eq?,$`1,:
),!. $`(call ^d,$`3),$`(if $`(call ~eq?,$`1,:q
),,$`(if $`(call ~eq?,$`1,),,$`(if $`(call ~eq?,$`1,:e
),$`(and $`(call ~describe-env,$`3,)1,$`4),$`(if $`(call ~eq?,$`1,:E
),$`(and $`(call ~describe-env,$`3,1)1,$`4),$`(call ~eval-and-print,$`2$`1,$`3))))))))
endef
define ~repl
$(and $(info SCAM interactive mode. Type '?' for help.)1,$(call ~while,$(value ~identity),$(value ~read-eval-print),$(call ~eval-and-print,$(foreach lib,$(~LIBS),(require "$(lib)")
),$(call ~compile-prelude,)))1,$(info ))
endef
define ~repl-rep
$(call ^Y,$(call ~compile-text,$1,$(call ~nth,2,$(call ~eval-and-print,$(foreach lib,$(~LIBS),(require "$(lib)")
),$(call ~compile-prelude,))),$(or $2,[commandline]),),,,,,,,,,$`(if $`(call ~nth,1,$`1),$`(and $`(foreach err,$`(call ~nth,1,$`1),$`(call ^d,$`(info $`(call ~describe-error,$`(call ^u,$`(err)),$(call ^E,$1),))))1,1),$`(info $`(call ^Y,,,,,,,,,,$`(call ~nth,2,$`1)))))
endef
~repl-file = $(call ^Y,$(call ~read-file,$1),,,,,,,,,$`(if $`1,$`(call ^Y,$`(call ~compile-text,$`1,$`(call ~compile-prelude,),$(call ^E,$1),///~),,,,,,,,,$``(if $``(call ~nth,1,$``1),$``(and $``(foreach err,$``(call ~nth,1,$``1),$``(call ^d,$``(info $``(call ~describe-error,$``(call ^u,$``(err)),$`(call ^E,$`1),$(call ^E,$1,`)))))1,1),$``(eval $``(call ~nth,2,$``1)))),$`(and $`(call ~printf,error: empty/missing file %q,$(call ^E,$1))1,1)))

endef
 
define ///runtime.min
# compiled from runtime.scm
# Exports: SCAM_MAIN&0\%\p ^start&1\%\p\3 start#3 *started*&0\%\p ^require&1\%\p\1 ^required-files&0\~%\p ^add-tags&1\%\p\1 ^tags&0\%\x run-hooks|x\1 add-hook|x\2 *hooks*&0\~%\p bound?&1\:\x\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\x\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\x\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\x\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\x\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\x\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\x set-rglobal|x\2`or`3 set-global|x\2`or`3 nth|x\2 demote|x\1 promote|x\1 apply|x\2 ^E&1\%\p\1`or`2 ^fset&1\%\p\3 ^set&1\%\p\2`or`3 esc-LHS|x\1 esc-RHS&1\:\p\1\str(1196{1197<subst@1199<$@1203<$$@1208<!M@1212<$!N@1217<!n@1221<$!C{1226<str ^t&1\%\p\0 F&2(950{951<global-name{953<^f\p TC&2(937{938<global-name{940<^tc\p ^ta&1\%\p\0`or`more ^tc#1`or`more ^tp&1\%\p\2 ^f#1 ^apply#1`or`more ^av&1\%\p\0 ^v&1\%\p\0 ^Y&1\%\p\0`or`more ^n&1\%\p\2 ^u&1\%\p\1 ^d&1\%\p\1 SCAM_DEBUG&0\%\x SCAM_MODS&0\%\x
SCAM_DEBUG ?=
$(if $(if $(findstring R,$(SCAM_DEBUG)),$(info runtime: $(lastword $(MAKEFILE_LIST)))),)
define \n


endef
 [ := (
 ] := )
" := \#
' := $(\n)
` := $$
& := ,

^d = $(or $(subst $  ,!0,$(subst $ 	,!+,$(subst !,!1,$1))),!.)
^u = $(subst !1,!,$(subst !+,	,$(subst !0, ,$(subst !.,,$1))))
^n = $(call ^u,$(word $1,$2))
^Y = $(call if,,,$(10))
^v = $(subst !.,!. ,$(filter-out %!,$(subst !. ,!.,$(foreach n,$(wordlist $N,9,1 2 3 4 5 6 7 8),$(call ^d,$($n)))$(if $9, $9) !)))
^av = $(foreach N,1,$(^v))
~^apply = $(call ^Y,$(call ^n,1,$2),$(call ^n,2,$2),$(call ^n,3,$2),$(call ^n,4,$2),$(call ^n,5,$2),$(call ^n,6,$2),$(call ^n,7,$2),$(call ^n,8,$2),$(wordlist 9,9999,$2),$1)
~^f = "$(subst ",\",$(subst \,\\,$1))"
^tp = $(info $1 $(call ~^f,$2))$2
~^tc = $(call $1,$2,$3,$4,$5,$6,$7,$8,$(call ^n,1,$9),$(wordlist 2,9999,$9))
^ta = $(if $(or $1,$2,$3,$4,$5,$6,$7,$8,$9), $(~^f)$(call ~^tc,^ta,$2,$3,$4,$5,$6,$7,$8,$9))
^t = $(info --> ($1$(call ~^tc,^ta,$2,$3,$4,$5,$6,$7,$8,$9)))$(call ^tp,<-- $1:,$(call ~^tc,$1,$2,$3,$4,$5,$6,$7,$8,$9))
define ~esc-LHS
$`(if ,,$(subst $],$`],$(subst $[,$`[,$(subst 
,$`',$(subst #,$`",$(subst $`,$`$`,$1))))))
endef
define ^set
$(eval $(call ~esc-LHS,$1) :=$` $(subst 
,$`',$(subst #,$`",$(subst $`,$`$`,$2))))$3
endef
define ^fset
$(and $(eval define $(call ~esc-LHS,$1)
$(subst \$ 
,\$` 
,$(subst define,$` define,$(subst endef,$` endef,$2
)))endef
)1,$3)
endef
$(if ,, ) := 
define ^E
$(subst $`,$`$2,$`(if ,,$(subst 
,$`',$(subst $[,$`[,$(subst $],$`],$(subst $`,$``,$1))))))
endef
~apply = $(call ~^apply,$1,$2)
~promote = $(call ^u,$1)
~demote = $(call ^d,$1)
~nth = $(call ^n,$1,$2)
~set-global = $(call ^set,$1,$2,$3)
~set-rglobal = $(call ^fset,$1,$2,$3)
~add-hook = $(call ^set,~*hooks*,$(~*hooks*) $1=$2)
~run-hooks = $(foreach funcname,$(patsubst $1=%,%,$(filter $1=%,$(~*hooks*))),$(call $(funcname)))
^tags := 
^add-tags = $(call ^set,^tags,$(^tags) $(filter-out $(^tags),$1))
~^required-files := ///runtime.min
^require = $(foreach ^file,$(filter-out $(~^required-files),$(or $(word 1,$(foreach f,$(SCAM_MODS),$(if $(filter $(notdir $1),$(notdir $(basename $f))),$f))),$(if $(if $(filter-out u%,$(flavor ///$(notdir $1).min)),1),///$(notdir $1).min,$1.min))),$(and $(call ^set,~^required-files,$(~^required-files) $(^file))1,$(if $(findstring R,$(SCAM_DEBUG)),$(info require: $(^file)))1,$(if $(filter ///%,$(^file)),$(eval $(value $(^file))),$(eval include $(^file)))1,$(call ~run-hooks,load)1,$(if $(findstring Rx,$(SCAM_DEBUG)),$(info exited: $(^file)))))
define ~start
$(if $(if $(*started*),,1),$(and $(call ^set,*started*,1)1,$(if $(if $(filter-out u%,$(flavor ///trace.min)),1),$(call ^require,trace))1,$(call ^require,$(notdir $1))1,$(call ^Y,$(call $2,$3),,,,,,,,,$`(eval .DEFAULT_GOAL :=
.PHONY: .scam/-exit
.scam/-exit: $`(.DEFAULT_GOAL); @exit '$`(or $`(subst ',,$`(strip $`1)),0)'$``(call ~run-hooks,exit)))))
endef
$(if $(if $(if $(if $(filter-out u%,$(flavor ^start)),1),,1),$(call ^fset,^start,$(value ~start))),)
$(if $(if $(SCAM_MAIN),$(call ~start,$(SCAM_MAIN),,)),)

endef
 
define ///scam-ct.min
# compiled from scam-ct.scm
# Requires: runtime
# Exports: unless&3\~%\x when&3\~%\x ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i r.sav&0\~%\p ^require&1\%\p\1
~r.sav := $(value ^require)
^require = 
$(call ^require,runtime)
~when = !:P0 118 !1:P2!0119!0if $(word 1,$1) $(call ^d,!:P0 128 !1:P2!0129!0begin $(wordlist 2,99999999,$1))
~unless = !:P0 180 !1:P2!0181!0if $(word 1,$1) !1:P2!0186!0nil $(call ^d,!:P0 188 !1:P2!0189!0begin $(wordlist 2,99999999,$1))
$(call ^fset,^require,$(~r.sav))

endef
 
define ///scam.min
# compiled from scam.scm
# Requires: core repl build getopts gen runtime
# Requires: scam-ct
# Exports: main#1 opt-err#1 usage#0`or`more begin-block|igen\1 resolve|igen\2 builtin-names&0\~%\i env-rewind|igen\2 use-module|igen\1 require-module|igen\2 env-export|igen\1 check-argc|igen\3 err-expected|igen\5`or`6`or`7 compile-warn|igen\2`or`3`or`4`or`5 gen-error|igen\2`or`more gensym|igen\2 gensym-name|igen\3 gen-global-name|igen\2 il-promote|igen\1 il-demote|igen\1 il-concat|igen\1 NoOp&2(1134{1135<IString@1137<>.\igen *compile-mods*&0\~%\i *compile-outfile*&0\~%\i *compile-file*&0\~%\i *compile-subject*&0\~%\i MacroMarkerKey&2\':P1`804`:m\igen LambdaMarkerKey&2\':P1`788`:\igen NoGlobalName&2\':P1`548`:\igen EDefn.is-public?&1\:\igen\1\defn(524{525<filter@527<x)531}532]EDefn.scope}534]defn EDefn.scope&1\:\igen\1\defn(464{465<word@467<3{469<defn EVar&4\S`W\i\':EDefn0 EFunc&4\S`W`S`L\i\':EDefn1 ESMacro&4\S`W\i\':EDefn2 EXMacro&4\S`W\i\':EDefn3 ERecord&4\S`W`S\i\':EDefn4 EBuiltin&4\S`W`S\i\':EDefn5 EIL&4\S\i\':EDefn6 EArg&4\W\i\':EDefn7 EMarker&4\W\i\':EDefn8 IString&4\S\i\':IL0 IVar&4\S\i\':IL1 IBuiltin&4\W`L\i\':IL2 ICall&4\S`L\i\':IL3 ILocal&4\W`W\i\':IL4 IFuncall&4\L\i\':IL5 IConcat&4\L\i\':IL6 IBlock&4\L\i\':IL7 ILambda&4\S\i\':IL8 IEnv&4\S`L\i\':IL9 getopts|i%\3 build|i%\3 repl-file|irepl\1 repl-rep|irepl\2 repl|i%\0 *2&0\~%\i *1&0\~%\i intersperse|icore\2 foldr|icore\3 foldl|icore\3 index-of|icore\2 assoc&1\:\icore\2\key`vec(5130{5131<%-initial)5133}5134]subst<[:P1]5136][1<[:P1]5140][11<[:P0]5144"0[0vector"5145[0key{5149<vec assoc-vec&1\:\icore\2\key-vec`vec(5095{5096<assoc-initial)5098}0]vector}5099]key-vec{5102<vec assoc-initial|icore\2 sort-by|icore\2 memoize|icore\1 1!Q|icore\1 split|icore\2 uniq|icore\1 see|icore\2 fexpect&1\:\icore\2\a`b(3883{3884<expect-x)3886}3887]format}3889]a)3892}3893]format}3895]b)3898}3899]current-file-line expect&1\:\icore\2\a`b(3843{3844<%-x{3846<a{3848<b)3850}3851]current-file-line expect-x|icore\3 printf|icore\1`or`more sprintf|icore\1`or`more vsprintf|icore\2 format|icore\1 format-add|icore\1 format|icore\1 hash-keys|icore\1 hash-compact|icore\1`or`2 hash-get|icore\2`or`3 hash-find|icore\2 hash-value|icore\1\entry(2078{2079<nth@2081<2)2083}2084]subst<[:P1]2086][1=<[:P1]2090][0}2094]entry hash-key|icore\1\entry(2027{2028<promote)2030}2031]subst<[:P1]2033][18<[:P1]2037]!p<[:P0]2041"2042[0word][1:P1[02044[01][1:P0[02046[0[11:P2[102047[10subst[0[11:P1[102049[10[111=[0[11:P1[102053[10[110[0[11:P2[102057[10entry hash-bind|icore\2`or`3 append|icore\0`or`more filtersub&1\:\icore\3\pat`repl`str(1767{1768<patsubst{1770<pat{1772<repl)1774}1775]filter}1777]pat}1779]str natural?|icore\1 numeric?|icore\1 while|icore\3 reverse|icore\1 indices&1\:\icore\1\list(592{593<%-x{595<list@597<1 vec-or|icore\1\vec(501{502<first)504}505]filter-out<[:P0]507"0[0vector][1:P1[0508[0[1.}512]vec select-words|icore\2 select-vec|icore\2 map-call|icore\2 butlast|icore\1 strip-vec|icore\1\vec(304{305<filter@307<!p{311<vec last|icore\1\vec(264{265<promote)267}268]%word}270]vec conj|icore\2 cons|icore\2 concat-vec|icore\1`or`2 xor|icore\2 identity|icore\1\a\':P2`95`a eq?|icore\2 ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
$(call ^require,core)
$(call ^require,repl)
$(call ^require,build)
$(call ^require,getopts)
$(call ^require,gen)
define ~usage
$(and $(if $1,$(info scam: $(call ~vsprintf,$1,$(foreach N,2,$(^v)))))1,$(info Usage:

    scam [-i]              : enter interactive mode
    scam -o EXE FILE...    : build an executable from SRC
    scam -e EXPR           : eval and print value of expression
    scam -r MAK            : load and execute executable file MAK
    scam [-x] FILE ARG...  : compile and execute FILE

Options:

  --no-trace : Omit tracing functionality.  This will produce a slightly
               smaller executable.
)1,$(if $1,1))
endef
~opt-err = $(call ~usage,Unrecognized command option '%s',$1)
~main = $(call ^Y,$(call ~getopts,$1,-e= -h -i -r= -o= --symbols --boot --no-trace -x=...,$(value ~opt-err)),,,,,,,,,$`(if $`(call ~hash-get,o,$`(call ~nth,2,$`1)),$`(call ~build,$`(call ~hash-get,o,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1),$`(call ~nth,2,$`1)),$`(if $`(call ~hash-get,h,$`(call ~nth,2,$`1)),$`(call ~usage),$`(if $`(call ~hash-get,e,$`(call ~nth,2,$`1)),$`(call ~repl-rep,$`(call ~hash-get,e,$`(call ~nth,2,$`1)),),$`(if $`(call ~hash-get,r,$`(call ~nth,2,$`1)),$`(eval include $`(call ~hash-get,r,$`(call ~nth,2,$`1))),$`(if $`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)),$`(if $`(call ~eq?,$`(call ~gen-global-name,main,),~main),$`(and $`(info scam: -x not supported; namespace collision)1,1),$`(and $`(call ~repl-file,$`(call ^u,$`(word 1,$`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)))))1,$`(call ~run-hooks,load)1,$`(call $`(call ~gen-global-name,main,),$`(wordlist 2,99999999,$`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)))))),$`(call ~repl)))))))

endef
 
define ///trace.min
# compiled from trace.scm
# Requires: runtime
# Requires: scam-ct
# Exports: trace#1 trace-dump#0 trace-rev#1 trace-check#0 *traces-active*&0\~%\p trace-instrument#3 trace-match-funcs#1 trace-info#1`or`2`or`3`or`4`or`5 trace-repeater#3 list-of#1`or`2 trace-n2a#1 trace-digits#1 *traces*&0\~%\p variables&2(489{490<filter-out{492<*trace-ignore-vars*)494}495]subst<[:P1]497]!p<[:P1]501]!O!P}506].VARIABLES\p *trace-ignore-vars*&0\~%\p .VARIABLES&0\%\p SCAM_PRE&0\%\p SCAM_TRACE&0\%\p ^tags&0\%\i run-hooks|iruntime\1 add-hook|iruntime\2 bound?&1\:\iruntime\1\var(1963{1964<if)1966}1967]filter-out<[:P1]1969]u!p<[:P0]1974"1975[0flavor"1977[0var@1981<1 rrest&1\:\iruntime\1\vec(1915{1916<nth-rest@1918<3{1920<vec rest&1\:\iruntime\1\vec(1893{1894<nth-%@1896<2{1898<vec first&1\:\iruntime\1\vec(1867{1868<^u)1870}1871]word<[:P1]1873]1}1875]vec nth-rest&1\:\iruntime\2\n`vec(1843{1844<wordlist{1846<n@1848<99999999{1850<vec not&1\:\iruntime\1\v(1813{1814<if{1816<v{1818<nil@1820<1 nil&2\':P1`1796`'.\iruntime set-rglobal|iruntime\2`or`3 set-global|iruntime\2`or`3 nth|iruntime\2 demote|iruntime\1 promote|iruntime\1 apply|iruntime\2 esc-LHS|iruntime\1 SCAM_DEBUG&0\%\i SCAM_MODS&0\%\i unless&3\~%\i when&3\~%\i
~*trace-ignore-vars* := 
~*traces* := 
override SCAM_PRE := $(value SCAM_PRE)
^K = $(eval ^K_$0:=$(subst ioooooooooo,oi,$(^K_$0:o%=io%)o))
~trace-digits = $(if $(if $(findstring i,$1),,1),$(call ~trace-digits,i$1),$(if $(findstring ioooooooooo,$1),$(call ~trace-digits,$(subst ioooooooooo,oi,$1)),$(subst $  ,,$(wordlist $(words $(subst i, i,$1)),99,. . . . . . . . $(foreach d,$(subst i, i,$1),$(words $(subst i,,$(subst o, o,$d))))))))
~trace-n2a = $(if $(if $(filter i%,$1),,1),$(call ~trace-n2a,i$1),$(if $(findstring ioooooooooo,$1),$(call ~trace-n2a,$(subst ioooooooooo,oi,$1)),$(subst 10,A,$(words $(subst i, i,$1)))!0$(subst $  ,,$(foreach d,$(subst i, i,$1),$(words $(subst i,,$(subst o, o,$d)))))))
~list-of = $(if $(word $1,$2),$2,$(call ~list-of,$1,$2 x))
~trace-repeater = $(subst NAME,$1,$(subst N-1,$(wordlist 2,99999999,$(call ~list-of,$(or $2,11))),$(if $3,$`(if $`(^X),$`(call if,,,$`(value NAME)),$`(if $`(foreach ^X,N-1,$`(if $`(NAME),)),)$`(foreach ^X,0,$`(NAME))),$`(NAME)$`(if $`(foreach ^xx,N-1,$`(NAME)),))))
~trace-info = $(info TRACE: $1$2$3$4$5)
~trace-match-funcs = $(foreach v,$(if $(findstring %,$1),$(filter $1,$(filter-out $(~*trace-ignore-vars*),$(subst %,(),$(.VARIABLES)))),$1),$(if $(filter recur%,$(flavor $v)),$v))
~trace-instrument = $(if $(filter v,$1),$(and $(call ~trace-info,$2, [,$(flavor $2),] = ,$(value $2))1,$3),$(if $(filter c,$1),$`(^K)$3,$(if $(filter x% X%,$1),$(and $(call ~set-rglobal,$2~0~,$3)1,$(call ~trace-repeater,$2~0~,$(patsubst x%,%,$(subst X,x,$1)),$(filter X%,$1))),$(if $(filter p,$1),$(or $(SCAM_PRE),$(call ~trace-info,SCAM_PRE undefined; needed for ,$2,:p))$3,$(if $(filter t,$1),$(subst CODE,$3,$`(info --> ($`0$`(^ta)))$`(call ^tp,<-- $`0:,CODE)),$(and $(call ~trace-info,Unknown action: ',$1,')1,$3))))))
~*traces-active* := 
~trace-check = $(call ^set,~*traces-active*,$(strip $(~*traces-active*) $(foreach w,$(~*traces*),$(foreach name,$(call ~trace-match-funcs,$(firstword $(subst :, % ,$w))),$(foreach action,$(or $(wordlist 2,99999999,$(subst :, ,.$w)),t),$(if $(if $(filter $(name):$(patsubst x%,x,$(subst X,x,$(action))),$(~*traces-active*)),,1),$(and $(call ~set-rglobal,$(name),$(call ~trace-instrument,$(action),$(name),$(value $(name))))1,$(name):$(patsubst x%,x,$(subst X,x,$(action))))))))))
~trace-rev = $(if $1,$(call ~trace-rev,$(wordlist 2,99999999,$1)) $(firstword $1))
~trace-dump = $(and $(foreach s,$(foreach s,$(~*traces*),$(word 1,$(subst :, ,$s))),$(if $(if $(filter $s,$(foreach s,$(~*traces-active*),$(word 1,$(subst :, ,$s)))),,1),$(call ~trace-info,spec ',$s,' did not match any functions.)))1,$(if $(filter %c,$(~*traces-active*)),$(and $(call ~trace-info,function invocations)1,$(foreach r,$(call ~trace-rev,$(sort $(foreach V,$(filter ^K_%,$(.VARIABLES)),$(call ~trace-digits,$(value $V))$(patsubst ^K_%,::%,$V)))),$(call ~trace-info,$(subst ., ,$(word 1,$(subst ::, ,$r))), : ,$(word 2,$(subst ::, ,$r)))))))
~trace = $(and $(call ^set,~*traces*,$(~*traces*) $1)1,$(call ~trace-check))
~*trace-ignore-vars* := $(filter-out $(~*trace-ignore-vars*),$(subst %,(),$(.VARIABLES)))
$(if $(call ~trace,$(SCAM_TRACE)),)
$(if $(call ~add-hook,load,~trace-check),)
$(if $(call ~add-hook,exit,~trace-dump),)

endef
$(eval $(value ///runtime.min))
$(call ^start,///scam,~main,$(SCAM_ARGS))

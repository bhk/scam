#!/bin/bash
:; for v in "${@//!/!1}" ; do v=${v// /!0} ; v=${v//	/!+}; a[++n]=${v:-!.} ; done ; SCAM_ARGS=${a[*]} exec make --no-print-directory -j ${SCAM_JOBS:-9} -f"$0"


define ///build.min
# compiled from build.scm
# Requires: core io parse compile gen runtime
# Requires: scam-ct
# Exports: build!=!1!cEDefn1,~build,x,3, prefix-of!=!1!cEDefn1,!c,p,2,sym;name,!2!cP0;3956;!3!cP2:3957:subst;!3!cP2:3959:name;!3!cP1:3961:!3.;!3!cP0:3964:!4!cP2@3965@global-name:!4!cP2@3967@sym exe-rules!=!1!cEDefn1,~exe-rules,p,5, mmap-rules!=!1!cEDefn1,~mmap-rules,p,2, mmap-all-deps!=!1!cEDefn1,~mmap-all-deps,p,2, mmap-all-requires!=!1!cEDefn1,~mmap-all-requires,p,2, link-rule!=!1!cEDefn1,~link-rule,p,6, test-rule!=!1!cEDefn1,~test-rule,p,4, compile-rule!=!1!cEDefn1,~compile-rule,p,8, rule!=!1!cEDefn1,~rule,p,4, scan-modules!=!1!cEDefn1,~scan-modules,p,2;or;3, scan-deps!=!1!cEDefn1,~scan-deps,p,2, if-bundled!=!1!cEDefn1,~if-bundled,p,1, if-bound!=!1!cEDefn1,~if-bound,p,1, if-exists!=!1!cEDefn1,~if-exists,p,1, mmap-okfiles!=!1!cEDefn1,!c,p,2,mmap;names,!2!cP0;1785;!3!cP2:1786:addsuffix;!3!cP1:1788:.ok;!3!cP0:1792:!4!cP2@1793@mmap-objects:!4!cP2@1795@mmap:!4!cP0@1797@!5!cP2!401798!40mmap-testmods@!5!cP2!401800!40mmap@!5!cP2!401802!40names mmap-testmods!=!1!cEDefn1,!c,p,2,mmap;names,!2!cP0;1751;!3!cP2:1752:foreach;!3!cP2:1754:m;!3!cP2:1756:names;!3!cP0:1758:!4!cP2@1759@mod-testmod:!4!cP0@1761@!5!cP2!401762!40assoc@!5!cP2!401764!40m@!5!cP2!401766!40mmap mmap-minfiles!=!1!cEDefn1,!c,p,2,mmap;names,!2!cP0;1720;!3!cP2:1721:filter-out;!3!cP1:1723:///%;!3!cP0:1728:!4!cP2@1729@mmap-objects:!4!cP2@1731@mmap:!4!cP2@1733@names mmap-objects!=!1!cEDefn1,!c,p,2,mmap;names,!2!cP0;1686;!3!cP2:1687:foreach;!3!cP2:1689:m;!3!cP2:1691:names;!3!cP0:1693:!4!cP2@1694@mod-object:!4!cP0@1696@!5!cP2!401697!40assoc@!5!cP2!401699!40m@!5!cP2!401701!40mmap mmap-add!=!1!cEDefn1,!c,p,8,mmap;modname;source;object;testmod;requires;uses;is-boot,!2!cP0;1647;!3!cP2:1648:cons;!3!cP0:1650:!4!cP2@0@vector:!4!cP2@1651@modname:!4!cP2@1653@source:!4!cP2@1655@object:!4!cP2@1657@testmod:!4!cP2@1659@requires:!4!cP2@1661@uses:!4!cP2@1663@is-boot;!3!cP2:1666:mmap mod-deps!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1606;!3!cP2:1607:promote;!3!cP0:1609:!4!cP2@1610@wordlist:!4!cP1@1612@5:!4!cP1@1614@6:!4!cP2@1616@mod mod-is-boot!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1586;!3!cP2:1587:nth;!3!cP1:1589:7;!3!cP2:1591:mod mod-uses!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1567;!3!cP2:1568:nth;!3!cP1:1570:6;!3!cP2:1572:mod mod-requires!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1548;!3!cP2:1549:nth;!3!cP1:1551:5;!3!cP2:1553:mod mod-testmod!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1529;!3!cP2:1530:nth;!3!cP1:1532:4;!3!cP2:1534:mod mod-object!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1510;!3!cP2:1511:nth;!3!cP1:1513:3;!3!cP2:1515:mod mod-source!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1491;!3!cP2:1492:nth;!3!cP1:1494:2;!3!cP2:1496:mod mod-name!=!1!cEDefn1,!c,p,1,mod,!2!cP0;1472;!3!cP2:1473:nth;!3!cP1:1475:1;!3!cP2:1477:mod scan-object!=!1!cEDefn1,~scan-object,p,1, scan-source!=!1!cEDefn1,~scan-source,p,1, echo-cmd!=!1!cEDefn1,~echo-cmd,p,0;or;more, *quiet*!=!1!cEDefn0,~*quiet*,p *self*!=!1!cEDefn0,~*self*,p link!=!1!cEDefn1,~link,p,5, epilogue!=!1!cEDefn1,!c,p,3,main-mod;main-func;rt,!2!cP0;822;!3!cP2:823:concat;!3!cP1:825:$(eval@$(value@;!3!cP0:836:!4!cP2@837@bundle-var:!4!cP2@839@rt;!3!cP1:842:))!n;!3!cP1:848:$(call@^start!a;!3!cP0:857:!4!cP2@858@bundle-var:!4!cP2@860@main-mod;!3!cP1:863:!a;!3!cP2:867:main-func;!3!cP1:869:!a$(SCAM_ARGS))!n prologue!=!1!cEDefn2,!2!cP1;792;#!3/bin/bash!n!c!b:for:v:in:"${!e//!3/!4}":!b:do:v=${v//:/@}:!b:v=${v//!2+/!3+}!b:a[++n]=${v!c-!3.}:!b:done:!b:SCAM_ARGS=${a[*]}:exec:make:--no-print-directory:-j:${SCAM_JOBS!c-9}:-f"$0"!n!n,p read-object!=!1!cEDefn1,~read-object,p,1, bundle-var!=!1!cEDefn1,!c,p,1,file,!2!cP0;722;!3!cP2:723:concat;!3!cP2:725:bundle-dir;!3!cP0:727:!4!cP2@728@notdir:!4!cP2@730@file bundled?!=!1!cEDefn1,!c,p,1,path,!2!cP0;688;!3!cP2:689:filter;!3!cP0:691:!4!cP2@692@concat:!4!cP2@694@bundle-dir:!4!cP1@696@%;!3!cP2:701:path bundle-path!=!1!cEDefn1,!c,p,1,source,!2!cP0;656;!3!cP2:657:concat;!3!cP2:659:bundle-dir;!3!cP0:661:!4!cP2@662@modnames-of:!4!cP2@664@source;!3!cP1:667:.min bundle-dir!=!1!cEDefn2,!2!cP1;634;///,p modnames-of!=!1!cEDefn1,~modnames-of,p,1, strip-comments!=!1!cEDefn1,~strip-comments,p,1, skip-comments!=!1!cEDefn1,~skip-comments,p,1, traverse-graph!=!1!cEDefn1,~traverse-graph,p,3, dbg-print!=!1!cEDefn1,~dbg-print,p,3, resolve-mod!=!1!cEDefn1,~resolve-mod,p,2, clean-path!=!1!cEDefn1,!c,p,1,f,!2!cP0;264;!3!cP2:265:patsubst;!3!cP1:267:./%;!3!cP1:272:%;!3!cP0:276:!4!cP2@277@subst:!4!cP1@279@/./:!4!cP1@283@/:!4!cP2@287@f begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 compile-file!=!1!cEDefn1,~compile-file,icompile,6 compile-prelude!=!1!cEDefn1,~compile-prelude,icompile,1 compile-text!=!1!cEDefn1,~compile-text,icompile,4 ct-mod!=!1!cEDefn2,!2!cP1;194;scam-ct,icompile rt-mod!=!1!cEDefn2,!2!cP1;175;runtime,icompile parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 file-exists?!=!1!cEDefn1,~file-exists?,iio,1 read-lines!=!1!cEDefn1,~read-lines,iio,1;or;2;or;3 read-file!=!1!cEDefn1,~read-file,iio,1 write-file!=!1!cEDefn1,~write-file,iio,2 getline!=!1!cEDefn1,~getline,iio,1 shell!1!=!1!cEDefn1,~shell!2,iio,1 printn!=!1!cEDefn1,~printn,iio,0;or;more echo-command!=!1!cEDefn1,~echo-command,iio,1 quote-sh-arg!=!1!cEDefn1,~quote-sh-arg,iio,1 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,compile)
$(call ^require,gen)
~resolve-mod = $(patsubst ./%,%,$(subst /./,/,$(dir $1)$2$(suffix $1)))
~dbg-print = $(and $(if $(findstring $1,$(value SCAM_DEBUG)),$(call ~printf,$2,$3))1,$3)
~traverse-graph = $(if $(call ^u,$(word 1,$1)),$(call ~cons,$(call ^u,$(word 1,$1)),$(call ~traverse-graph,$(call ~append,$(wordlist 2,99999999,$1),$(filter-out $(call ~append,$1,$3),$(call ^Y,$(call ^u,$(word 1,$1)),,,,,,,,,$2))),$2,$(call ~append,$(call ^u,$(word 1,$1)),$3))))
define ~skip-comments
$(if $(or $(and $1,$(if $(call ^u,$(word 1,$1)),,1)),$(filter #%,$(word 1,$(call ^u,$(word 1,$1))))),$(call ~skip-comments,$(wordlist 2,99999999,$1)),$1)
endef
define ~strip-comments
$(call ~concat-vec,$(call ~skip-comments,$(call ~split,
,$1)),
)
endef
~modnames-of = $(basename $(notdir $1))
~read-object = $(if $(filter ///%,$1),$(value ///$(notdir $1)),$(call ~read-file,$1))
define ~link
$(and $(call ~write-file,$1,#!/bin/bash
:; for v in "$`{@//!/!1}" ; do v=$`{v// /!0} ; v=$`{v//	/!+}; a[++n]=$`{v:-!.} ; done ; SCAM_ARGS=$`{a[*]} exec make --no-print-directory -j $`{SCAM_JOBS:-9} -f"$`0"

$(foreach obj,$2,
$ define ///$(notdir $(call ^u,$(obj)))
$(call ^Y,$(call ~read-object,$(call ^u,$(obj))),,,,,,,,,$(if $5,$(value ~identity),$(value ~strip-comments)))
$ endef
)$`(eval $`(value ///$(notdir $4)))
$`(call ^start,///$(notdir $3),$(call ~gen-global-name,main,),$`(SCAM_ARGS))
)1,$(shell chmod +x $(call ~quote-sh-arg,$1)))
endef
~*self* := $(firstword $(MAKEFILE_LIST))
~*quiet* := $(if $(findstring M,$(SCAM_DEBUG)),,@)
~echo-cmd = $(subst $`,$`$`,@ echo $(call ~quote-sh-arg,$(call ~concat-vec,$(foreach N,1,$(^v)))))
~scan-source = $(call ^Y,$(shell sed -E 's/ //g;s/^\$[(require|use)"([^"]*)".*|.*/\1\2/g;/../!d' $(call ~quote-sh-arg,$1)),,,,,,,,,$`(filter-out !.,$`(foreach symbol,require% use%,$`(call ~demote,$`(foreach w,$`(patsubst $`(symbol),%,$`(filter $`(symbol),$`1)),$`(call ~demote,$`(call ~resolve-mod,$(call ^E,$1),$`w)))))))
define ~scan-object
$(call ^Y,$(wordlist 1,4,$(call ~split,
,$(call ~read-object,$1))),,,,,,,,,$`(foreach key,Requires Uses,$`(call ^d,$`(foreach m,$`(call ~promote,$`(patsubst $`(call ^d,# $`(key): %),%,$`(filter $`(call ^d,# $`(key): %),$`1))),$`(call ~resolve-mod,$(call ^E,$1),$`m)))))
endef
~if-exists = $(wildcard $1)
~if-bound = $(if $(if $(filter-out u%,$(flavor $1)),1),$1)
~if-bundled = $(call ~if-bound,///$(call ~modnames-of,$1).min)
~scan-deps = $(if $1,$(call ~scan-source,$1),$(call ~scan-object,$2))
~scan-modules = $(if $(if $(call ^u,$(word 1,$2)),,1),$3,$(if $(call ~assoc-initial,$(subst !,!1,$(call ^d,$(call ~modnames-of,$(call ^u,$(word 1,$2))))),$3),$(call ~scan-modules,$1,$(wordlist 2,99999999,$2),$3),$(call ^Y,$1,$(wordlist 2,99999999,$2),$3,$(call ~modnames-of,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(or $(if $(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(call ~hash-get,odir,$1)$(call ~modnames-of,$(call ^u,$(word 1,$2))).min),$(call ~if-exists,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(basename $(call ^u,$(word 1,$2))).min),$(if $(call ~hash-get,rebundle,$1),$(call ~if-bundled,$(call ^u,$(word 1,$2)))),$(call ^u,$(word 1,$2))),$(call ~scan-deps,$(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(or $(if $(call ~if-exists,$(filter %.scm,$(call ^u,$(word 1,$2)))),$(call ~hash-get,odir,$1)$(call ~modnames-of,$(call ^u,$(word 1,$2))).min),$(call ~if-exists,$(call ^u,$(word 1,$2))),$(call ~if-exists,$(basename $(call ^u,$(word 1,$2))).min),$(if $(call ~hash-get,rebundle,$1),$(call ~if-bundled,$(call ^u,$(word 1,$2)))),$(call ^u,$(word 1,$2)))),,,$`(call ~scan-modules,$`1,$`(call ~append,$`2,$`(call ~promote,$`7),$`(call ~if-exists,$`(patsubst %.scm,%-q.scm,$`5))),$`(call ~cons,$`(call ^d,$`4) $`(call ^d,$`5) $`(call ^d,$`6) $`(call ^d,$`(call ~modnames-of,$`(call ~if-exists,$`(patsubst %.scm,%-q.scm,$`5)))) $`(call ^d,$`(call ~modnames-of,$`(call ~append,$`(call ~nth,1,$`7),$`(if $`(call ~hash-get,boot,$`1),,runtime.scm)))) $`(call ^d,$`(call ~modnames-of,$`(call ~append,$`(call ~nth,2,$`7),$`(if $`(call ~hash-get,boot,$`1),,scam-ct.scm)))) $`(call ^d,$`(call ~hash-get,boot,$`1)),$`3)))))
define ~rule
$1: $2$(if $3, | )$3$(call ~concat-vec,$(call ~cons,,$(foreach cmd,$4,$(call ^d,$(if $(filter @%,$(word 1,$(call ^u,$(cmd)))),$(call ^u,$(cmd)),$(~*quiet*)$(call ^u,$(cmd)))))),
	)


endef
~compile-rule = $(call ~rule,$1,$(call ~append,$2,$3,$(~*self*)),$4,$(call ^d,@ true $(call ^Y,$2,$5,$6,$7,$8,,,,,$``(and $``(info => compiling $(call ^E,$1,`))1,$``(call ~compile-file,$`(call ^E,$`1),$(call ^E,$1,`),$`(call ^E,$`5),$`(call ^E,$`2),$`(call ^E,$`3),$`(call ^E,$`4))))))
~test-rule = $(call ~rule,$1,$2,,$(call ^d,$(call ~echo-cmd,=> running ,$(basename $2))) $(call ^d,$(MAKE) -s -f $(if $(filter ///%,$3),$(call ~quote-sh-arg,$(~*self*)),$3) SCAM_MAIN='$(patsubst %.min,%,$2)' SCAM_MODS='$4') $(call ^d,touch $1))
~link-rule = $(call ~rule,$1,$2,$3,$(call ^d,@ true $(call ^Y,$(call ~sort-by,$`(notdir $`1),$4),$(call ~modnames-of,$(call ^u,$(word 1,$4))),,,,,,,,$``(and $``(info => linking $(call ^E,$1,`))1,$``(call ~link,$(call ^E,$1,`),$`(call ^E,$`1),$`(call ^E,$`2),$(call ^E,$5,`),$(call ^E,$6,`))))))
~mmap-all-requires = $(call ^set,~*mmap*,$(call ^set,~*mmap*,$1,$(~*mmap*)),$(call ~traverse-graph,$2,$`(call ~nth,5,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`1)),$`(~*mmap*))),))
~mmap-all-deps = $(call ^set,~*mmap*,$(call ^set,~*mmap*,$1,$(~*mmap*)),$(call ~traverse-graph,$2,$`(call ~promote,$`(wordlist 5,6,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`1)),$`(~*mmap*)))),))
~mmap-rules = $(call ~concat-vec,$(filter-out !.,$(foreach mod,$1,$(call ^d,$(if $(call ~nth,2,$(call ^u,$(mod))),$(if $(filter %.min,$(call ~nth,3,$(call ^u,$(mod)))),$(call ~compile-rule,$(call ~nth,3,$(call ^u,$(mod))),$(call ~nth,2,$(call ^u,$(mod))),$(filter-out ///%,$(foreach m,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod)))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$(filter-out $(call ~nth,3,$(call ^u,$(mod))).ok,$(addsuffix .ok,$(foreach m,$(foreach m,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod)))),$(call ~nth,4,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))),$(filter-out ///%,$(foreach m,$(call ~mmap-all-deps,$1,$(call ~promote,$(wordlist 5,6,$(call ^u,$(mod))))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$(call ~nth,5,$(call ^u,$(mod))),$(call ~nth,6,$(call ^u,$(mod))),$(call ~nth,7,$(call ^u,$(mod))))))$(if $(call ~nth,4,$(call ^u,$(mod))),$(call ~test-rule,$(addsuffix .ok,$(filter-out ///%,$(foreach m,$(call ~nth,4,$(call ^u,$(mod))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))),$(filter-out ///%,$(foreach m,$(call ~nth,4,$(call ^u,$(mod))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1)))),$2,$(filter-out ///%,$(foreach m,$(call ~mmap-all-requires,$1,$(call ^d,$(call ~nth,4,$(call ^u,$(mod))))),$(call ~nth,3,$(call ~assoc-initial,$(subst !,!1,$(call ^d,$m)),$1))))))))),)
~exe-rules = $(call ^Y,$(call ~scan-modules,$(call ~append,$(call ~hash-bind,odir,$(dir $1)),$(call ~hash-bind,rebundle,$(if $(call ~eq?,$(subst apply,,~apply),$(subst compile-file,,~compile-file)),1,$(if $4,,$(error Warning: must use --boot; bundles are unusable))))),$(call ~append,$2,$(if $(if $3,,1),$(subst %,trace,$(if $4,%.scm,///%.min))),$(if $4,$(subst %,scam-ct,$(if $4,%.scm,///%.min)))),$(call ~scan-modules,$(call ~hash-bind,boot,1,$(call ~append,$(call ~hash-bind,odir,$(dir $1)),$(call ~hash-bind,rebundle,$(if $(call ~eq?,$(subst apply,,~apply),$(subst compile-file,,~compile-file)),1,$(if $4,,$(error Warning: must use --boot; bundles are unusable)))))),$(call ^d,$(subst %,runtime,$(if $4,%.scm,///%.min))) $(call ^d,$(subst %,scam-ct,$(if $4,%.scm,///%.min))))),$(notdir $(basename $(call ~append,$2,$(if $(if $3,,1),$(subst %,trace,$(if $4,%.scm,///%.min))),$(if $4,$(subst %,scam-ct,$(if $4,%.scm,///%.min)))))),,,,,,,,$`(call ~link-rule,$(call ^E,$1),$`(filter-out ///%,$`(foreach m,$`2,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))),$`(addsuffix .ok,$`(foreach m,$`(foreach m,$`2,$`(call ~nth,4,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))),$`(foreach m,$`(call ~mmap-all-requires,$`1,$`2),$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$`(foreach m,runtime,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1))),$(call ^E,$5))$`(call ~mmap-rules,$`1,$`(foreach m,runtime,$`(call ~nth,3,$`(call ~assoc-initial,$`(subst !,!1,$`(call ^d,$`m)),$`1)))))
~build = $(eval $(call ~dbg-print,B,Eval: %s,$(call ~rule,.PHONY,,/exe /dir,)$(call ~rule,/exe,,/dir $(call ^d,$1),)$(call ~rule,/dir,,,$(call ^d,mkdir -p $`(dir $(call ^E,$1))))$(call ~exe-rules,$1,$2,$(call ~hash-get,no-trace,$3),$(call ~hash-get,boot,$3),$(call ~hash-get,symbols,$3))))

endef
 
define ///compile.min
# compiled from compile.scm
# Requires: core parse gen gen0 gen1 io macros runtime
# Requires: scam-ct
# Exports: compile-file!=!1!cEDefn1,~compile-file,x,6, construct-file!=!1!cEDefn1,!c,p,5,infile;env;exe;reqs;uses,!2!cP0;406;!3!cP2:407:concat;!3!cP1:409:#@compiled@from@;!3!cP2:418:infile;!3!cP1:420:!n;!3!cP0:424:!4!cP2@425@if:!4!cP2@427@reqs:!4!cP0@429@!5!cP2!40430!40concat@!5!cP1!40432!40#!50Requires!c!50@!5!cP2!40440!40reqs@!5!cP1!40442!40!n;!3!cP0:448:!4!cP2@449@if:!4!cP2@451@uses:!4!cP0@453@!5!cP2!40454!40concat@!5!cP1!40456!40#!50Requires!c!50@!5!cP2!40464!40uses@!5!cP1!40466!40!n;!3!cP0:472:!4!cP2@473@env-export:!4!cP2@475@env;!3!cP2:478:exe compile-prelude!=!1!cEDefn1,~compile-prelude,x,1, compile-text!=!1!cEDefn1,~compile-text,x,4, ct-mod!=!1!cEDefn2,!2!cP1;194;scam-ct,x rt-mod!=!1!cEDefn2,!2!cP1;175;runtime,x file-exists?!=!1!cEDefn1,~file-exists?,iio,1 read-lines!=!1!cEDefn1,~read-lines,iio,1;or;2;or;3 read-file!=!1!cEDefn1,~read-file,iio,1 write-file!=!1!cEDefn1,~write-file,iio,2 getline!=!1!cEDefn1,~getline,iio,1 shell!1!=!1!cEDefn1,~shell!2,iio,1 printn!=!1!cEDefn1,~printn,iio,0;or;more echo-command!=!1!cEDefn1,~echo-command,iio,1 quote-sh-arg!=!1!cEDefn1,~quote-sh-arg,iio,1 gen1!=!1!cEDefn1,~gen1,igen1,2 c0!=!1!cEDefn1,~c0,igen0,2;or;3 c0-block!=!1!cEDefn1,~c0-block,igen0,2 c0-block-cc!=!1!cEDefn1,~c0-block-cc,igen0,3;or;4;or;5 c0-vec!=!1!cEDefn1,~c0-vec,igen0,2 skip-flags!=!1!cEDefn1,~skip-flags,igen0,2 get-flags!=!1!cEDefn1,~get-flags,igen0,2 env-strip!=!1!cEDefn1,~env-strip,igen0,2 block-result!=!1!cEDefn1,~block-result,igen0,3 begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,gen)
$(call ^require,gen0)
$(call ^require,gen1)
$(call ^require,io)
$(call ^require,macros)
~compile-text = $(call ^set,~*compile-subject*,$(call ^set,~*compile-subject*,$(call ~penc,$1),$(~*compile-subject*)),$(call ^set,~*compile-file*,$(call ^set,~*compile-file*,$3,$(~*compile-file*)),$(call ~c0-block-cc,$2,$(call ~parse-subject,$(~*compile-subject*)),$`(call ~conj,$`(call ~gen1,$`2,$(call ^E,$4)),$`1))))
~compile-prelude = $(if $(if $1,,1),$(call ~append,$(call ~require-module,runtime,),$(call ~use-module,scam-ct)))
define ~compile-file
$(and $(if $(findstring B,$(SCAM_DEBUG)),$(call ~printf,compile-file: %s -> %s%s
 mod-files = %s
 reqs = %s
 uses = %s
,$1,$2,$(if $3, [--boot]),$4,$5,$6))1,$(call ^set,~*compile-mods*,$(call ^set,~*compile-mods*,$4,$(~*compile-mods*)),$(call ^Y,$(call ~read-file,$1),$2,$(call ~compile-prelude,$3),,,,,,,$`(call ^Y,$`(call ~compile-text,$`1,$`3,$(call ^E,$1),$`2),$`1,$(call ^E,$1),$`2,,,,,,$``(if $``(call ^u,$``(word 1,$``1)),$``(and $``(foreach e,$``(call ^u,$``(word 1,$``1)),$``(call ^d,$``(info $``(call ~describe-error,$``(call ^u,$``e),$``2,$``3))))1,$``(error $``(subst %S,$``(if $``(call ~eq?,1,$``(words $``(call ^u,$``(word 1,$``1)))),,s),compilation error%S))),$``(call ~write-file,$``4,# compiled from $``3
$``(if $(call ^E,$5,`),# Requires: $(call ^E,$5,`)
)$``(if $(call ^E,$6,`),# Requires: $(call ^E,$6,`)
)$``(call ~env-export,$``(call ~nth,3,$``1))$``(call ~nth,2,$``1)))))))
endef

endef
 
define ///core.min
# compiled from core.scm
# Requires: runtime
# Requires: scam-ct
# Exports: intersperse!=!1!cEDefn1,~intersperse,x,2, foldr!=!1!cEDefn1,~foldr,x,3, foldl!=!1!cEDefn1,~foldl,x,3, index-of!=!1!cEDefn1,~index-of,x,2, assoc!=!1!cEDefn1,!c,x,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,x,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,x,2, sort-by!=!1!cEDefn1,~sort-by,x,2, memoize!=!1!cEDefn1,~memoize,x,1, memoenc!=!1!cEDefn1,~memoenc,p,1;or;2;or;3, mcache!=!1!cEDefn1,~mcache,p,6, 1+!=!1!cEDefn1,~1+,x,1, split!=!1!cEDefn1,~split,x,2, uniq!=!1!cEDefn1,~uniq,x,1, see!=!1!cEDefn1,~see,x,2, fexpect!=!1!cEDefn1,!c,x,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,x,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,x,3, printf!=!1!cEDefn1,~printf,x,1;or;more, sprintf!=!1!cEDefn1,~sprintf,x,1;or;more, vsprintf!=!1!cEDefn1,~vsprintf,x,2, format!=!1!cEDefn1,~format,x,1, format-custom!=!1!cEDefn1,~format-custom,p,2, format-add!=!1!cEDefn1,~format-add,x,1, *format-funcs*!=!1!cEDefn0,~*format-funcs*,p format-record!=!1!cEDefn1,~format-record,p,1, data-foreach!=!1!cEDefn1,~data-foreach,p,4, format-hash!=!1!cEDefn1,~format-hash,p,1, format!=!1!cEDefn1,~format,x,1, hash-compact!=!1!cEDefn1,~hash-compact,x,1;or;2, hash-get!=!1!cEDefn1,~hash-get,x,2;or;3, hash-find!=!1!cEDefn1,~hash-find,x,2, hash-value!=!1!cEDefn1,~hash-value,x,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,x,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,x,2;or;3, append!=!1!cEDefn1,~append,x,0;or;more, filtersub!=!1!cEDefn1,!c,x,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,x,1, numeric?!=!1!cEDefn1,~numeric?,x,1, while!=!1!cEDefn1,~while,x,3, reverse!=!1!cEDefn1,~reverse,x,1, rev-zeroes!=!1!cEDefn1,~rev-zeroes,p,2, rev-by-10s!=!1!cEDefn1,~rev-by-10s,p,2, indices!=!1!cEDefn1,!c,x,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 indices-x!=!1!cEDefn1,~indices-x,p,2, vec-or!=!1!cEDefn1,~vec-or,x,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,x,2, select-vec!=!1!cEDefn1,~select-vec,x,2, map-call!=!1!cEDefn1,~map-call,x,2, butlast!=!1!cEDefn1,~butlast,x,1, strip-vec!=!1!cEDefn1,~strip-vec,x,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,x,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,x,2, cons!=!1!cEDefn1,~cons,x,2, concat-vec!=!1!cEDefn1,~concat-vec,x,1;or;2, xor!=!1!cEDefn1,~xor,x,2, identity!=!1!cEDefn1,~identity,x,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,x,2, SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG,p ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
~eq? = $(if $(findstring 1$1,$(findstring 1$2,1$1)),1)
~identity = $1
~xor = $(if $1,$(if $2,,$1),$2)
~concat-vec = $(call ~promote,$(subst $  ,$(call ~demote,$2),$1))
~cons = $(call ~demote,$1)$(if $2, )$2
~conj = $1$(if $1, )$(call ~demote,$2)
~last = $(call ~promote,$(lastword $1))
~strip-vec = $(filter %,$1)
~butlast = $(wordlist 2,$(words $1),X $1)
~map-call = $(foreach x,$2,$(call ^d,$(call $1,$(call ^u,$x))))
~select-vec = $(filter-out !,$(foreach dx,$2,$(if $(call ^Y,$(call ~promote,$(dx)),,,,,,,,,$1),$(dx),!)))
~select-words = $(foreach a,$(foreach x,$2,$(if $(call ^Y,$x,,,,,,,,,$1),$x)),$a)
~vec-or = $(call ^u,$(word 1,$(filter-out !.,$1)))
~indices-x = $(if $(word $(words $2),$1),$(words $2) $(call ~indices-x,$1,1 $2))
~rev-by-10s = $(if $1,$(if $2,$(foreach p,10 9 8 7 6 5 4 3 2 1,$(call ~rev-by-10s,$(wordlist $(word $p,0 1 2 3 4 5 6 7 8 9)$(patsubst %0,%1,$2),$p$2,$1),$(patsubst 0%,%,$2))),$(foreach p,10 9 8 7 6 5 4 3 2 1,$(word $p,$1))))
~rev-zeroes = $(if $(word 1$21,$1),$(call ~rev-zeroes,$1,0$2),$2)
~reverse = $(wordlist 1,99999999,$(call ~rev-by-10s,$1,$(call ~rev-zeroes,$1,)))
~while-0 = $(if $(filter iiiiiiiiiiiiiiiiiiii,$4),1 $(call ^d,$3),$(if $(call ^Y,$3,,,,,,,,,$1),$(call ~while-0,$1,$2,$(call ^Y,$3,,,,,,,,,$2),i$4),0 $(call ^d,$3)))
~while-N = $(if $(filter 0,$(word 1,$3)),$3,$(if $(filter iii,$5),$(if $(filter 1,$4),$(call ~while-N,$1,$2,$3,$4 0,ii),$3),$(call ~while-N,$1,$2,$(if $4,$(call ~while-N,$1,$2,$3,$(wordlist 2,99999999,$4),),$(call ~while-0,$1,$2,$(call ~nth,2,$3),)),$4,i$5)))
~while = $(if $(call ^Y,$3,,,,,,,,,$1),$(call ^Y,$(call ^Y,$3,,,,,,,,,$2),,,,,,,,,$`(call ~nth,2,$`(call ~while-N,$(call ^E,$1),$(call ^E,$2),$`(call ~while-0,$(call ^E,$1),$(call ^E,$2),$`1,),1,ii))),$3)
~numeric? = $(if $(filter 0% 1% 2% 3% 4% 5% 6% 7% 8% 9%,$(subst -,,$1)),$(if $(patsubst .%,%,$(patsubst %e,%,$(subst 0,,$(patsubst -%,%,$(subst $  ,_,$(subst E0,e,$(subst E-,E,$(subst e,E,$(subst 9,0,$(subst 8,0,$(subst 7,0,$(subst 6,0,$(subst 5,0,$(subst 4,0,$(subst 3,0,$(subst 2,0,$(subst 1,0,$1))))))))))))))))),,$1))
~natural? = $(call ~numeric?,$(subst 0,,$(subst .,~,$(subst -,~,$(subst e,~,$(subst E,~,$1))))))
~append = $(filter %,$1 $2 $3 $4 $5 $6 $7 $8 $(if $(9),$(call ~promote,$(9))))
~hash-bind = $(subst %,!8,$(call ^d,$1))!=$(call ^d,$2)$(if $3, )$3
~hash-key = $(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$1))))
~hash-value = $(call ~nth,2,$(subst !=, ,$1))
~hash-find = $(word 1,$(filter $(subst %,!8,$(call ^d,$1))!=%,$2))
~hash-get = $(call ~nth,2,$(subst !=, ,$(call ~hash-find,$1,$2))$(if $3, x $(call ~demote,$3)))
~hash-compact = $(if $(if $1,,1),$2,$(call ~append,$(word 1,$1),$(call ~hash-compact,$(filter-out $(word 1,$(subst !=,!=% ,$(word 1,$1))),$(wordlist 2,99999999,$1)))))
~format-hash = $(if $(findstring !=,$1),$(if $(call ~eq?,$1,$(foreach w,$1,$(call ~hash-bind,$(call ~nth,1,$(subst !=, ,$w)),$(call ~nth,2,$(subst !=, ,$w))))),{$(call ~concat-vec,$(foreach e,$1,$(call ^d,$(call ~format,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$e))))): $(call ~format,$(call ~nth,2,$(subst !=, ,$e))))),$(if ,,, ))}))
~data-foreach = $(if $2,$(call ~data-foreach,$1,$(wordlist 2,99999999,$2),$(wordlist 2,99999999,$3),$4$(if $4, )$(call ^Y,$(if $(filter L,$(word 1,$2)),$3,$(if $(filter S,$(word 1,$2)),$(call ~nth,1,$3),$(if $(filter W,$(word 1,$2)),$(word 1,$3),$(error bad encoding in ctor pattern)))),$(word 1,$2),,,,,,,,$1)),$4)
~format-record = $(if $(filter !:%,$(word 1,$1)),$(call ^Y,$(call ~hash-get,$(word 1,$1),$(^tags)),$(wordlist 2,99999999,$1),$(word 1,$1),$1,,,,,,$`(and $`1,$`(call ~eq?,$`(filter %,$`4),$`(filter %,$`(call ~data-foreach,$``(if $``(call ~eq?,S,$``2),$``(call ^d,$``1),$``1),$`(wordlist 2,99999999,$`1),$`2,$`3))),($`(call ~nth,1,$`1)$`(if $`(wordlist 2,99999999,$`1), )$`(call ~data-foreach,$``(if $``(and $``(call ~eq?,L,$``2),$``(if $``1,,1)),[],$``(call ~format,$``1)),$`(wordlist 2,99999999,$`1),$`2,)))))
~*format-funcs* := 
~format-add = $(call ^set,~*format-funcs*,$(call ~cons,$1,$(~*format-funcs*)))
~format-custom = $(if $2,$(or $(call ^Y,$1,,,,,,,,,$(call ^u,$(word 1,$2))),$(call ~format-custom,$1,$(wordlist 2,99999999,$2))))
define ~format
$(or $(call ~format-custom,$1,$(~*format-funcs*)),$(if $(findstring !,$1),$(or $(call ~format-hash,$1),$(call ~format-record,$1))),$(if $(or $(findstring !,$1),$(and $(findstring $  ,$1),$(call ~numeric?,$(subst $  ,,$1)))),$(if $(call ~eq?,$1,$(foreach w,$1,$(call ~demote,$(call ~promote,$w)))),[$(foreach w,$1,$(call ~format,$(call ~promote,$w)))])),$(call ~numeric?,$1),"$(subst $ 	,\t,$(subst 
,\n,$(subst ",\",$(subst \,\\,$1))))")
endef
~vsprintf = $(call ~concat-vec,$(foreach w,$(join !. $2,$(subst $  !% !%,%,$(subst %, !%,%s$(call ^d,$1)))),$(if $(findstring !%s,$w),$(subst !%s,,$w),$(if $(findstring !%q,$w),$(call ~cons,$(call ~format,$(call ^u,$(word 1,$(subst !%q,!. ,$w)))),$(word 2,$(subst !%q,!. ,$w))),$(if $(findstring !%,$w),$(subst !%,[unkonwn % escape]%,$w))))))
~sprintf = $(call ~vsprintf,$1,$(foreach N,2,$(^v)))
~printf = $(info $(call ~vsprintf,$1,$(foreach N,2,$(^v))))
define ~expect-x
$(if $(call ~eq?,$1,$2),$(if $(findstring O,$(SCAM_DEBUG)),$(info $3: OK: $1)),$(and $(info $3: error: assertion failed
A: $(call ~format,$1)
B: $(call ~format,$2)

Raw:
A: $1
B: $2
)1,$(if $(if $(findstring K,$(SCAM_DEBUG)),,1),$(error ))))
endef
define ~see
$(if $(findstring $1,$2),1,$(and $(info Expected: $(subst 
,
          ,$1))1,$(info $   Within: $(subst 
,
          ,$2))))
endef
~uniq-x = $(if $1,$(word 1,$1) $(call ~uniq-x,$(filter-out $(word 1,$1),$(wordlist 2,99999999,$1))))
~uniq = $(subst ~1,~,$(subst ~p,%,$(filter %,$(call ~uniq-x,$(subst %,~p,$(subst ~,~1,$1))))))
~split = $(foreach w,$(subst $(or $(subst $ 	,{t},$(subst $  ,{s},$(subst {L,{L},$(subst },{R},$(subst {,{L,$1))))),{}),{} {},$(or $(subst $ 	,{t},$(subst $  ,{s},$(subst {L,{L},$(subst },{R},$(subst {,{L,$2))))),{})),$(call ^d,$(subst {L,{,$(subst {R},},$(subst {L},{L,$(subst {s}, ,$(subst {t},	,$(subst {},,$w))))))))
~1+ = $(if $(filter %1 %2 %3 %4,$1),$(subst 1~,2,$(subst 2~,3,$(subst 3~,4,$(subst 4~,5,$1~)))),$(if $(filter %5 %6 %7,$1),$(subst 5~,6,$(subst 6~,7,$(subst 7~,8,$1~))),$(if $(findstring 9~,$1~),$(call ~1+,$(or $(subst 9~,,$1~),0))0,$(patsubst %0,%1,$(patsubst %8,%9,$1)))))
~mcache = $(and $(if $6,$(info Warning: memoized function passed more than three arguments))1,$(if $(if $(if $(filter-out u%,$(flavor $1)),1),,1),$(call ~set-global,$1,$(call ^Y,$3,$4,$5,,,,,,,$2)))1,$(value $1))
~memoenc = $(if $(or $1,$2,$3),~~$(subst ~,~0,$1)$(call ~memoenc,$2,$3))
~memoize = $(if $(if $(if $(filter-out u%,$(flavor $1)),1),,1),$(info Warning: [memoize-1] function '$1' not defined.),$(call ^Y,$(value $1),*memo$(call ~memoenc,$1),$1,,,,,,,$`(call ~set-rglobal,$`3,$``(call ~mcache,$`(call ^E,$`2)$``(call ~memoenc,$``1,$``2,$``3),$`(call ^E,$`1),$``1,$``2,$``3,$``(or $``4,$``5,$``6,$``7,$``8)))))
~sort-by = $(filter-out %!!,$(subst !!,!! ,$(sort $(foreach w,$2,$(call ~demote,$(call ^Y,$(call ~promote,$w),,,,,,,,,$1))!!$w))))
~assoc-initial = $(call ~promote,$(firstword $(if $(findstring %,$1),$(subst !8,$1,$(filter !8 !8!0%,$(subst $1,!8,$2))),$(filter $1 $1!0%,$2))))
~index-of = $(words $(subst !_, ,$(filter %!|,$(subst !_$(call ^d,$2)!_,!_!| ,!_$(subst $  ,!_,$1)!_))))
~foldl = $(if $(firstword $3),$(call ~foldl,$1,$(call ^Y,$2,$(call ^u,$(word 1,$3)),,,,,,,,$1),$(wordlist 2,99999999,$3)),$2)
~foldr = $(if $(firstword $3),$(call ^Y,$(call ^u,$(word 1,$3)),$(call ~foldr,$1,$2,$(wordlist 2,99999999,$3)),,,,,,,,$1),$2)
~intersperse = $(subst $  , $(call ^d,$1) ,$2)
$(info core ok)

endef
 
define ///escape.min
# compiled from escape.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: protect-define!=!1!cEDefn1,~protect-define,x,1, protect-rhs!=!1!cEDefn1,~protect-rhs,x,1, protect-lhs!=!1!cEDefn1,~protect-lhs,x,1, protect-expr!=!1!cEDefn1,~protect-expr,x,1, protect-arg!=!1!cEDefn1,~protect-arg,x,1, make-balanced!=!1!cEDefn1,~make-balanced,p,2, check-balance!=!1!cEDefn1,~check-balance,p,1, check-balance-r!=!1!cEDefn1,~check-balance-r,p,1, balance!=!1!cEDefn1,~balance,p,1, balance-match!=!1!cEDefn1,~balance-match,p,1, balance-match-r!=!1!cEDefn1,~balance-match-r,p,3, balance2!=!1!cEDefn1,~balance2,p,1, protect-trim!=!1!cEDefn1,~protect-trim,x,1, protect-ltrim!=!1!cEDefn1,~protect-ltrim,x,1, replace-hash!=!1!cEDefn1,~replace-hash,p,1,str,!2!cP0;435;!3!cP2:436:subst;!3!cP1:438:#;!3!cP1:442:$";!3!cP2:447:str replace-nl!=!1!cEDefn1,~replace-nl,p,1,str,!2!cP0;407;!3!cP2:408:subst;!3!cP1:410:!n;!3!cP1:414:$';!3!cP2:419:str quote-hash!=!1!cEDefn1,~quote-hash,p,1, protect-hash2!=!1!cEDefn1,~protect-hash2,p,1, escape!=!1!cEDefn1,~escape,x,1,str,!2!cP0;243;!3!cP2:244:subst;!3!cP1:246:$;!3!cP1:250:$`;!3!cP2:255:str intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
~escape = $(subst $`,$``,$1)
define ~protect-hash2
$(if $(findstring \.#,$1),$(call ~protect-hash2,$(subst \.#,.#\\,$1)),$(subst .#,,$1))
endef
define ~quote-hash
$(if $(findstring #,$1),$(call ~protect-hash2,$(subst #,.#\#,$1)),$1)
endef
define ~replace-nl
$(subst 
,$`',$1)
endef
define ~replace-hash
$(subst #,$`",$1)
endef
~protect-ltrim = $(if $(findstring $(word 1,0$10),0),$` )$1
define ~protect-trim
$(if $(and $(findstring $1,$(wordlist 1,99999999,$1)),$(filter-out 
%,$(word 1,$1)),$(filter-out %
,$(lastword $1))),$1,$(if $1,$`(if ,,$1)))
endef
~balance2 = $(call ~promote,$(if $(findstring !C,$1),$`(if ,,$(subst !C,,$1)),$1))
~balance-match-r = $(if $1,$(call ~balance-match-r,$(word 1,$2),$(wordlist 2,99999999,$2),$(if $(filter !L%,$1),$3 $1,$(if $(and $(filter !R,$1),$(word 2,$3)),$(filter-out %!,$3!)($(subst !L,,$(subst !C,,$(lastword $3)))),$3$1))),$3)
~balance-match = $(call ~balance-match-r,$(word 1,$1),$(wordlist 2,99999999,$1),!.)
~balance = $(call ~balance2,$(subst !L,$`[,$(subst !R,$`],$(subst $  ,,$(call ~balance-match,$(subst $[, !L,$(subst $], !R ,$(subst $(if ,,,),$(if ,,!C,),$(call ~demote,$1)))))))))
~check-balance-r = $(if $(word 2,$1),$(call ~check-balance-r,$(subst $  ,,$(filter-out !L%!R,$(subst !L, !L,$(word 1,$1))))$(wordlist 2,99999999,$1)),$1)
~check-balance = $(call ~check-balance-r,$(subst $],!R .,$(subst $[,!L,$(subst !,,$(subst $ 	,,$(subst $  ,,$1))))))
~make-balanced = $(if $(findstring !,$2),$(call ~balance,$1),$(if $(findstring $(if ,,,),$2),$`(if ,,$1),$1))
~protect-arg = $(if $(or $(findstring $[,$1),$(findstring $],$1),$(findstring $(if ,,,),$1)),$(call ~make-balanced,$1,$(call ~check-balance,$1)),$1)
define ~protect-expr
$(subst 
,$`',$1)
endef
define ~protect-lhs
$(subst #,$`",$(subst X,$(subst 
,$`',$(call ~protect-arg,$1)),$(if $(or $(findstring :,$1),$(findstring =,$1),$(if $(findstring $1,$(wordlist 1,99999999,$1)),,1),$(filter ifeq ifneq ifdef ifndef else endif define endef override include sinclude -include export unexport private undefine vpath,$1)),$`(if ,,X),X)))
endef
define ~protect-rhs
$(call ~quote-hash,$(call ~protect-ltrim,$(subst 
,$`',$1)))
endef
define ~protect-define
$(if $(or $(findstring define,$1),$(findstring endef,$1),$(findstring \,$1)),$(subst |1,|,$(subst |0, ,$(subst $  ,
,$(foreach w,$(call ~split,
,$1),$(subst $  ,|0,$(subst |,|1,$(if $(filter define endef,$(word 1,$(call ^u,$w))),$` )$(call ^u,$w)$(if $(filter %\,$w),$` ))))))),$1)
endef

endef
 
define ///gen.min
# compiled from gen.scm
# Requires: core io parse escape runtime
# Requires: scam-ct
# Exports: begin-block!=!1!cEDefn1,~begin-block,x,1, resolve!=!1!cEDefn1,~resolve,x,2, base-env!=!1!cEDefn0,~base-env,p builtin-names!=!1!cEDefn0,~builtin-names,x builtins-3!=!1!cEDefn0,~builtins-3,p builtins-2!=!1!cEDefn0,~builtins-2,p builtins-1!=!1!cEDefn0,~builtins-1,p env-rewind!=!1!cEDefn1,~env-rewind,x,2, env-rewind-x!=!1!cEDefn1,~env-rewind-x,p,2, use-module!=!1!cEDefn1,~use-module,x,1, require-module!=!1!cEDefn1,~require-module,x,2, mod-find!=!1!cEDefn1,~mod-find,p,1, env-from-file!=!1!cEDefn1,~env-from-file,p,2, *dummy-env*!=!1!cEDefn0,~*dummy-env*,p env-load!=!1!cEDefn1,!c,p,1,filename,!2!cP0;3108;!3!cP2:3109:define;!3!cP4:3111:!3!cP0:3112:!4!cP2@3113@read-module-lines:!4!cP2@3115@filename;!3!cP0:3118:!4!cP2@3119@if:!4!cP0@3121@!5!cP2!403122!40filter@!5!cP1!403124!40///%@!5!cP2!403129!40filename:!4!cP0@3132@!5!cP2!403133!40split@!5!cP1!403135!40!n@!5!cP0!403139!40!51!cP2!503140!50value!40!51!cP2!503142!50filename:!4!cP0@3146@!5!cP2!403147!40read-lines@!5!cP2!403149!40filename@!5!cP1!403151!401@!5!cP1!403153!404,!2!cP0;3159;!3!cP2:3160:env-parse;!3!cP0:3162:!4!cP2@3163@read-module-lines:!4!cP2@3165@filename env-parse!=!1!cEDefn1,!c,p,1,lines,!2!cP0;3063;!3!cP2:3064:env-expand;!3!cP0:3066:!4!cP2@3067@first:!4!cP0@3069@!5!cP2!403070!40filtersub@!5!cP0!403072!40!51!cP2!500!50vector!40!51!cP1!503073!50#!510Exports!c!510%@!5!cP1!403082!40%@!5!cP2!403086!40lines env-export!=!1!cEDefn1,~env-export,x,1, env-import!=!1!cEDefn1,~env-import,p,3, import-binding!=!1!cEDefn1,~import-binding,p,3, env-expand!=!1!cEDefn1,!c,p,1,v,!2!cP0;2657;!3!cP2:2658:subst;!3!cP1:2660:!4n;!3!cP1:2664:!n;!3!cP1:2668:!4@;!3!cP1:2673:!ai@;!3!cP1:2679:!4V;!3!cP1:2683:!4=V!a;!3!cP1:2688:!d;!3!cP1:2692:!4=F!a;!3!cP1:2697:!e;!3!cP1:2701:!430;!3!cP1:2705:!c;!3!cP1:2709:!420;!3!cP1:2713:!b;!3!cP1:2717:!50;!3!cP1:2721:!a;!3!cP1:2725:!40;!3!cP1:2729:!4e;!3!cP1:2733:!e;!3!cP1:2737:!4d;!3!cP1:2741:!d;!3!cP1:2745:!4c;!3!cP1:2749:!c;!3!cP1:2753:!4b;!3!cP1:2757:!b;!3!cP1:2761:!4a;!3!cP1:2765:!a;!3!cP1:2769:!45;!3!cP1:2773:!441;!3!cP1:2777:!44;!3!cP1:2781:!431;!3!cP1:2785:!43;!3!cP1:2789:!421;!3!cP1:2793:!42;!3!cP1:2797:!51;!3!cP2:2801:v env-compress!=!1!cEDefn1,!c,p,1,v,!2!cP0;2483;!3!cP2:2484:subst;!3!cP1:2488:!51;!3!cP1:2492:!42;!3!cP1:2496:!421;!3!cP1:2500:!43;!3!cP1:2504:!431;!3!cP1:2508:!44;!3!cP1:2512:!441;!3!cP1:2516:!45;!3!cP1:2522:!a;!3!cP1:2526:!4a;!3!cP1:2530:!b;!3!cP1:2534:!4b;!3!cP1:2538:!c;!3!cP1:2542:!4c;!3!cP1:2546:!d;!3!cP1:2550:!4d;!3!cP1:2554:!e;!3!cP1:2558:!4e;!3!cP1:2564:!40;!3!cP1:2568:!a;!3!cP1:2572:!50;!3!cP1:2576:!b;!3!cP1:2580:!420;!3!cP1:2584:!c;!3!cP1:2588:!430;!3!cP1:2592:!e;!3!cP1:2598:!4=F!a;!3!cP1:2603:!d;!3!cP1:2607:!4=V!a;!3!cP1:2612:!4V;!3!cP1:2616:!ai@;!3!cP1:2622:!4@;!3!cP1:2629:!n;!3!cP1:2633:!4n;!3!cP2:2637:v check-argc!=!1!cEDefn1,~check-argc,x,3, err-expected!=!1!cEDefn1,~err-expected,x,5;or;6;or;7, form-description!=!1!cEDefn1,~form-description,p,1, compile-warn!=!1!cEDefn1,~compile-warn,x,2;or;3;or;4;or;5, gen-error!=!1!cEDefn1,~gen-error,x,2;or;more, env-rewind-M!=!1!cEDefn1,~env-rewind-M,p,2, after!=!1!cEDefn1,~after,p,2, gensym!=!1!cEDefn1,~gensym,x,2, gensym-name!=!1!cEDefn1,~gensym-name,x,3, gen-global-name!=!1!cEDefn1,~gen-global-name,x,2, il-promote!=!1!cEDefn1,~il-promote,x,1, il-demote!=!1!cEDefn1,~il-demote,x,1, il-concat!=!1!cEDefn1,~il-concat,x,1, il-flatten!=!1!cEDefn1,~il-flatten,p,1, il-merge-strings!=!1!cEDefn1,~il-merge-strings,p,2, NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,x *compile-mods*!=!1!cEDefn0,~*compile-mods*,x *compile-outfile*!=!1!cEDefn0,~*compile-outfile*,x *compile-file*!=!1!cEDefn0,~*compile-file*,x *compile-subject*!=!1!cEDefn0,~*compile-subject*,x MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,x LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,x NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,x EDefn.is-public?!=!1!cEDefn1,!c,x,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.set-scope!=!1!cEDefn1,!c,p,2,defn;scope,!2!cP0;486;!3!cP2:487:append;!3!cP0:489:!4!cP2@490@wordlist:!4!cP1@492@1:!4!cP1@494@2:!4!cP2@496@defn;!3!cP2:499:scope;!3!cP0:501:!4!cP2@502@nth-rest:!4!cP1@504@4:!4!cP2@506@defn EDefn.scope!=!1!cEDefn1,!c,x,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,x,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,x,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,x,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,x,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,x,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,x,!2!cEDefn5 EIL!=!1!cEDefn4,S,x,!2!cEDefn6 EArg!=!1!cEDefn4,W,x,!2!cEDefn7 EMarker!=!1!cEDefn4,W,x,!2!cEDefn8 IString!=!1!cEDefn4,S,x,!2!cIL0 IVar!=!1!cEDefn4,S,x,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,x,!2!cIL2 ICall!=!1!cEDefn4,S;L,x,!2!cIL3 ILocal!=!1!cEDefn4,W;W,x,!2!cIL4 IFuncall!=!1!cEDefn4,L,x,!2!cIL5 IConcat!=!1!cEDefn4,L,x,!2!cIL6 IBlock!=!1!cEDefn4,L,x,!2!cIL7 ILambda!=!1!cEDefn4,S,x,!2!cIL8 IEnv!=!1!cEDefn4,S;L,x,!2!cIL9 protect-define!=!1!cEDefn1,~protect-define,iescape,1 protect-rhs!=!1!cEDefn1,~protect-rhs,iescape,1 protect-lhs!=!1!cEDefn1,~protect-lhs,iescape,1 protect-expr!=!1!cEDefn1,~protect-expr,iescape,1 protect-arg!=!1!cEDefn1,~protect-arg,iescape,1 protect-trim!=!1!cEDefn1,~protect-trim,iescape,1 protect-ltrim!=!1!cEDefn1,~protect-ltrim,iescape,1 escape!=!1!cEDefn1,~escape,iescape,1,str,!2!cP0;243;!3!cP2:244:subst;!3!cP1:246:$;!3!cP1:250:$`;!3!cP2:255:str parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 file-exists?!=!1!cEDefn1,~file-exists?,iio,1 read-lines!=!1!cEDefn1,~read-lines,iio,1;or;2;or;3 read-file!=!1!cEDefn1,~read-file,iio,1 write-file!=!1!cEDefn1,~write-file,iio,2 getline!=!1!cEDefn1,~getline,iio,1 shell!1!=!1!cEDefn1,~shell!2,iio,1 printn!=!1!cEDefn1,~printn,iio,0;or;more echo-command!=!1!cEDefn1,~echo-command,iio,1 quote-sh-arg!=!1!cEDefn1,~quote-sh-arg,iio,1 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,escape)
$(if $(call ^add-tags,!1:IL0!=IString!0S !1:IL1!=IVar!0S !1:IL2!=IBuiltin!0W!0L !1:IL3!=ICall!0S!0L !1:IL4!=ILocal!0W!0W !1:IL5!=IFuncall!0L !1:IL6!=IConcat!0L !1:IL7!=IBlock!0L !1:IL8!=ILambda!0S !1:IL9!=IEnv!0S!0L),)
$(if $(call ^add-tags,!1:EDefn0!=EVar!0S!0W !1:EDefn1!=EFunc!0S!0W!0S!0L !1:EDefn2!=ESMacro!0S!0W !1:EDefn3!=EXMacro!0S!0W !1:EDefn4!=ERecord!0S!0W!0S !1:EDefn5!=EBuiltin!0S!0W!0S !1:EDefn6!=EIL!0S !1:EDefn7!=EArg!0W !1:EDefn8!=EMarker!0W),)
~il-merge-strings = $(if $(filter !:IL0,$(firstword $(call ^u,$(word 1,$1)))),$(call ~il-merge-strings,$(wordlist 2,99999999,$1),$2$(call ^n,2,$(call ^u,$(word 1,$1)))),$(call ~append,$(if $2,$(call ^d,!:IL0 $(call ^d,$2))),$(word 1,$1),$(if $(word 2,$1),$(call ~il-merge-strings,$(wordlist 2,99999999,$1),))))
~il-flatten = $(filter %,$(foreach node,$1,$(if $(filter !:IL6,$(firstword $(call ^u,$(node)))),$(call ~il-flatten,$(wordlist 2,99999999,$(call ^u,$(node)))),$(node))))
~il-concat = $(call ^Y,$(call ~il-merge-strings,$(call ~il-flatten,$1),),,,,,,,,,$`(if $`(word 2,$`1),!:IL6 $`1,$`(or $`(call ^u,$`(word 1,$`1)),!:IL0 !.)))
~il-demote = $(or $(if $(filter !:IL0,$(firstword $1)),!:IL0 $(call ^d,$(word 2,$1)),$(if $(filter !:IL3,$(firstword $1)),$(if $(call ~eq?,$(call ^n,2,$1),^u),$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))))),!:IL3 ^d $(call ^d,$1))
~il-promote = !:IL3 ^u $(call ^d,$1)
~gen-global-name = $(if $(filter %&global,$2),$1,$(SCAM_NS)$1)
~gensym-name = $(if $(filter $1&$3!=%,$2),$(call ~gensym-name,$1,$2 .,$(words $2)),$1&$3)
~gensym = !:P2 0 $(call ^d,$(call ~gensym-name,$(call ~symbol-name,$1),$2,))
~after = $(filter %,$(subst !S, ,$(wordlist 2,99999999,$(subst !S$1!S,!S$1!S ,!S$(subst $  ,!S,$2)!S))))
~env-rewind-M = $(call ~append,$(call ~hash-find,:,$1),$(call ~after,$(call ~hash-find,$2,$1),$1))
~gen-error = !:P7 $(call ~form-index,$1) $(call ^d,$(call ~vsprintf,$2,$(foreach N,3,$(^v))))
~compile-warn = $(info $(call ~describe-error,$(call ~gen-error,$1,$2,$3,$4,$5),$(call ~pdec,$(~*compile-subject*)),$(~*compile-file*)))
~form-description = $(if $(call ~eq?,$1,%),form,$(if $(call ~eq?,$1,L),list,$(if $(call ~eq?,$1,S),symbol,$(if $(call ~eq?,$1,Q),literal string,$(call ~form-typename,$1)))))
~err-expected = $(call ~gen-error,$(or $2,$3),$(if $2,invalid,missing) $4 in $5$(if $1,; expected a $(subst |1,|,$(subst |0, ,$(subst $  , or ,$(foreach ty,$1,$(subst $  ,|0,$(subst |,|1,$(call ~form-description,$(call ^u,$(ty)))))))))),$6,$7)
~check-argc = $(if $(if $(or $(filter $1,$(words $2)),$(and $(filter more,$1),$(or $(call ~eq?,0,$(word 1,$1)),$(word $(word 1,$1),$2)))),,1),$(call ~gen-error,$3,$(subst %S,$(if $(call ~eq?,$1,1),,s),$(if ,,%q accepts %s argument%S, not %s)),$(call ~symbol-name,$3),$1,$(words $2)))
~import-binding = $(if $(filter x,$(word 3,$2)),$(call ~hash-bind,$1,$(call ~append,$(wordlist 1,2,$2),i$(if $(if $(filter !:EDefn1,$(firstword $2)),1,$(if $(filter !:EDefn2,$(firstword $2)),1)),$3),$(wordlist 4,99999999,$2))))
~env-import = $(if $2,$1,$(filter %,$(foreach b,$1,$(call ~import-binding,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$b)))),$(call ~nth,2,$(subst !=, ,$b)),$3))))
define ~env-export
# Exports: $(subst 
,!n,$(subst $(if ,,,i ),! ,$(subst $(if ,,!=V,),!V,$(subst $(if ,,!=F,),|,$(subst !30,@,$(subst !20,:,$(subst !10,;,$(subst !0,$(if ,,,),$(subst @,!e,$(subst |,!d,$(subst :,!c,$(subst ;,!b,$(subst $(if ,,,),!a,$(subst !41,!5,$(subst !31,!4,$(subst !21,!3,$(subst !11,!2,$1)))))))))))))))))

endef
~*dummy-env* := $(call ~hash-bind,,!:EDefn6 $(call ^d,!:IL0 !.))
define ~env-from-file
$(if $1,$(or $(call ~env-import,$(subst !2,!11,$(subst !3,!21,$(subst !4,!31,$(subst !5,!41,$(subst !a,$(if ,,,),$(subst !b,;,$(subst !c,:,$(subst !d,|,$(subst !e,@,$(subst $(if ,,,),!0,$(subst ;,!10,$(subst :,!20,$(subst @,!30,$(subst |,$(if ,,!=F,),$(subst !V,$(if ,,!=V,),$(subst ! ,$(if ,,,i ),$(subst !n,
,$(call ^u,$(word 1,$(patsubst #!0Exports:!0%,%,$(filter #!0Exports:!0%,$(if $(filter ///%,$1),$(call ~split,
,$(value $1)),$(call ~read-lines,$1,1,4))))))))))))))))))))))),$2,$(call ^d,$(notdir $(basename $1)))),$(~*dummy-env*)))
endef
$(if $(call ~memoize,~env-from-file),)
~mod-find = $(or $(firstword $(filter %$(notdir $1).min,$(~*compile-mods*))),$(if $(and $(if $(filter %/runtime.min,$(~*compile-mods*)),,1),$(if $(filter-out u%,$(flavor ///$(notdir $1).min)),1)),///$(notdir $1).min,$(info warning: cannot find module $1)))
~require-module = $(call ~env-from-file,$(call ~mod-find,$1),$2)
~use-module = $(call ^Y,$(call ~require-module,$1,),,,,,,,,,$`(if $`1,$`(call ^set,SCAM_MODS,$`(call ^set,SCAM_MODS,$`(~*compile-mods*),$`(SCAM_MODS)),$`(and $`(call ^require,$(call ^E,$1))1,$`(or $`(filter %,$`(foreach e,$`1,$`(if $`(filter !:EDefn3,$`(firstword $`(call ~nth,2,$`(subst !=, ,$`e)))),$`e))),$`(~*dummy-env*))))))
~env-rewind-x = $(call ^Y,$(call ~hash-find,$2,$1),$1,$2,,,,,,,$`(if $`(patsubst i%,%,$`(filter i%,$`(word 3,$`(call ~nth,2,$`(subst !=, ,$`1))))),$`(call ~env-rewind-x,$`(call ~require-module,$`(call ~promote,$`(patsubst i%,%,$`(filter i%,$`(word 3,$`(call ~nth,2,$`(subst !=, ,$`1)))))),1),$`3),$`(call ~after,$`1,$`2)))
~env-rewind = $(call ~append,$(call ~hash-find,:,$1),$(call ~env-rewind-x,$1,$2))
~builtins-1 := abspath basename dir error eval firstword flavor info lastword notdir origin realpath shell sort strip suffix value warning wildcard words
~builtins-2 := addprefix addsuffix filter filter-out findstring join word
~builtins-3 := .foreach patsubst .subst wordlist
~builtin-names := $(patsubst .%,%,$(~builtins-1) $(~builtins-2) $(~builtins-3))
~base-env := $(call ~append,$(foreach b,$(~builtins-1),$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$b) i 1)),$(foreach b,$(~builtins-2),$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$b) i 2)),$(foreach b,$(~builtins-3),$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$(patsubst .%,%,$b)) i 3)),$(foreach b,and or call,$(call ~hash-bind,$b,!:EDefn5 $(call ^d,$b) i %)),$(call ~hash-bind,if,!:EDefn5 if i 2!0or!03),$(foreach v,MAKEFILE_LIST .DEFAULT_GOAL,$(call ~hash-bind,$v,!:EDefn0 $(call ^d,$v) i)))
~resolve = $(if $(filter !:P2,$(firstword $1)),$(call ~nth,2,$(subst !=, ,$(or $(filter $(subst !,!1,$(call ^n,3,$1))!=%,$2),$(filter $(subst !,!1,$(call ^n,3,$1))!=%,$(~base-env))))),-)
~begin-block = $(if $(and $1,$(if $(word 2,$1),,1)),$(call ^u,$(word 1,$1)),!:P0 0 $(call ~cons,!:P2 0 begin,$1))

endef
 
define ///gen0.min
# compiled from gen0.scm
# Requires: core parse escape gen runtime
# Requires: scam-ct
# Exports: c0!=!1!cEDefn1,~c0,x,2;or;3, c0-error!=!1!cEDefn1,~c0-error,p,1, c0-qq!=!1!cEDefn1,~c0-qq,p,2;or;3, c0-qq-form!=!1!cEDefn1,~c0-qq-form,p,2, QQS!=!1!cEDefn2,!2!cP1;4959;*!3*,p c0-qq!=!1!cEDefn1,~c0-qq,p,0, ml.special-begin!=!1!cEDefn1,~ml.special-begin,p,4, c0-block!=!1!cEDefn1,~c0-block,x,2, c0-block-cc!=!1!cEDefn1,~c0-block-cc,x,3;or;4;or;5, ml.special-require!=!1!cEDefn1,~ml.special-require,p,4, ml.special-declare!=!1!cEDefn1,~ml.special-declare,p,4, ml.special-define!=!1!cEDefn1,~ml.special-define,p,4, c0-def!=!1!cEDefn1,!c,p,5,env;sym;args;inblock;is-define,!2!cP0;4274;!3!cP2:4275:env-strip;!3!cP2:4277:inblock;!3!cP0:4279:!4!cP2@4280@c0-def2:!4!cP2@4282@env:!4!cP0@4284@!5!cP2!404285!40form-index@!5!cP2!404287!40sym:!4!cP0@4290@!5!cP2!404291!40first@!5!cP2!404293!40args:!4!cP0@4296@!5!cP2!404297!40get-flags@!5!cP2!404299!40args@!5!cP1!404301!401:!4!cP0@4304@!5!cP2!404305!40skip-flags@!5!cP2!404307!40args@!5!cP1!404309!401:!4!cP2@4312@is-define:!4!cP2@4314@nil c0-def2!=!1!cEDefn1,~c0-def2,p,7, c0-def-compound!=!1!cEDefn1,~c0-def-compound,p,8, get-argc!=!1!cEDefn1,~get-argc,p,1, check-optional-args!=!1!cEDefn1,~check-optional-args,p,1;or;2, c0-def-symbol!=!1!cEDefn1,~c0-def-symbol,p,7, c0-check-body!=!1!cEDefn1,~c0-check-body,p,3, ml.special-lambda!=!1!cEDefn1,~ml.special-lambda,p,4, lambda-error!=!1!cEDefn1,~lambda-error,p,4, c0-lambda!=!1!cEDefn1,~c0-lambda,p,3, lambda-env!=!1!cEDefn1,!c,p,2,args;env,!2!cP0;2594;!3!cP2:2595:append;!3!cP0:2597:!4!cP2@2598@lambda-env-args:!4!cP2@2600@args:!4!cP0@2602@!5!cP2!402603!40concat@!5!cP1!402605!40.@!5!cP0!402609!40!51!cP2!502610!50emarker-level!40!51!cP0!502612!50!511!cP2!5102613!510hash-get!50!511!cP2!5102615!510LambdaMarkerKey!50!511!cP2!5102617!510env;!3!cP2:2623:env emarker-level!=!1!cEDefn1,~emarker-level,p,1, lambda-env-args!=!1!cEDefn1,~lambda-env-args,p,2, lambda-env-arg9!=!1!cEDefn1,~lambda-env-arg9,p,2, lambda-arg!=!1!cEDefn1,!c,p,3,sym;single-value;rest-value,!2!cP0;2094;!3!cP2:2095:foreach;!3!cP2:2097:name;!3!cP0:2099:!4!cP2@2100@symbol-name:!4!cP2@2102@sym;!3!cP0:2105:!4!cP2@2106@if:!4!cP0@2108@!5!cP2!402109!40filter@!5!cP1!402111!40...%@!5!cP2!402116!40name:!4!cP0@2144@!5!cP2!402145!40hash-bind@!5!cP0!402147!40!51!cP2!502148!50or!40!51!cP0!502150!50!511!cP2!5102151!510patsubst!50!511!cP1!5102153!510...%!50!511!cP1!5102158!510%!50!511!cP2!5102162!510name!40!51!cP2!502165!50name@!5!cP2!402168!40rest-value:!4!cP0@2171@!5!cP2!402172!40hash-bind@!5!cP0!402174!40!51!cP2!502175!50patsubst!40!51!cP1!502177!50?%!40!51!cP1!502182!50%!40!51!cP2!502186!50name@!5!cP2!402189!40single-value c0-L!=!1!cEDefn1,~c0-L,p,6, c0-record!=!1!cEDefn1,~c0-record,p,5, special-form-func!=!1!cEDefn1,!c,p,1,name,!2!cP0;1504;!3!cP2:1505:declare;!3!cP0:1507:!4!cP2@1508@ml.special-,!2!cP0;1512;!3!cP2:1513:concat;!3!cP0:1515:!4!cP2@1516@global-name:!4!cP2@1518@ml.special-;!3!cP2:1521:name c0-call!=!1!cEDefn1,~c0-call,p,6, c0-vec!=!1!cEDefn1,~c0-vec,x,2, c0-S!=!1!cEDefn1,~c0-S,p,4, c0-S-error!=!1!cEDefn1,~c0-S-error,p,2, c0-builtin!=!1!cEDefn1,~c0-builtin,p,3, c0-macro!=!1!cEDefn1,~c0-macro,p,3, c0-ctor!=!1!cEDefn1,~c0-ctor,p,3, c0-local!=!1!cEDefn1,~c0-local,p,3, c0-lambda!=!1!cEDefn1,~c0-lambda,p,3, c0-block!=!1!cEDefn1,~c0-block,p,2, c0!=!1!cEDefn1,~c0,p,2;or;3, skip-flags!=!1!cEDefn1,~skip-flags,x,2, get-flags!=!1!cEDefn1,~get-flags,x,2, scan-flags-x!=!1!cEDefn1,~scan-flags-x,p,3, scan-flags!=!1!cEDefn1,!c,p,2,args;skip,!2!cP0;172;!3!cP2:173:scan-flags-x;!3!cP2:175:args;!3!cP0:177:!4!cP2@178@1+:!4!cP2@180@skip;!3!cP2:183:skip scan-flags-x!=!1!cEDefn1,~scan-flags-x,p,3, env-strip!=!1!cEDefn1,~env-strip,x,2, block-result!=!1!cEDefn1,~block-result,x,3, begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 protect-define!=!1!cEDefn1,~protect-define,iescape,1 protect-rhs!=!1!cEDefn1,~protect-rhs,iescape,1 protect-lhs!=!1!cEDefn1,~protect-lhs,iescape,1 protect-expr!=!1!cEDefn1,~protect-expr,iescape,1 protect-arg!=!1!cEDefn1,~protect-arg,iescape,1 protect-trim!=!1!cEDefn1,~protect-trim,iescape,1 protect-ltrim!=!1!cEDefn1,~protect-ltrim,iescape,1 escape!=!1!cEDefn1,~escape,iescape,1,str,!2!cP0;243;!3!cP2:244:subst;!3!cP1:246:$;!3!cP1:250:$`;!3!cP2:255:str parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,escape)
$(call ^require,gen)
~block-result = $(if $1,!:IL9 $(call ^d,$2) $3,$(or $3,!:IL0 !.))
~env-strip = $(if $1,$2,$(if $(filter !:IL9,$(firstword $2)),$(wordlist 3,99999999,$2),$2))
~scan-flags-x = $(or $(if $(filter !:P2,$(firstword $(call ~nth,$2,$1))),$(if $(filter &private &public &inline &global,$(call ^n,3,$(call ~nth,$2,$1))),$(call ~scan-flags-x,$1,$(call ~1+,$2),$2))),$3)
~get-flags = $(filter %,$(foreach form,$(wordlist $(call ~1+,$2),$(call ~scan-flags-x,$1,$(call ~1+,$2),$2),$1),$(if $(filter !:P2,$(firstword $(call ^u,$(form)))),$(call ^n,3,$(call ^u,$(form))))))
~skip-flags = $(wordlist $(call ~1+,$(call ~scan-flags-x,$1,$(call ~1+,$2),$2)),99999999,$1)
~c0-local = $(and $(if $(and $(findstring U,$(SCAM_DEBUG)),$(if $(findstring $(if $(filter !:EDefn8,$(firstword $2)),$(word 2,$2)),$1),,1)),$(call ~compile-warn,$3,reference to upvalue %q,$(call ~symbol-name,$3)))1,!:IL4 $(subst .,,$1) $(words $(subst .,. ,$(subst $1,,$(if $(filter !:EDefn8,$(firstword $2)),$(word 2,$2))$(subst .,,$1)))))
~c0-ctor = $(call ~c0-lambda,$1,$(foreach i,$(call ~indices-x,$3,1),$(call ^d,!:P2 0 $(call ^d,a$(call ^u,$i)))),$(call ^d,!:P0 0 $(call ~cons,$2,$(foreach i,$(call ~indices-x,$3,1),$(call ^d,!:P2 0 $(call ^d,a$(call ^u,$i)))))))
~c0-macro = $(call ~c0-lambda,$1,$(foreach a,$(call ^u,$(word 1,$3)),$(call ^d,!:P2 0 $a)),$(call ^d,!:P0 0 $(call ~cons,$2,$(foreach a,$(call ^u,$(word 1,$3)),$(call ^d,!:P2 0 $a)))))
~c0-builtin = !:IL8 $(call ^d,$(if $(firstword $(filter 3 2 1,$3)),!:IL2 $2 $(foreach n,$(wordlist 1,$(firstword $(filter 3 2 1,$3)),1 2 3),$(call ^d,!:IL4 $(call ^u,$n) 0)),!:IL3 ^apply $(call ^d,!:IL0 $(call ^d,$2)) $(call ^d,!:IL1 ^av)))
~c0-S-error = $(if $2,$(call ~gen-error,$1,internal: %q binds to %q,$1,$2),$(call ~gen-error,$1,undefined variable %q,$(call ~symbol-name,$1)))
~c0-S = $(if $(filter !:EDefn7,$(firstword $4)),$(call ~c0-local,$(word 2,$4),$(call ~hash-get,:,$1),$2),$(if $(filter !:EDefn0,$(firstword $4)),!:IL1 $(call ^d,$(call ^n,2,$4)),$(if $(filter !:EDefn1,$(firstword $4)),$(if $(filter :,$(call ^n,2,$4)),$(call ~c0-macro,$1,$2,$(wordlist 5,99999999,$4)),!:IL2 value $(call ^d,!:IL0 $(call ^d,$(call ^n,2,$4)))),$(if $(filter !:EDefn2,$(firstword $4)),$(call ~c0,$(call ^n,2,$4),$(call ~env-rewind,$1,$3)),$(if $(filter !:EDefn6,$(firstword $4)),$(call ^n,2,$4),$(if $(filter !:EDefn4,$(firstword $4)),$(call ~c0-ctor,$1,$2,$(call ^n,2,$4)),$(if $(filter !:EDefn5,$(firstword $4)),$(call ~c0-builtin,$1,$(call ^n,2,$4),$(call ^n,4,$4)),$(call ~c0-S-error,$2,$4))))))))
~c0-vec = $(foreach f,$1,$(call ^d,$(call ~c0,$(call ^u,$f),$2)))
~c0-call = $(or $(call ~check-argc,$5,$3,$2),$(if $(wordlist 2,99999999,$6),$(call ~c0-block,$(wordlist 2,99999999,$6),$(call ~append,$(join $(addsuffix !=,$(call ^u,$(word 1,$6))),$(foreach a,$3,$(call ^d,!:EDefn6 $(call ^d,$(call ~c0,$(call ^u,$a),$1,))))),$(call ~hash-bind,:m,!:EDefn8 $(call ~form-index,$2)),$(if $(if $(filter :,$4),,1),$(call ~hash-bind,$(call ~symbol-name,$2),!:EDefn1 $(call ^d,$4) . $(call ^d,$5) )),$(call ~env-rewind,$1,$(call ~symbol-name,$2)))),!:IL3 $(call ^d,$4) $(call ~c0-vec,$3,$1)))
~c0-record = $(or $(call ~check-argc,$(words $4),$3,$2),!:IL6 $(call ~cons,!:IL0 $(call ^d,$5),$(foreach n,$(call ~indices-x,$4,1),$(call ~append,$(call ^d,!:IL0 !0),$(call ^d,$(if $(filter S,$(word $n,$4)),$(call ~il-demote,$(call ~c0,$(call ~nth,$n,$3),$1)),$(call ~c0,$(call ~nth,$n,$3),$1)))))))
~c0-L = $(if $(filter !:EDefn1,$(firstword $5)),$(call ~c0-call,$1,$3,$4,$(call ^n,2,$5),$(call ^n,4,$5),$(wordlist 5,99999999,$5)),$(if $(filter !:EDefn5,$(firstword $5)),$(or $(call ~check-argc,$(call ^n,4,$5),$4,$3),!:IL2 $(call ^n,2,$5) $(call ~c0-vec,$4,$1)),$(if $(filter !:EDefn3,$(firstword $5)),$(if $(call ~eq?,$(word 3,$5),x),$(call ~gen-error,$3,cannot use xmacro in its own file),$(call ~c0,$(call $(call ^n,2,$5),$4),$1,$6)),$(if $(filter !:EDefn4,$(firstword $5)),$(call ~c0-record,$1,$3,$4,$(call ^n,2,$5),$(call ^n,4,$5)),$(if $(if $3,,1),$(call ~gen-error,$2,missing function/macro name),$(if $5,!:IL5 $(call ~c0-vec,$(call ~cons,$3,$4),$1),$(if $(if $(filter-out u%,$(flavor ~ml.special-$(call ~symbol-name,$3))),1),$(call ~ml.special-$(call ~symbol-name,$3),$1,$3,$4,$6),$(and $(if $(findstring Cu,$(SCAM_DEBUG)),$(call ~printf,env: %q,$1))1,$(call ~gen-error,$3,undefined symbol: %q,$(call ~symbol-name,$3))))))))))
~lambda-env-arg9 = $(foreach n,$(call ~indices-x,$1,1),$(foreach name,$(call ~symbol-name,$(call ~nth,$n,$1)),$(if $(filter ...%,$(name)),$(call ~hash-bind,$(or $(patsubst ...%,%,$(name)),$(name)),$(if $(call ~eq?,$n,1),!:EDefn6 $(call ^d,!:IL1 9),!:EDefn6 $(call ^d,!:IL2 wordlist $(call ^d,!:IL0 $(call ^d,$n)) $(call ^d,!:IL0 999999) $(call ^d,!:IL1 9)))),$(call ~hash-bind,$(patsubst ?%,%,$(name)),!:EDefn6 $(call ^d,!:IL2 call $(call ^d,!:IL0 ^n) $(call ^d,!:IL0 $(call ^d,$n)) $(call ^d,!:IL1 9))))))
~lambda-env-args = $(call ~append,$(call ~hash-bind,:,!:EDefn8 $2),$(foreach n,$(call ~indices-x,$(wordlist 1,8,$1),1),$(foreach name,$(call ~symbol-name,$(call ~nth,$n,$1)),$(if $(filter ...%,$(name)),$(call ~hash-bind,$(or $(patsubst ...%,%,$(name)),$(name)),!:EDefn6 $(call ^d,!:IL2 foreach $(call ^d,!:IL0 N) $(call ^d,!:IL0 $(call ^d,$n)) $(call ^d,!:IL1 ^v))),$(call ~hash-bind,$(patsubst ?%,%,$(name)),!:EDefn7 $2$n)))),$(if $(word 9,$1),$(call ~lambda-env-arg9,$(wordlist 9,99999999,$1),$2)))
~emarker-level = $(if $(filter !:EDefn8,$(firstword $1)),$(word 2,$1))
~c0-lambda = !:IL8 $(call ^d,$(call ~c0-block,$3,$(call ~append,$(call ~lambda-env-args,$2,.$(call ~emarker-level,$(call ~hash-get,:,$1))),$1)))
~lambda-error = $(call ~err-expected,$1,$2,$3,$4,(lambda (ARGNAME...) BODY))
~ml.special-lambda = $(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$3)))),$(or $(call ^u,$(word 1,$(filter-out !.,$(foreach a,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))),$(call ^d,$(if $(filter !:P2,$(firstword $(call ^u,$a))),,$(call ~lambda-error,S,$(call ^u,$a),$2,ARGNAME))))))),$(call ~c0-lambda,$1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))),$(wordlist 2,99999999,$3))),$(call ~lambda-error,L,$(call ^u,$(word 1,$3)),$2,(ARGNAME...)))
~c0-check-body = $(if $3,$(if $(if $2,,1),$(call ~gen-error,$1,no BODY supplied to (define FORM BODY))),$(if $2,$(call ~gen-error,$2,too many arguments to (declare ...))))
~c0-def-symbol = $(or $(if $(filter &inline,$4),$(call ~gen-error,$2,'&inline' does not apply to symbol definitions)),$(call ~c0-check-body,$2,$(call ^u,$(word 1,$5)),$6),!:IL9 $(call ^d,$(call ~hash-bind,$3,$(if $7,!:EDefn2 $(call ^d,$(call ~begin-block,$5)) $(if $(filter &public,$4),x,p),!:EDefn0 $(call ^d,$(call ~gen-global-name,$3,$4)) $(if $(filter &public,$4),x,p)),$1)) $(if $(and $6,$(if $7,,1)),!:IL3 ^set $(call ^d,!:IL0 $(call ^d,$(call ~gen-global-name,$3,$4))) $(call ^d,$(call ~c0-block,$5,$1))))
~check-optional-args = $(if $1,$(if $(filter ...% ?%,$(call ~symbol-name,$(call ^u,$(word 1,$1)))),$(call ~check-optional-args,$(wordlist 2,99999999,$1),1),$(if $2,$(call ~gen-error,$(call ^u,$(word 1,$1)),non-optional parameter after optional one),$(call ~check-optional-args,$(wordlist 2,99999999,$1),))))
~get-argc = $(if $(filter ...% ?%,$(lastword $1)),$(if $(filter ...%,$(lastword $1)),$(words $(filter-out ...% ?%,$1)) or more,$(call ~get-argc,$(call ~butlast,$1)) or $(words $1)),$(words $1))
~c0-def-compound = $(or $(call ~c0-check-body,$2,$(call ^u,$(word 1,$6)),$7),$(if $(or $8,$(and $(if $8,,1),$(filter &inline,$5))),$(call ^u,$(word 1,$(filter-out !.,$(foreach a,$4,$(call ^d,$(if $(filter ...% ?%,$(call ~symbol-name,$(call ^u,$a))),$(call ~gen-error,$(call ^u,$a),%s cannot have optional parameters,$(if $8,macros,inline functions)))))))),$(call ~check-optional-args,$4)),$(if $(and $(if $8,,1),$(filter $3,$(~builtin-names))),$(call ~gen-error,$2,cannot redefine built-in function %q,$3)),!:IL9 $(call ^d,$(call ~hash-bind,$3,!:EDefn1 $(call ^d,$(if $8,:,$(call ~gen-global-name,$3,$5))) $(if $(filter &public,$5),x,p) $(call ^d,$(call ~get-argc,$(foreach a,$4,$(call ^d,$(call ~symbol-name,$(call ^u,$a)))))) $(if $(or $(and $(if $8,,1),$(filter &inline,$5)),$8),$(call ~cons,$(foreach a,$4,$(call ^d,$(call ~symbol-name,$(call ^u,$a)))),$6)),$1)) $(if $(and $7,$(if $8,,1)),!:IL3 ^fset $(call ^d,!:IL0 $(call ^d,$(call ~gen-global-name,$3,$5))) $(call ^d,$(call ~c0-lambda,$(if $8,$1,$(call ~hash-bind,$3,!:EDefn1 $(call ^d,$(call ~gen-global-name,$3,$5)) $(if $(filter &public,$5),x,p) $(call ^d,$(call ~get-argc,$(foreach a,$4,$(call ^d,$(call ~symbol-name,$(call ^u,$a)))))) ,$1)),$4,$6))))
~c0-def2 = $(or $(if $(if $7,,1),$(if $(filter !:P4,$(firstword $3)),$(call ~c0-def2,$1,$(word 2,$3),$(wordlist 3,99999999,$3),$4,$5,$6,1))),$(if $(filter !:P2,$(firstword $3)),$(call ~c0-def-symbol,$1,$(word 2,$3),$(call ^n,3,$3),$4,$5,$6,$7),$(if $(filter !:P0,$(firstword $3)),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$3))))),$(call ~c0-def-compound,$1,$(word 2,$3),$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$3)))),$(wordlist 2,99999999,$(wordlist 3,99999999,$3)),$4,$5,$6,$7),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$3))),$3,NAME,(%s %s(NAME...)),$(if $6,define,declare),$(if $7,`))),$(call ~err-expected,L S,$3,$2,FORM,(%s %sFORM ...),$(if $6,define,declare),$(if $7,`)))))
~ml.special-define = $(call ~env-strip,$4,$(call ~c0-def2,$1,$(call ~form-index,$2),$(call ^u,$(word 1,$3)),$(call ~get-flags,$3,1),$(call ~skip-flags,$3,1),1,))
~ml.special-declare = $(call ~env-strip,$4,$(call ~c0-def2,$1,$(call ~form-index,$2),$(call ^u,$(word 1,$3)),$(call ~get-flags,$3,1),$(call ~skip-flags,$3,1),,))
~ml.special-require = $(or $(if $(call ~skip-flags,$3,1),$(call ~gen-error,$(call ~skip-flags,$3,1),too many arguments to require)),$(if $(filter !:P1,$(firstword $(call ^u,$(word 1,$3)))),$(call ^Y,$(call ~require-module,$(call ^n,3,$(call ^u,$(word 1,$3))),$(filter &private,$(call ~get-flags,$3,1))),$(call ^u,$(word 1,$3)),$1,$(call ^n,3,$(call ^u,$(word 1,$3))),$4,,,,,$`(if $`1,$`(call ~block-result,$`5,$`(call ~append,$`1,$`3),!:IL3 ^require $`(call ^d,!:IL0 $`(call ^d,$`(notdir $`4)))),$`(call ~gen-error,$`2,require: Cannot find module %q,$`4))),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,STRING,(require STRING))))
~c0-block-cc = $(if $(filter !:IL9,$(firstword $5)),$(call ~c0-block-cc,$(call ^n,2,$5),$2,$3,$4,$(wordlist 3,99999999,$5)),$(if $(if $2,,1),$(call ^Y,$1,$(filter-out !:IL0 !.,$(call ~append,$4,$(if $5,$(call ^d,$5)))),,,,,,,,$3),$(call ~c0-block-cc,$1,$(wordlist 2,99999999,$2),$3,$(call ~append,$4,$(if $5,$(call ^d,$5))),$(call ~c0,$(call ^u,$(word 1,$2)),$1,1))))
~c0-block = $(call ~c0-block-cc,$2,$1,$`(if $`(word 2,$`2),!:IL7 $`2,$`(or $`(call ^u,$`(word 1,$`2)),!:IL0 !.)))
~ml.special-begin = $(call ~c0-block,$3,$1)
~c0-qq-form = $(if $(findstring *!*,$1),$(call ~il-concat,$(call ~intersperse,$2,$(foreach a,$(call ~split,*!*,$1),$(call ^d,!:IL0 $a)))),$(if $(findstring *!1*,$1),$(call ~il-concat,$(call ~intersperse,$(call ~il-demote,$2),$(foreach a,$(call ~split,*!1*,$1),$(call ^d,!:IL0 $a)))),!:P7 0 $(call ^d,c0-qq-form: template='$1')))
~c0-qq = $(if $(filter !:P5,$(firstword $2)),$(if $3,$(call ~c0-qq-form,!:P5 $(word 2,$2) *!*,$(call ~c0-qq,$1,$(wordlist 3,99999999,$2),$(wordlist 2,99999999,$3))),$(call ~c0,$(wordlist 3,99999999,$2),$1)),$(if $(filter !:P4,$(firstword $2)),$(call ~c0-qq-form,!:P4 $(word 2,$2) *!*,$(call ~c0-qq,$1,$(wordlist 3,99999999,$2),$(call ~cons,1,$3))),$(if $(filter !:P0,$(firstword $2)),$(call ~c0-qq-form,!:P0 $(word 2,$2) *!*,$(call ~il-concat,$(call ~intersperse,!:IL0 !0,$(foreach c,$(wordlist 3,99999999,$2),$(call ^d,$(if $(filter !:P6,$(firstword $(call ^u,$c))),$(call ~c0,$(wordlist 3,99999999,$(call ^u,$c)),$1),$(call ~il-demote,$(call ~c0-qq,$1,$(call ^u,$c),$3)))))))),$(if $(filter !:P7,$(firstword $2)),$2,!:IL0 $(call ^d,$2)))))
~c0-error = $(call ~gen-error,$1,$(if $(filter !:P5,$(firstword $1)),unquote (,) outside of a quasiquoted (`) form,$(if $(filter !:P6,$(firstword $1)),splice (,@) outside of a quasiquoted (`) form,bad AST node: %q)),$1)
~c0 = $(and $(if $(findstring c0,$(SCAM_DEBUG)),$(and $(call ~printf,form: %q,$1)1,$(if $(findstring c0e,$(SCAM_DEBUG)),$(call ~printf,env: %q,$2))))1,$(if $(filter !:P2,$(firstword $1)),$(call ~c0-S,$2,$1,$(call ^n,3,$1),$(call ~resolve,$1,$2)),$(if $(filter !:P1,$(firstword $1)),!:IL0 $(call ^d,$(call ^n,3,$1)),$(if $(filter !:P0,$(firstword $1)),$(call ~c0-L,$2,$(word 2,$1),$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(call ~resolve,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$2),$3),$(if $(filter !:P3,$(firstword $1)),!:IL0 $(call ^d,$(wordlist 3,99999999,$1)),$(if $(filter !:P4,$(firstword $1)),$(call ~c0-qq,$2,$(wordlist 3,99999999,$1)),$(if $(filter !:P7,$(firstword $1)),$1,$(call ~c0-error,$1))))))))

endef
 
define ///gen1.min
# compiled from gen1.scm
# Requires: core escape parse gen runtime
# Requires: scam-ct
# Exports: gen1!=!1!cEDefn1,~gen1,x,2, c1-file!=!1!cEDefn1,~c1-file,p,1, c1-file*!=!1!cEDefn1,~c1-file*,p,1, c1-file-fset!=!1!cEDefn1,~c1-file-fset,p,2, c1-file-set!=!1!cEDefn1,~c1-file-set,p,2, c1-file!=!1!cEDefn1,~c1-file,p,1, c1!=!1!cEDefn1,~c1,p,1, c1-Var!=!1!cEDefn1,~c1-Var,p,1, c1-Block!=!1!cEDefn1,~c1-Block,p,1, c1-Funcall!=!1!cEDefn1,~c1-Funcall,p,1, c1-Local!=!1!cEDefn1,~c1-Local,p,2, make-list!=!1!cEDefn1,~make-list,p,3, c1-Call!=!1!cEDefn1,~c1-Call,p,2, c1-args9!=!1!cEDefn1,~c1-args9,p,1, c1-Builtin!=!1!cEDefn1,~c1-Builtin,p,2, il-vector!=!1!cEDefn1,~il-vector,p,1, c1-Error!=!1!cEDefn1,~c1-Error,p,1, c1-vec!=!1!cEDefn1,~c1-vec,p,3, c1-arg-trim!=!1!cEDefn1,~c1-arg-trim,p,1, c1-arg!=!1!cEDefn1,~c1-arg,p,1, is-balanced?!=!1!cEDefn1,!c,p,1,node,!2!cP0;1505;!3!cP2:1506:case;!3!cP2:1508:node;!3!cP0:1510:!4!cP0@1511@!5!cP2!401512!40ICall@!5!cP2!401514!40_@!5!cP2!401516!40_:!4!cP1@1519@1;!3!cP0:1522:!4!cP0@1523@!5!cP2!401524!40IVar@!5!cP2!401526!40_:!4!cP1@1529@1;!3!cP0:1532:!4!cP0@1533@!5!cP2!401534!40IBuiltin@!5!cP2!401536!40_@!5!cP2!401538!40_:!4!cP1@1541@1;!3!cP0:1544:!4!cP0@1545@!5!cP2!401546!40IFuncall@!5!cP2!401548!40_:!4!cP1@1551@1 c1!=!1!cEDefn1,~c1,p,1, one-char-names!=!1!cEDefn2,!2!cP0;1359;!3!cP2:1360:concat;!3!cP1:1362:a@b@c@d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z@;!3!cP1:1417:A@B@C@D@E@F@G@H@I@J@K@L@M@N@O@P@Q@R@S@T@U@V@W@X@Y@Z@_,p voidify!=!1!cEDefn1,!c,p,1,node,!2!cP0;1275;!3!cP2:1276:if;!3!cP0:1278:!4!cP2@1279@case:!4!cP2@1281@node:!4!cP0@1283@!5!cP0!401284!40!51!cP2!501285!50IBuiltin!40!51!cP2!501287!50name!40!51!cP2!501289!50args@!5!cP0!401292!40!51!cP2!501293!50filter!40!51!cP1!501295!50error!510eval!510info!40!51!cP2!501303!50name:!4!cP0@1307@!5!cP0!401308!40!51!cP2!501309!50ICall!40!51!cP2!501311!50name!40!51!cP2!501313!50args@!5!cP0!401316!40!51!cP2!501317!50filter!40!51!cP1!501319!50^require!40!51!cP2!501323!50name;!3!cP2:1328:node;!3!cP0:1330:!4!cP2@1331@IBuiltin:!4!cP1@1333@if:!4!cP0@1337@!5!cP2!400!40vector@!5!cP2!401338!40node@!5!cP0!401340!40!51!cP2!501341!50IString!40!51!cP1!501343!50!51. gen-extract!=!1!cEDefn1,~gen-extract,p,1, gen-embed!=!1!cEDefn1,~gen-embed,p,1, gen-decode!=!1!cEDefn1,!c,p,1,str,!2!cP0;1093;!3!cP2:1094:subst;!3!cP1:1096:~N;!3!cP1:1100:!n;!3!cP1:1104:~S;!3!cP1:1108:$;!3!cP1:1112:~R;!3!cP1:1116:);!3!cP1:1120:~C;!3!cP1:1124:!a;!3!cP1:1128:~L;!3!cP1:1132:(;!3!cP1:1136:~1;!3!cP1:1140:~;!3!cP2:1144:str gen-encode!=!1!cEDefn1,!c,p,1,str,!2!cP0;1026;!3!cP2:1027:subst;!3!cP1:1029:~;!3!cP1:1033:~1;!3!cP1:1037:(;!3!cP1:1041:~L;!3!cP1:1045:!a;!3!cP1:1049:~C;!3!cP1:1053:);!3!cP1:1057:~R;!3!cP1:1061:$;!3!cP1:1065:~S;!3!cP1:1069:!n;!3!cP1:1073:~N;!3!cP2:1077:str c1-Lambda!=!1!cEDefn1,~c1-Lambda,p,1, begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 protect-define!=!1!cEDefn1,~protect-define,iescape,1 protect-rhs!=!1!cEDefn1,~protect-rhs,iescape,1 protect-lhs!=!1!cEDefn1,~protect-lhs,iescape,1 protect-expr!=!1!cEDefn1,~protect-expr,iescape,1 protect-arg!=!1!cEDefn1,~protect-arg,iescape,1 protect-trim!=!1!cEDefn1,~protect-trim,iescape,1 protect-ltrim!=!1!cEDefn1,~protect-ltrim,iescape,1 escape!=!1!cEDefn1,~escape,iescape,1,str,!2!cP0;243;!3!cP2:244:subst;!3!cP1:246:$;!3!cP1:250:$`;!3!cP2:255:str intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,escape)
$(call ^require,parse)
$(call ^require,gen)
~c1-Lambda = $(subst $``.,$`.,$(subst $``-,$`,$(subst $`,$``,$1)))
define ~gen-embed
$`.{$(subst 
,~N,$(subst $`,~S,$(subst $],~R,$(subst $(if ,,,),~C,$(subst $[,~L,$(subst ~,~1,$1))))))$`.}
endef
define ~gen-extract
$(if $(findstring $`.{,$1),$(foreach e,$(wordlist 2,99999999,$(call ~split,$`.{,$1)),$(call ^d,$(subst ~1,~,$(subst ~L,$[,$(subst ~C,$(if ,,,),$(subst ~R,$],$(subst ~S,$`,$(subst ~N,
,$(call ^u,$(word 1,$(call ~split,$`.},$(call ^u,$e)))))))))))))
endef
~c1-arg = $(if $(if $(filter !:IL3,$(firstword $1)),1,$(if $(filter !:IL1,$(firstword $1)),1,$(if $(filter !:IL2,$(firstword $1)),1,$(if $(filter !:IL5,$(firstword $1)),1)))),$(call ~c1,$1),$(call ~protect-arg,$(call ~c1,$1)))
~c1-arg-trim = $(if $(if $(filter !:IL3,$(firstword $1)),1,$(if $(filter !:IL1,$(firstword $1)),1,$(if $(filter !:IL2,$(firstword $1)),1,$(if $(filter !:IL5,$(firstword $1)),1)))),$(call ~c1,$1),$(call ~protect-trim,$(call ~protect-arg,$(call ~c1,$1))))
~c1-vec = $(subst |1,|,$(subst |0, ,$(subst $  ,$(subst |,|1,$2),$(foreach a,$1,$(subst $  ,|0,$(subst |,|1,$(call $3,$(call ^u,$a))))))))
~c1-Error = $(call ~gen-embed,$(if $(filter !:P7,$(firstword $1)),$1,!:P7 0 $(call ^d,internal:bad IL: $1)))
~il-vector = $(call ~il-concat,$(subst $  , $(call ^d,!:IL0 !0) ,$(foreach n,$1,$(call ^d,$(call ~il-demote,$(call ^u,$n))))))
~c1-Builtin = $`($1 $(call ~protect-ltrim,$(call ~c1-vec,$2,$(if ,,,),$(if $(filter and or,$1),~c1-arg-trim,~c1-arg))))
~c1-args9 = $(if $(word 9,$1),$(if ,,$(call ~c1-vec,$(wordlist 1,8,$1),$(if ,,,),~c1-arg),$(call ~protect-arg,$(call ~c1,$(call ~il-vector,$(wordlist 9,99999999,$1))))),$(call ~c1-vec,$1,$(if ,,,),~c1-arg))
~c1-Call = $`(call $(call ~protect-ltrim,$(subst $`,$``,$1))$(if $2,$(if ,,,))$(call ~c1-args9,$2))
~make-list = $(if $(word $2,$3),$(subst $  ,,$(wordlist $1,$2,$3)),$(call ~make-list,$1,$2,$3 $3 $3))
~c1-Local = $(if $(filter-out 0,$2),$(subst $(if ,,,$]),$],$(subst -,$(call ~make-list,1,$2,-),$`-(call ^E,$`-$1,$(call ~make-list,2,$2,`)))),$`$1)
~c1-Funcall = $`(call ^Y,$(call ~c1-args9,$(wordlist 2,99999999,$1))$(subst $  ,,$(or $(wordlist $(words x$(wordlist 2,99999999,$1)),9,$(if ,,, , , , , , , , ,)),$(if ,,,)))$(call ~protect-arg,$(call ~c1,$(call ^u,$(word 1,$1)))))
~c1-Block = $(if $(word 2,$1),$`(and $(call ~c1-vec,$1,$(if ,,1,),~c1-arg)),$(if $1,$(call ~c1,$(call ^u,$(word 1,$1)))))
~c1-Var = $`$(or $(filter a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _,$1),($(subst $`,$``,$1)))
~c1 = $(if $(filter !:IL0,$(firstword $1)),$(subst $`,$``,$(call ^n,2,$1)),$(if $(filter !:IL4,$(firstword $1)),$(call ~c1-Local,$(word 2,$1),$(word 3,$1)),$(if $(filter !:IL3,$(firstword $1)),$(call ~c1-Call,$(call ^n,2,$1),$(wordlist 3,99999999,$1)),$(if $(filter !:IL1,$(firstword $1)),$(call ~c1-Var,$(call ^n,2,$1)),$(if $(filter !:IL6,$(firstword $1)),$(call ~c1-vec,$(wordlist 2,99999999,$1),,~c1),$(if $(filter !:IL8,$(firstword $1)),$(call ~c1-Lambda,$(call ~c1,$(call ^n,2,$1))),$(if $(filter !:IL7,$(firstword $1)),$(call ~c1-Block,$(wordlist 2,99999999,$1)),$(if $(filter !:IL5,$(firstword $1)),$(call ~c1-Funcall,$(wordlist 2,99999999,$1)),$(if $(filter !:IL2,$(firstword $1)),$(call ~c1-Builtin,$(word 2,$1),$(wordlist 3,99999999,$1)),$(call ~c1-Error,$1))))))))))
define ~c1-file-set
$(call ~protect-lhs,$1) := $(call ~protect-rhs,$2)

endef
define ~c1-file-fset
$(if $(or $(findstring $`,$(subst $``,,$2)),$(findstring $``.,$2)),$`(call ^fset,$(call ~protect-arg,$1),$(call ~protect-arg,$2))
,$(if $(or $(findstring #,$2),$(findstring 
,$2),$(filter ~%,$(subst $  ,~,$(subst $ 	,~,$2)))),define $(call ~protect-lhs,$1)
$(call ~protect-define,$(subst $``,$`,$2))
$ endef
,$(call ~protect-lhs,$1) = $(subst $``,$`,$(call ~protect-rhs,$2))
))
endef
~c1-file* = $(subst |1,|,$(subst |0, ,$(subst $  ,,$(foreach node,$1,$(subst $  ,|0,$(subst |,|1,$(call ~c1-file,$(call ^u,$(node)))))))))
define ~c1-file
$(or $(if $(filter !:IL2,$(firstword $1)),$(if $(filter !:IL0,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(if $(filter eval,$(word 2,$1)),$(call ^n,2,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))))
,$(if $(filter call,$(word 2,$1)),$(call ~c1-file,!:IL3 $(call ^d,$(call ^n,2,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))))) $(wordlist 2,99999999,$(wordlist 3,99999999,$1)))))),$(if $(filter !:IL3,$(firstword $1)),$(if $(if $(filter-out $(call ^d,!:IL0 !.),$(word 3,$(wordlist 3,99999999,$1))),,1),$(if $(filter ^set,$(call ^n,2,$1)),$(call ~c1-file-set,$(call ~c1,$(call ~nth,1,$(wordlist 3,99999999,$1))),$(call ~c1,$(call ~nth,2,$(wordlist 3,99999999,$1)))),$(if $(filter ^fset,$(call ^n,2,$1)),$(call ~c1-file-fset,$(call ~c1,$(call ~nth,1,$(wordlist 3,99999999,$1))),$(call ~c1,$(call ~nth,2,$(wordlist 3,99999999,$1))))))),$(if $(filter !:IL7,$(firstword $1)),$(call ~c1-file*,$(wordlist 2,99999999,$1))))),$(if ,,$(call ~protect-expr,$(call ~c1,$(if $(if $(filter !:IL2,$(firstword $1)),$(filter error eval info,$(word 2,$1)),$(if $(filter !:IL3,$(firstword $1)),$(filter ^require,$(call ^n,2,$1)))),$1,!:IL2 if $(call ^d,$1) $(call ^d,!:IL0 !.))))
))
endef
~gen1 = $(call ^Y,$(if $2,$(call ~c1-file*,$1),$(call ~c1,!:IL7 $1)),,,,,,,,,$`(call ^d,$`(call ~gen-extract,$`1)) $`(call ^d,$`1))

endef
 
define ///getopts.min
# compiled from getopts.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: getopts!=!1!cEDefn1,~getopts,x,3, getopts-loop!=!1!cEDefn1,~getopts-loop,p,7, intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
~getopts-loop = $(and $(call ^set,~opt,$(word 1,$5))1,$(call ^set,~file,$(call ~nth,1,$5))1,$(if $(if $5,,1),$(call ^d,$6) $(call ^d,$7),$(if $(if $(filter -%,$(~opt)),,1),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 2,99999999,$5),$(call ~conj,$6,$(~file)),$7),$(if $(filter $1,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 2,99999999,$5),$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),1,$7)),$(if $(filter $2,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,$(wordlist 3,99999999,$5),$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),$(call ~nth,2,$5),$7)),$(if $(filter $3,$(~opt)),$(call ~getopts-loop,$1,$2,$3,$4,,$6,$(call ~hash-bind,$(patsubst -%,%,$(patsubst -%,%,$(~opt))),$(wordlist 2,99999999,$5),$7)),$(call ^Y,$(~opt),$(wordlist 2,99999999,$5),,,,,,,,$4)))))))
~getopts = $(call ~getopts-loop,$(filter-out %= %=...,$2),$(patsubst %=,%,$(filter %=,$2)),$(patsubst %=...,%,$(filter %=...,$2)),$3,$1,,)

endef
 
define ///io.min
# compiled from io.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: file-exists?!=!1!cEDefn1,~file-exists?,x,1, read-lines!=!1!cEDefn1,~read-lines,x,1;or;2;or;3, read-file!=!1!cEDefn1,~read-file,x,1, write-file!=!1!cEDefn1,~write-file,x,2, getline!=!1!cEDefn1,~getline,x,1, shell!1!=!1!cEDefn1,~shell!2,x,1, printn!=!1!cEDefn1,~printn,x,0;or;more, echo-command!=!1!cEDefn1,~echo-command,x,1, quote-sh-arg!=!1!cEDefn1,~quote-sh-arg,x,1, shellc!=!1!cEDefn1,~shellc,p,0;or;more, logshell!=!1!cEDefn1,!c,p,1,cmd,!2!cP0;36;!3!cP2:37:if;!3!cP0:39:!4!cP2@40@filter:!4!cP1@42@S:!4!cP2@46@SCAM_DEBUG;!3!cP0:49:!4!cP2@50@print:!4!cP1@52@shell!c!40:!4!cP2@58@cmd,!2!cP0;62;!3!cP2:63:shell;!3!cP2:65:cmd SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG,p intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
~shellc = $(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: $(call ~concat-vec,$(foreach N,1,$(^v)))))1,$(shell $(call ~concat-vec,$(foreach N,1,$(^v)))))
~quote-sh-arg = '$(subst ','\'',$1)'
define ~echo-command
printf '%b' $(call ~quote-sh-arg,$(subst 
,\n,$(subst \,\\,$1)))
endef
~printn = $(call ~shellc,$(call ~echo-command,$(call ~concat-vec,$(foreach N,1,$(^v)))), >&2)
define ~shell!
$(subst !1,!,$(subst !0, ,$(subst !n,
,$(subst $  ,,$(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: $1 | sed -e 's/!/!1/g;s/ /!0/g;s/$`/!n/g'))1,$(shell $1 | sed -e 's/!/!1/g;s/ /!0/g;s/$`/!n/g'))))))
endef
~getline = $(and $(if $1,$(call ~printn,$1))1,$(call ~shell!,head -1))
define ~write-file
$(if $1,$(if $(if $(call ~shellc,$(call ~echo-command,), > ,$1.pre, || echo ERROR),,1),$(and $(foreach line,$(subst $  ,
 ,$(call ~split,
,$2)),$(call ^d,$(if $(call ^u,$(line)),$(call ~shellc,$(call ~echo-command,$(call ^u,$(line))), >> ,$1.pre))))1,$(call ~shellc,mv ,$1.pre, ,$1))),$(info error: write-file: nil filename))
endef
~read-file = $(if $1,$(call ~shell!,cat < $(call ~quote-sh-arg,$1)),$(info error: read-file: nil filename))
~read-lines = $(if $1,$(subst !n,,$(subst $  !n, !.,$(and $(if $(filter S,$(SCAM_DEBUG)),$(info shell: sed -E '$(if $2,$(if ,,$2,$3!d;))s/!/!1/g;s/	/!+/g;s/ /!0/g;s/$`/!n/g' $1))1,$(shell sed -E '$(if $2,$(if ,,$2,$3!d;))s/!/!1/g;s/	/!+/g;s/ /!0/g;s/$`/!n/g' $1)))),$(info error: read-lines: nil filename))
~file-exists? = $(if $(call ~shellc,ls ,$(call ~quote-sh-arg,$1), 2> /dev/null),1)

endef
 
define ///macros.min
# compiled from macros.scm
# Requires: core parse gen gen0 runtime
# Requires: scam-ct
# Exports: ml.special-case!=!1!cEDefn1,~ml.special-case,p,3, case-fold!=!1!cEDefn1,~case-fold,p,1, case-append-arg!=!1!cEDefn1,~case-append-arg,p,2, c0-matches!=!1!cEDefn1,~c0-matches,p,3, arg-bindings!=!1!cEDefn1,~arg-bindings,p,3, case-where!=!1!cEDefn0,~case-where,p ml.special-data!=!1!cEDefn1,~ml.special-data,p,4, read-types!=!1!cEDefn1,~read-types,p,3;or;4;or;5;or;6, read-type!=!1!cEDefn1,~read-type,p,3, read-type-r!=!1!cEDefn1,~read-type-r,p,6, data-where!=!1!cEDefn0,~data-where,p DataType!=!1!cEDefn4,W;W;S;L,p,!2!cData0 ml.special-use!=!1!cEDefn1,~ml.special-use,p,4, ml.special-defmacro!=!1!cEDefn1,~ml.special-defmacro,p,4, defmacro-where!=!1!cEDefn0,~defmacro-where,p ml.special-global-name!=!1!cEDefn1,~ml.special-global-name,p,3, defn-global-name!=!1!cEDefn1,~defn-global-name,p,1, ml.special-cond!=!1!cEDefn1,~ml.special-cond,p,3, cond-wrap!=!1!cEDefn1,~cond-wrap,p,2, cond-where!=!1!cEDefn0,~cond-where,p ml.special-concat-for!=!1!cEDefn1,~ml.special-concat-for,p,3, il-spc-decode!=!1!cEDefn1,~il-spc-decode,p,1, il-spc-encode!=!1!cEDefn1,~il-spc-encode,p,1, il-subst!=!1!cEDefn1,~il-subst,p,3, concat-for-where!=!1!cEDefn0,~concat-for-where,p ml.special-append-for!=!1!cEDefn1,~ml.special-append-for,p,3, ml.special-for!=!1!cEDefn1,~ml.special-for,p,3, ml.special-foreach!=!1!cEDefn1,~ml.special-foreach,p,3, c0-for!=!1!cEDefn1,~c0-for,p,6, ml.special-let&!=!1!cEDefn1,~ml.special-let&,p,3, let&-env!=!1!cEDefn1,~let&-env,p,1, let&-where!=!1!cEDefn0,~let&-where,p ml.special-let-global!=!1!cEDefn1,~ml.special-let-global,p,3, letg-expand!=!1!cEDefn1,~letg-expand,p,4, letg-where!=!1!cEDefn0,~letg-where,p ml.special-let!=!1!cEDefn1,~ml.special-let,p,3, let-where!=!1!cEDefn0,~let-where,p read-pairs!=!1!cEDefn1,~read-pairs,p,3, read-pairs-r!=!1!cEDefn1,~read-pairs-r,p,3, ml.special-?!=!1!cEDefn1,~ml.special-?,p,3, ml.special-set!=!1!cEDefn1,~ml.special-set,p,3, c0-set!=!1!cEDefn1,~c0-set,p,6, ml.special-subst!=!1!cEDefn1,~ml.special-subst,p,3, subst-x!=!1!cEDefn1,~subst-x,p,2, ml.special-vector!=!1!cEDefn1,~ml.special-vector,p,3, ml.special-concat!=!1!cEDefn1,~ml.special-concat,p,3, ml.special-current-file-line!=!1!cEDefn1,~ml.special-current-file-line,p,3, ml.special-current-env!=!1!cEDefn1,~ml.special-current-env,p,3, ml.special-print!=!1!cEDefn1,~ml.special-print,p,3, c0!=!1!cEDefn1,~c0,igen0,2;or;3 c0-block!=!1!cEDefn1,~c0-block,igen0,2 c0-block-cc!=!1!cEDefn1,~c0-block-cc,igen0,3;or;4;or;5 c0-vec!=!1!cEDefn1,~c0-vec,igen0,2 skip-flags!=!1!cEDefn1,~skip-flags,igen0,2 get-flags!=!1!cEDefn1,~get-flags,igen0,2 env-strip!=!1!cEDefn1,~env-strip,igen0,2 block-result!=!1!cEDefn1,~block-result,igen0,3 begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,parse)
$(call ^require,gen)
$(call ^require,gen0)
~ml.special-print = !:IL2 info $(call ^d,!:IL6 $(call ~c0-vec,$3,$1))
~ml.special-current-env = !:IL0 $(call ^d,$1)
~ml.special-current-file-line = !:IL0 $(call ^d,$(~*compile-file*):$(call ~describe-lnum,$(call ^Y,$(call ~hash-get,:m,$1),,,,,,,,,$`(if $`(filter !:EDefn8,$`(firstword $`1)),$`(word 2,$`1),$`(call ~form-index,$(call ^E,$2)))),$(~*compile-subject*)))
~ml.special-concat = $(call ~il-concat,$(call ~c0-vec,$3,$1))
~ml.special-vector = $(call ~il-concat,$(call ~intersperse,!:IL0 !0,$(foreach f,$3,$(call ^d,$(call ~il-demote,$(call ~c0,$(call ^u,$f),$1))))))
~subst-x = $(if $1,$(call ~subst-x,$(wordlist 3,99999999,$1),!:IL2 subst $(call ~conj,$(wordlist 1,2,$1),$2)),$2)
~ml.special-subst = $(if $(filter %2 %4 %6 %8 %0 1,$(words $3)),$(call ~gen-error,$2,$(if ,,(subst {FROM TO}+ STR) accepts 2n+1 arguments, not %s),$(words $3)),$(call ~subst-x,$(call ~c0-vec,$(call ~butlast,$3),$1),$(call ~c0,$(call ~promote,$(lastword $3)),$1)))
~c0-set = $(call ^Y,$(call ~resolve,$2,$1),$2,$3,$4,$1,,,,,$`(if $`(filter !:P2,$`(firstword $`2)),$`(if $`(filter !:EDefn0,$`(firstword $`1)),!:IL3 ^set $`(call ~append,$`(call ^d,!:IL0 $`(call ^d,$`(call ^n,2,$`1))) $`(call ^d,$`3),$`(if $`4,$`(call ^d,$`4))),$`(if $`(filter !:EDefn1,$`(firstword $`1)),!:IL3 ^fset $`(call ~append,$`(call ^d,!:IL0 $`(call ^d,$`(call ^n,2,$`1))) $`(call ^d,$`3),$`(if $`4,$`(call ^d,$`4))),$`(call ~gen-error,$`2,%q is not a global variable,$`(call ~symbol-name,$`2)))),$`(call ~err-expected,S,$`2,,$(call ^E,$5),$(call ^E,$6))))
~ml.special-set = $(or $(call ~check-argc,2 or 3,$3,$2),$(call ~c0-set,$1,$(call ^u,$(word 1,$3)),$(call ~c0,$(call ~nth,2,$3),$1),$(if $(call ~nth,3,$3),$(call ~c0,$(call ~nth,3,$3),$1)),NAME,(set NAME VALUE [RETVAL])))
~ml.special-? = $(call ^Y,$(call ~resolve,$(call ^u,$(word 1,$3)),$1),$1,$2,$3,,,,,,$`(or $`(if $`(call ~eq?,-,$`1),$`(call ~err-expected,S,$`(call ^u,$`(word 1,$(call ^E,$3))),$`3,FUNC,(? FUNC ARGS...)),$`(if $`(filter !:EDefn1,$`(firstword $`1)),$`(if $`(if $`(call ~eq?,$`(call ^n,2,$`1),:),,1),$`(call ^Y,^t,$`(call ~cons,!:IL0 $`(call ^d,$`(call ^n,2,$`1)),$`(call ~c0-vec,$`(wordlist 2,99999999,$(call ^E,$3)),$`2)),,,,,,,,!:IL3 $``(call ^d,$``1) $``2)),$`(if $`(filter !:EDefn5,$`(firstword $`1)),$`(call ^Y,^t,$`(call ~cons,!:IL0 $`(call ^d,$`(call ^n,2,$`1)),$`(call ~c0-vec,$`(wordlist 2,99999999,$(call ^E,$3)),$`2)),,,,,,,,!:IL2 $``1 $``2)))),$`(if $`1,$`(call ~gen-error,$`(call ^u,$`(word 1,$(call ^E,$3))),FUNC in (? FUNC ...) is not traceable),$`(call ~gen-error,$`(call ^u,$`(word 1,$(call ^E,$3))),undefined variable: %q,$`(call ~symbol-name,$`3)))))
~read-pairs-r = $(if $(if $1,,1),$3,$(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$1)))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$1))))))),$(if $(call ~nth,2,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),$(if $(if $(call ~nth,3,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),,1),$(call ~read-pairs-r,$(wordlist 2,99999999,$1),$2,$(call ~conj,$3,$(wordlist 3,99999999,$(call ^u,$(word 1,$1))))),$(call ~gen-error,$(call ~nth,3,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),extra form after value in %q,$2)),$(call ~err-expected,,$(call ~nth,2,$(wordlist 3,99999999,$(call ^u,$(word 1,$1)))),$(call ^u,$(word 1,$1)),VALUE,$2)),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$1))))),$(call ^u,$(word 1,$1)),VAR,$2)),$(call ~err-expected,L,$(call ^u,$(word 1,$1)),,(VAR VALUE),$2)))
~read-pairs = $(if $(filter !:P0,$(firstword $1)),$(call ~read-pairs-r,$(wordlist 3,99999999,$1),$3,),$(call ~err-expected,L,$1,$2,((VAR VALUE)...),$3))
~let-where := (let ((VAR VALUE)...) BODY)
~ml.special-let = $(call ~c0,$(call ^Y,$(wordlist 2,99999999,$3),$(call ~read-pairs,$(call ^u,$(word 1,$3)),$2,$(~let-where)),,,,,,,,$`(or $`(if $`(filter !:P7,$`(firstword $`2)),$`2),!:P0 0 $`(call ~cons,!:P0 0 $`(call ~append,$`(call ^d,!:P2 0 lambda),$`(call ^d,!:P0 0 $`(foreach p,$`2,$`(call ^d,$`(call ~nth,1,$`(call ^u,$`p))))),$`1),$`(foreach p,$`2,$`(call ^d,$`(call ~nth,2,$`(call ^u,$`p))))))),$1)
~letg-where := (let-global ((VAR VALUE)...) BODY)
~letg-expand = $(or $(if $(filter !:P7,$(firstword $4)),$4),$(if $(if $4,,1),$(call ~c0-block,$3,$1)),$(call ~c0-set,$1,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$(call ~c0-set,$1,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$(call ~c0,$(call ~nth,2,$(call ^u,$(word 1,$4))),$1),$(call ~c0,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$1),,),$(call ~letg-expand,$1,$(call ^u,$(word 1,$(call ^u,$(word 1,$4)))),$3,$(wordlist 2,99999999,$4)),,))
~ml.special-let-global = $(call ~letg-expand,$1,$2,$(wordlist 2,99999999,$3),$(call ~read-pairs,$(call ^u,$(word 1,$3)),$2,$(~letg-where)))
~let&-where := (let& ((VAR VALUE)...) BODY)
~let&-env = $(call ~reverse,$(filter %,$(foreach p,$1,$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(call ^u,$p))))),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$(call ^u,$p)))),!:EDefn2 $(call ^d,$(call ~nth,2,$(call ^u,$p))) )))))
~ml.special-let& = $(call ^Y,$(wordlist 2,99999999,$3),$(call ~read-pairs,$(call ^u,$(word 1,$3)),$2,$(~let&-where)),$1,,,,,,,$`(if $`(filter !:P7,$`(firstword $`2)),$`2,$`(call ~c0-block,$`1,$`(call ~append,$`(call ~let&-env,$`2),$`3))))
~c0-for = $(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$3)))),$(if $(wordlist $(words $(wordlist 2,99999999,$4)),99999999,$3),!:IL2 foreach $(call ^d,!:IL0 $(call ^d,$(call ^n,3,$(call ^u,$(word 1,$3))))) $(call ^d,$(call ~c0,$(call ~nth,2,$3),$1)) $(call ^d,$(call ^Y,$(call ~c0-block,$(wordlist $(words $(wordlist 2,99999999,$4)),99999999,$3),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$3))),!:EDefn6 $(call ^d,$(call ^Y,!:IL1 $(call ^d,$(call ^n,3,$(call ^u,$(word 1,$3)))),,,,,,,,,$5)),$1)),,,,,,,,,$6)),$(call ~err-expected,,,$2,$(word $(words . . $3),$(subst $],,$4)),$4)),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,VAR,$4))
~ml.special-foreach = $(call ~c0-for,$1,$2,$3,(foreach VAR LIST BODY),$(value ~identity),$(value ~identity))
~ml.special-for = $(call ~c0-for,$1,$2,$3,(for VAR VEC BODY),$(value ~il-promote),$(value ~il-demote))
~ml.special-append-for = !:IL2 filter $(call ^d,!:IL0 %) $(call ^d,$(call ~c0-for,$1,$2,$3,(append-for VAR VEC BODY),$(value ~il-promote),$(value ~identity)))
~concat-for-where := (concat-for VAR VEC DELIM BODY)
~il-subst = $(if $(filter !:IL0,$(firstword $3)),!:IL0 $(call ^d,$(subst $1,$2,$(call ^n,2,$3))),!:IL2 subst $(call ^d,!:IL0 $(call ^d,$1)) $(call ^d,!:IL0 $(call ^d,$2)) $(call ^d,$3))
~il-spc-encode = $(call ~il-subst, ,|0,$(call ~il-subst,|,|1,$1))
~il-spc-decode = $(call ~il-subst,|1,|,$(call ~il-subst,|0, ,$1))
~ml.special-concat-for = $(or $(if $(filter !:P1,$(firstword $(call ~nth,3,$3))),$(if $(call ~eq?,$(call ^n,3,$(call ~nth,3,$3)), ),$(call ~c0-for,$1,$2,$3,$(~concat-for-where),$(value ~il-promote),$(value ~identity)))),$(call ~il-spc-decode,!:IL2 subst $(call ^d,!:IL0 !0) $(call ^d,$(call ~il-subst,|,|1,$(call ~c0,$(call ~nth,3,$3),$1))) $(call ^d,$(call ~c0-for,$1,$2,$3,$(~concat-for-where),$(value ~il-promote),$(value ~il-spc-encode)))))
~cond-where := (cond (TEST BODY)...)
~cond-wrap = $(if $(filter !:P0,$(firstword $1)),$(if $(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(if $(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(call ~eq?,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))),else)),$(if $(if $2,,1),$(call ~begin-block,$(wordlist 2,99999999,$(wordlist 3,99999999,$1))),$(call ~gen-error,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),(else ...) is followed by additional clauses)),!:P0 0 $(call ~append,$(call ^d,!:P2 0 if) $(word 1,$(wordlist 3,99999999,$1)) $(call ^d,$(call ~begin-block,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)))),$(if $2,$(call ^d,$2)))),$(if $(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$(call ~err-expected,,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(wordlist 3,99999999,$1),BODY,$(~cond-where)),$(call ~err-expected,,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$(wordlist 3,99999999,$1),TEST,$(~cond-where)))),$(call ~err-expected,L,$1,,(TEST BODY),$(~cond-where)))
~ml.special-cond = $(call ~c0,$(call ~foldr,$(value ~cond-wrap),,$3),$1)
~defn-global-name = $(if $(filter !:EDefn1,$(firstword $1)),$(call ^n,2,$1),$(if $(filter !:EDefn0,$(firstword $1)),$(call ^n,2,$1)))
~ml.special-global-name = $(or $(call ~check-argc,1,$3,$2),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$3)))),$(call ^Y,$(call ~defn-global-name,$(call ~resolve,$(call ^u,$(word 1,$3)),$1)),$(call ^n,3,$(call ^u,$(word 1,$3))),,,,,,,,$`(if $`1,!:IL0 $`(call ^d,$`1),$`(call ~gen-error,$`(call ^u,$`(word 1,$(call ^E,$3))),%q is not a global variable,$`2))),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,NAME,(global-name NAME))))
~defmacro-where := (defmacro (NAME ARG...) BODY)
~ml.special-defmacro = $(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$3)))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))))))),$(call ^Y,$(call ~c0,!:P0 0 $(call ~cons,!:P2 0 define,$3),$1),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3)))))),!:EDefn3 $(call ^d,$(call ~gen-global-name,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3)))))),$1)) x,$1),,,,,,,,!:IL9 $`(call ^d,$`2) $`1),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$3))))),$2,NAME,$(~defmacro-where))),$(call ~err-expected,L,$(call ^u,$(word 1,$3)),$2,(NAME ARG...),$(~defmacro-where)))
~ml.special-use = $(or $(call ~check-argc,1,$3,$2),$(if $(filter !:P1,$(firstword $(call ^u,$(word 1,$3)))),$(call ^Y,$(call ~use-module,$(call ^n,3,$(call ^u,$(word 1,$3)))),$(call ^n,3,$(call ^u,$(word 1,$3))),$1,,,,,,,$`(if $`1,$`(call ~block-result,$(call ^E,$4),$`(call ~append,$`1,$`3),!:IL0 !.),$`(call ~gen-error,use: Cannot find module %q,$`2))),$(call ~err-expected,Q,$(call ^u,$(word 1,$3)),$2,MODULE,(use MODULE))))
$(if $(call ^add-tags,!1:Data0!=DataType!0W!0W!0S!0L),)
~data-where := (data NAME (CTOR ARG...)...)
~read-type-r = $(or $(if $(if $1,,1),$(if $6,$(call ~gen-error,$2,no argument following last flag: %s,$6),!:Data0 $3 $(call ^u,$(word 1,$4)) $(call ^d,$(wordlist 2,99999999,$4)) $5)),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$1)))),$(or $(if $(if $(filter &%,$(call ^n,3,$(call ^u,$(word 1,$1)))),,1),$(call ~read-type-r,$(wordlist 2,99999999,$1),$2,$3,$4 $(if $(call ~eq?,&word,$6),W,$(if $(and $(call ~eq?,&list,$6),$(if $(word 2,$1),,1)),L,S)),$(call ~conj,$5,$(call ^n,3,$(call ^u,$(word 1,$1)))),)),$(if $6,$(call ~gen-error,$(call ^u,$(word 1,$1)),two type flags supplied for one argument)),$(if $(filter &list &word,$(call ^n,3,$(call ^u,$(word 1,$1)))),$(call ~read-type-r,$(wordlist 2,99999999,$1),$2,$3,$4,$5,$(call ^n,3,$(call ^u,$(word 1,$1))))),$(call ~gen-error,$(call ^u,$(word 1,$1)),$(if ,,unknown flag [supported: &list, &word]))),$(call ~err-expected,S,$(call ^u,$(word 1,$1)),$2,ARG,$(~data-where))))
~read-type = $(if $(filter !:P0,$(firstword $1)),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$1))))),$(if $(filter !:P1,$(firstword $(call ~nth,2,$(wordlist 3,99999999,$1)))),$(call ~read-type-r,$(wordlist 3,99999999,$(wordlist 3,99999999,$1)),$1,$(call ^n,3,$(call ~nth,2,$(wordlist 3,99999999,$1))),$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))),,),$(call ~read-type-r,$(wordlist 2,99999999,$(wordlist 3,99999999,$1)),$1,$2,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$1)))),,)),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$1))),$3,CTOR,$(~data-where))),$(call ~err-expected,L,$1,$3,(CTOR ...),$(~data-where)))
~read-types = $(if $(filter !:P7,$(firstword $5)),$5,$(if $(if $3,,1),$(call ~append,$6,$(if $5,$(call ^d,$5))),$(call ~read-types,$1,$2,$(wordlist 2,99999999,$3),$(call ~append,$4,1),$(call ~read-type,$(call ^u,$(word 1,$3)),$2$(words $4),$1),$(call ~append,$6,$(if $5,$(call ^d,$5))))))
~ml.special-data = $(call ~env-strip,$4,$(call ^Y,$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$3)))),$(call ~read-types,$2,!:$(call ^n,3,$(call ^u,$(word 1,$3))),$(call ~skip-flags,$3,1)),$(call ~err-expected,S,$(call ^u,$(word 1,$3)),$2,NAME,$(~data-where))),$(if $(filter &public,$(call ~get-flags,$3,1)),x,p),$1,,,,,,,$`(or $`(if $`(filter !:P7,$`(firstword $`1)),$`1),!:IL9 $`(call ^d,$`(call ~append,$`(filter %,$`(foreach ty,$`1,$`(if $`(filter !:Data0,$`(firstword $`(call ^u,$`(ty)))),$`(call ~hash-bind,$`(word 3,$`(call ^u,$`(ty))),!:EDefn4 $`(call ^d,$`(call ^n,4,$`(call ^u,$`(ty)))) $`2 $`(call ^d,$`(word 2,$`(call ^u,$`(ty)))))))),$`3)) !:IL3 ^add-tags $`(call ^d,!:IL0 $`(call ^d,$`(filter %,$`(foreach ty,$`1,$`(if $`(filter !:Data0,$`(firstword $`(call ^u,$`(ty)))),$`(call ~hash-bind,$`(word 2,$`(call ^u,$`(ty))),$`(call ~append,$`(word 3,$`(call ^u,$`(ty))),$`(call ^n,4,$`(call ^u,$`(ty)))))))))))))
~case-where := (case VALUE (PATTERN BODY)...)
~arg-bindings = $(foreach n,$(call ~indices-x,$2,1),$(call ~hash-bind,$(call ~symbol-name,$(call ~nth,$n,$1)),!:EDefn6 $(call ^d,$(if $(call ~eq?,S,$(word $n,$2)),!:IL3 ^n $(call ^d,!:IL0 $(call ^d,$(call ~1+,$n))) $(call ^d,$3),$(if $(call ~eq?,W,$(word $n,$2)),!:IL2 word $(call ^d,!:IL0 $(call ^d,$(call ~1+,$n))) $(call ^d,$3),!:IL2 wordlist $(call ^d,!:IL0 $(call ^d,$(call ~1+,$n))) $(call ^d,!:IL0 99999999) $(call ^d,$3))))))
~c0-matches = $(foreach c,$1,$(call ^d,$(if $(filter !:P0,$(firstword $(call ^u,$c))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))))),$(call ~c0-block,$(wordlist 2,99999999,$(wordlist 3,99999999,$(call ^u,$c))),$(call ~hash-bind,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))),!:EDefn6 $(call ^d,$2),$3)),$(if $(filter !:P0,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))))),$(or $(call ^Y,$(call ~resolve,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))),$3),$2,$(wordlist 2,99999999,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))))),$(wordlist 2,99999999,$(wordlist 3,99999999,$(call ^u,$c))),,,,,,$`(if $`(filter !:EDefn4,$`(firstword $`1)),!:IL2 if $`(call ^d,!:IL2 filter $`(call ^d,!:IL0 $`(call ^d,$`(call ^n,4,$`1))) $`(call ^d,!:IL2 firstword $`(call ^d,$`2))) $`(call ^d,$`(call ~c0-block,$`4,$`(call ~append,$`(call ~arg-bindings,$`3,$`(call ^n,2,$`1),$`2),$(call ^E,$3)))))),$(if $(filter !:P2,$(firstword $(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))))),$(call ~gen-error,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))),symbol %q does not identify a record type,$(call ^n,3,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))))),$(call ~err-expected,S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c))))))),$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))),CTOR,$(~case-where)))),$(call ~err-expected,L S,$(call ^u,$(word 1,$(wordlist 3,99999999,$(call ^u,$c)))),$(call ^u,$c),PATTERN,$(~case-where)))),$(call ~err-expected,L,$(call ^u,$c),,(PATTERN BODY),$(~case-where)))))
~case-append-arg = $(if $(filter !:IL2,$(firstword $1)),!:IL2 $(word 2,$1) $(call ~conj,$(wordlist 3,99999999,$1),$2),$1)
~case-fold = $(if $(word 2,$1),$(call ~foldr,$(value ~case-append-arg),$(call ~promote,$(lastword $1)),$(call ~butlast,$1)),$(call ^u,$(word 1,$1)))
~ml.special-case = $(call ^Y,$(call ~c0,$(call ^u,$(word 1,$3)),$1),$1,$3,$2,,,,,,$`(if $`(filter !:P7,$`(firstword $`1)),$`1,$`(if $`(call ^u,$`(word 1,$(call ^E,$3))),$`(call ~case-fold,$`(call ~c0-matches,$`(wordlist 2,99999999,$`3),$`1,$`2)),$`(call ~err-expected,,$`(call ^u,$`(word 1,$(call ^E,$3))),$`4,VALUE,$`(~case-where)))))

endef
 
define ///num.min
# compiled from num.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: sum!=!1!cEDefn1,~sum,x,1, sum-small!=!1!cEDefn1,~sum-small,p,1, range!=!1!cEDefn1,~range,x,2, 0-!=!1!cEDefn1,~0-,p,1, u-range!=!1!cEDefn1,~u-range,p,2, mod!=!1!cEDefn1,~mod,x,2, mod-9!=!1!cEDefn1,~mod-9,p,1, mod-8!=!1!cEDefn1,~mod-8,p,1, mod-5!=!1!cEDefn1,~mod-5,p,1, mod-3!=!1!cEDefn1,~mod-3,p,1, mod-2!=!1!cEDefn1,~mod-2,p,1, mod-1!=!1!cEDefn1,~mod-1,p,1, div-10!=!1!cEDefn1,~div-10,p,1, mod-10!=!1!cEDefn1,~mod-10,p,1, mod-10!=!1!cEDefn1,~mod-10,p,1, umod!=!1!cEDefn1,~umod,p,2, /!=!1!cEDefn1,~/,x,2, u/!=!1!cEDefn1,~u/,p,2;or;3, longdiv!=!1!cEDefn1,~longdiv,p,3, longdiv-next!=!1!cEDefn1,~longdiv-next,p,4, longdiv!=!1!cEDefn1,~longdiv,p,3, digit-range!=!1!cEDefn1,~digit-range,p,5, strdiv!=!1!cEDefn1,~strdiv,p,2, topdigits!=!1!cEDefn1,~topdigits,p,2, ==!=!1!cEDefn1,~==,x,2, <=!=!1!cEDefn1,~<=,x,2, >=!=!1!cEDefn1,~>=,x,2, <!=!1!cEDefn1,~<,x,2, >!=!1!cEDefn1,~>,x,2, ^!=!1!cEDefn1,~^,x,2, *!=!1!cEDefn1,~*,x,2, -!=!1!cEDefn1,~-,x,2, +!=!1!cEDefn1,~+,x,2, u^!=!1!cEDefn1,~u^,p,2, u^2!=!1!cEDefn1,~u^2,p,1, u/2!=!1!cEDefn1,~u/2,p,1, nodd!=!1!cEDefn1,~nodd,p,1, cmp!=!1!cEDefn1,~cmp,p,2, ucmp!=!1!cEDefn1,~ucmp,p,2, u-!=!1!cEDefn1,~u-,p,2, ndecode!=!1!cEDefn1,~ndecode,p,1, u*!=!1!cEDefn1,~u*,p,2, u+1!=!1!cEDefn1,~u+1,p,1, u+!=!1!cEDefn1,~u+,p,2, ucarry!=!1!cEDefn1,~ucarry,p,1, udecode!=!1!cEDefn1,~udecode,p,2, uencode!=!1!cEDefn1,~uencode,p,1, nnorm!=!1!cEDefn1,~nnorm,p,1, sign!=!1!cEDefn1,~sign,p,1, intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
~sign = $(findstring -,$1)
~nnorm = $(strip $(subst ., .,$(call ~butlast,$(subst -.,- .,$(subst i.,i .,$(subst $  ,,$1.))))))
~uencode = $(call ~reverse,$(subst 0, .,$(subst -,,$(subst 1,0i,$(subst 2,1i,$(subst 3,2i,$(subst 4,3i,$(subst 5,4i,$(subst 6,5i,$(subst 7,6i,$(subst 8,7i,$(subst 9,8i,$1))))))))))))
~udecode = $(and $(findstring i,$1),$2)$(or $(subst 8i,9,$(subst 7i,8,$(subst 6i,7,$(subst 5i,6,$(subst 4i,5,$(subst 3i,4,$(subst 2i,3,$(subst 1i,2,$(subst 0i,1,$(subst .,0,$(subst $  ,,$(wordlist 2,99999999,$(subst .i, .i,.$(subst $  ,,$(call ~reverse,$1))))))))))))))),0)
~ucarry = $(call ~while,$`(findstring iiiiiiiiii .,$`1),$`(subst iiiiiiiiii ., .i,$`1),$1 .)
~u+ = $(call ~ucarry,$(subst ..,.,$(subst i.,i,$(join $1,$2))))
~u+1 = $(call ~ucarry,$(join $(or $1,.),i))
~u* = $(call ~u+,$(subst i,$(subst .,,$(firstword $1)),$2),$(if $(word 2,$1),$(call ~u*,$(wordlist 2,99999999,$1),. $2)))
~ndecode = $(call ~udecode,$(if $(findstring -,$1),$(wordlist 2,$(words $1),. $(call ~u+1,$(foreach d,$1,$(subst $d,.,.iiiiiiiii)))),$1),$(findstring -,$1))
~u- = $(call ~nnorm,$(subst .i-,.,$(call ~u+,$1,$(join $(foreach d,$(subst ..,.,$(join $(subst i,,$1),$2)),$(subst $d,.,.iiiiiiiii)),i) .-)))
~ucmp = $(if $(or $1,$2),$(or $(call ~ucmp,$(wordlist 2,99999999,$1),$(wordlist 2,99999999,$2)),$(if $(findstring $(word 1,$2)i,$(word 1,$1)),a),$(if $(findstring $(word 1,$1)i,$(word 1,$2)),b)))
~cmp = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`(call ~xor,$`1,$`2),$`(and $`(or $`(findstring i,$`3),$`(findstring i,$`4)),$`(if $`2,a,b)),$`(filter a b,$`(subst -a,b,$`(subst -b,a,$`1$`(call ~ucmp,$`3,$`4))))))
~nodd = $(findstring i,$(subst ii,,$(word 1,$1)))
~u/2 = $(call ~nnorm,$(wordlist 2,99999999,$(call ~ucarry,$(subst i,iiiii,$1))))
~u^2 = $(call ~u*,$1,$1)
~u^ = $(if $(call ~nodd,$2),$(call ~nnorm,$(call ~u*,$1,$(call ~u^2,$(call ~u^,$1,$(call ~u/2,$2))))),$(if $(findstring i,$2),$(call ~nnorm,$(call ~u^2,$(call ~u^,$1,$(call ~u/2,$2)))),.i))
~+ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`(call ~xor,$`1,$`2),$`(call ~ndecode,$`(if $`2,$`(call ~u-,$`3,$`4),$`(call ~u-,$`4,$`3))),$`(call ~udecode,$`(call ~u+,$`3,$`4),$`1)))
~- = $(call ~+,$1,$(subst --,,-$2))
~* = $(call ~udecode,$(call ~u*,$(call ~uencode,$1),$(call ~uencode,$2)),$(call ~xor,$(call ~sign,$1),$(call ~sign,$2)))
~^ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~uencode,$1),$(call ~uencode,$2),,,,,,$`(if $`2,nan,$`(call ~udecode,$`(call ~u^,$`3,$`4),$`(and $`1,$`(call ~nodd,$`4),-))))
~> = $(if $(filter a,$(call ~cmp,$1,$2)),1)
~< = $(if $(filter b,$(call ~cmp,$1,$2)),1)
$(if ,,~>=) = $(if $(filter b,$(call ~cmp,$1,$2)),,1)
$(if ,,~<=) = $(if $(filter a,$(call ~cmp,$1,$2)),,1)
$(if ,,~==) = $(if $(call ~cmp,$1,$2),,1)
~topdigits = $(call ^Y,$(wordlist $2,99999999,$1),,,,,,,,,$`(subst .,,$`(word 1,$`1)$`(subst i,iiiiiiiiii,$`(word 2,$`1)$`(subst i,iiiiiiiiii,$`(word 3,$`1)))))
~strdiv = $(subst I,i,$(subst i,,$(subst $2,I,$1)))
~digit-range = $(call ^Y,$(call ~topdigits,$1,$5),$(call ~topdigits,$2,$5),$3,$4,,,,,,.$`(call ~strdiv,$`1,$`2$`(if $`4,i)) .$`(patsubst iiiiiiiii%,iiiiiiiii,$`(call ~strdiv,$`1$`(if $`3,i),$`2)))
~longdiv-next = $(call ~append,$(if $3,$(call ~longdiv,$(call ~append,$(lastword $3),$2),$(call ~butlast,$3),$4)),$1)
~longdiv = $(call ^Y,$(call ~digit-range,$1,$3,$2,$(word 3,$3),$(patsubst 0,1,$(words $(wordlist 2,99999999,$3)))),$1,$3,$2,,,,,,$`(call ^Y,$`(call ~u-,$`2,$`(call ~ucarry,$`(subst i,$`(subst .,,$`(word 1,$`1)),$`3))),$`2,$`3,$`4,$`(word 1,$`1),$`(word 2,$`1),,,,$``(if $``(or $``(call ~eq?,$``5,$``6),$``(filter b,$``(call ~ucmp,$``1,$``3))),$``(call ~longdiv-next,$``5,$``1,$``4,$``3),$``(call ~longdiv-next,$``6,$``(call ~u-,$``1,$``3),$``4,$``3))))
~u/ = $(if $(word $(words . $2),$1),$(call ~u/,$(wordlist 2,99999999,$1),$2,$(call ~append,$3,$(call ^u,$(word 1,$1)))),$(call ~longdiv,$1,$3,$2))
~/ = $(call ^Y,$(call ~sign,$1),$(call ~sign,$2),$(call ~nnorm,$(call ~uencode,$1)),$(call ~nnorm,$(call ~uencode,$2)),,,,,,$`(if $`(if $`4,,1),nan,$`(call ~udecode,$`(call ~u/,$`3,$`4),$`(call ~xor,$`1,$`2))))
~umod = $(call ^Y,$1,$2,$(subst .,,$2),$(subst $(subst .,,$2),,iiiiiiiiii),,,,,,$`(if $`(call ~eq?,$`4,),$`(subst $`3,,$`(word 1,$`1)),$`(if $`(call ~eq?,$`4,i),.$`(subst $`3,,$`(subst $`  ,,$`(subst .,,$`1))),$`(call ~u-,$`1,$`(call ~u*,$`(call ~u/,$`1,$`2),$`2)))))
~mod-10 = $(if $(filter %1 %2 %3 %4,$1),$(if $(filter %1 %2,$1),$(if $(filter %1,$1),1,2),$(if $(filter %3,$1),3,4)),$(if $(filter %5 %6 %7 %8,$1),$(if $(filter %5 %6,$1),$(if $(filter %5,$1),5,6),$(if $(filter %7,$1),7,8)),$(if $(filter %9,$1),9,0)))
~mod-10 = $(if $(filter %8 %9,$1),$(if $(filter %8,$1),8,9),$(words $(filter %1 %3 %5 %7 %9,$1)$(if $(filter %2 %3 %6 %7,$1), 1 1)$(if $(filter %4 %5 %6 %7,$1), 1 1 1 1)))
~div-10 = $(patsubst %$(call ~mod-10,$1),%,$1)
~mod-1 = 0
~mod-2 = $(if $(filter %1 %3 %5 %7 %9,$1),1,0)
~mod-3 = $(or $(subst 11,2,$(subst 111,,$(subst 2,11,$(subst 5,11,$(subst 8,11,$(subst 4,1,$(subst 7,1,$(subst 3,,$(subst 6,,$(subst 9,,$(subst 0,,$1))))))))))),0)
~mod-5 = $(word $(subst 0,10,$(call ~mod-10,$1)),1 2 3 4 0 1 2 3 4 0)
~mod-8 = $(subst 8,0,$(subst 9,1,$(call ~mod-10,$1)))
~mod-9 = $(words $(subst 1,1 ,$(subst 111111111,,$(subst 2,11,$(subst 3,21,$(subst 4,31,$(subst 5,41,$(subst 6,51,$(subst 7,61,$(subst 8,71,$(subst 9,,$(subst 0,,$1))))))))))))
~mod = $(if $(filter 1 2 3 5 9 10,$2),$(call ~mod-$2,$1),$(call ^Y,$(call ~sign,$1),$(call ~nnorm,$(call ~uencode,$1)),$(call ~nnorm,$(call ~uencode,$2)),,,,,,,$`(if $`(if $`3,,1),nan,$`(call ~udecode,$`(call ~umod,$`2,$`3),$`1))))
~u-range = $(if $(call ~>=,$1,$2),$(if $(call ~==,$1,$2),$1),$(if $(filter %0,$1),$(if $(filter %9,$2),$(if $(filter 0,$1),0 1 2 3 4 5 6 7 8 9 )$(foreach n,$(call ~u-range,$(or $(patsubst %0,%,$1),1),$(or $(patsubst %9,%,$2),0)),$n0 $n1 $n2 $n3 $n4 $n5 $n6 $n7 $n8 $n9 ),$(call ~u-range,$1,$(call ~-,$2,1)) $2),$1 $(call ~u-range,$(call ~1+,$1),$2)))
~0- = $(subst --,,-$(or $1,0))
~range = $(strip $(if $(call ~>=,$1,0),$(call ~u-range,$1,$2),$(addprefix -,$(call ~reverse,$(call ~u-range,$(if $(call ~<,$2,0),$(call ~0-,$2),1),$(call ~0-,$1)))) $(if $(call ~>=,$2,0),$(call ~u-range,0,$2))))
~sum-small = $(if $1,$(call ~+,$(word 1,$1),$(call ~sum-small,$(wordlist 2,99999999,$1))),0)
~sum = $(if $(word 50,$1),$(call ~+,$(call ~sum,$(wordlist 1,$(call ~/,$(words $1),2),$1)),$(call ~sum,$(wordlist $(call ~1+,$(call ~/,$(words $1),2)),99999999,$1))),$(call ~sum-small,$1))

endef
 
define ///parse.min
# compiled from parse.scm
# Requires: core runtime
# Requires: scam-ct
# Exports: parse-text!=!1!cEDefn1,~parse-text,x,1, parse-subject!=!1!cEDefn1,~parse-subject,x,1, parse-forms!=!1!cEDefn1,!c,p,3,subj;pos;k,!2!cP0;3903;!3!cP2:3904:parse-forms-r;!3!cP2:3906:subj;!3!cP2:3908:k;!3!cP0:3910:!4!cP2@3911@parse-exp:!4!cP2@3913@subj:!4!cP2@3915@pos;!3!cP2:3918:nil parse-forms-r!=!1!cEDefn1,~parse-forms-r,p,4, describe-error!=!1!cEDefn1,~describe-error,x,3, get-error-msg!=!1!cEDefn1,~get-error-msg,p,1, describe-line!=!1!cEDefn1,~describe-line,p,2, describe-lnum!=!1!cEDefn1,~describe-lnum,x,2, parse-exp!=!1!cEDefn1,~parse-exp,p,2, parse-x!=!1!cEDefn1,~parse-x,p,3, parse-x2!=!1!cEDefn1,~parse-x2,p,3, parse-array!=!1!cEDefn1,~parse-array,p,2, parse-list!=!1!cEDefn1,!c,p,2,subj;pos,!2!cP0;2518;!3!cP2:2519:parse-seq;!3!cP2:2521:subj;!3!cP1:2523:);!3!cP2:2527:pos;!3!cP0:2529:!4!cP2@2530@parse-exp:!4!cP2@2532@subj:!4!cP0@2534@!5!cP2!402535!401+@!5!cP2!402537!40pos;!3!cP2:2541:nil parse-seq!=!1!cEDefn1,~parse-seq,p,5, parse-seq-err!=!1!cEDefn1,~parse-seq-err,p,4, new-Q!=!1!cEDefn1,~new-Q,p,3, parse-exp!=!1!cEDefn1,~parse-exp,p,2, POut-format!=!1!cEDefn1,~POut-format,p,1, POut-form!=!1!cEDefn1,!c,p,1,st,!2!cP0;1954;!3!cP2:1955:rest;!3!cP2:1957:st POut-pos!=!1!cEDefn1,!c,p,1,st,!2!cP0;1934;!3!cP2:1935:word;!3!cP1:1937:1;!3!cP2:1939:st POut!=!1!cEDefn1,!c,p,2,pos;form,!2!cP0;1910;!3!cP2:1911:concat;!3!cP2:1913:pos;!3!cP1:1915:@;!3!cP2:1919:form find-word!=!1!cEDefn1,~find-word,p,3, pdec-str!=!1!cEDefn1,~pdec-str,p,1, pdec!=!1!cEDefn1,~pdec,x,1, penc!=!1!cEDefn1,~penc,x,1, expand-spaces!=!1!cEDefn1,~expand-spaces,p,1, compress-spaces!=!1!cEDefn1,~compress-spaces,p,1, compact-comments!=!1!cEDefn1,~compact-comments,p,1, format-form!=!1!cEDefn1,~format-form,x,1, form-set-indices!=!1!cEDefn1,~form-set-indices,x,2, form-typename!=!1!cEDefn1,~form-typename,x,1, form-index!=!1!cEDefn1,~form-index,x,1, PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,x,1, string-value!=!1!cEDefn1,~string-value,x,1, symbol-to-string!=!1!cEDefn1,~symbol-to-string,x,1, symbol-name!=!1!cEDefn1,~symbol-name,x,1, PList!=!1!cEDefn4,W;L,x,!2!cP0 PString!=!1!cEDefn4,W;S,x,!2!cP1 PSymbol!=!1!cEDefn4,W;S,x,!2!cP2 PQuote!=!1!cEDefn4,W;L,x,!2!cP3 PQQuote!=!1!cEDefn4,W;L,x,!2!cP4 PUnquote!=!1!cEDefn4,W;L,x,!2!cP5 PSplice!=!1!cEDefn4,W;L,x,!2!cP6 PError!=!1!cEDefn4,W;S,x,!2!cP7 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(if $(call ^add-tags,!1:P0!=PList!0W!0L !1:P1!=PString!0W!0S !1:P2!=PSymbol!0W!0S !1:P3!=PQuote!0W!0L !1:P4!=PQQuote!0W!0L !1:P5!=PUnquote!0W!0L !1:P6!=PSplice!0W!0L !1:P7!=PError!0W!0S),)
~symbol-name = $(if $(filter !:P2,$(firstword $1)),$(call ^n,3,$1),ERROR:symbol-name($1))
~symbol-to-string = $(if $(filter !:P2,$(firstword $1)),!:P1 $(word 2,$1) $(call ^d,$(call ^n,3,$1)),ERROR:symbol-to-string($1))
~string-value = $(if $(filter !:P1,$(firstword $1)),$(call ^n,3,$1),ERROR:string-value($1))
~PList-is-empty? = $(if $(filter !:P0,$(firstword $1)),$(if $(wordlist 3,99999999,$1),,1),ERROR:PList.is-empty?($1))
~form-index = $(if $(filter !:%,$(word 1,$1)),$(word 2,$1),$(if $(call ~numeric?,$1),$1,0))
~form-typename = $(if $(filter !:P0,$(firstword $1)),list,$(if $(filter !:P2,$(firstword $1)),symbol,$(if $(filter !:P1,$(firstword $1)),literal string,invalid form)))
~form-set-indices = $(if $2,$(if $(filter !:P1,$(firstword $2)),!:P1 $1 $(call ^d,$(call ^n,3,$2)),$(if $(filter !:P2,$(firstword $2)),!:P2 $1 $(call ^d,$(call ^n,3,$2)),$(if $(filter !:P7,$(firstword $2)),!:P7 $1 $(call ^d,$(call ^n,3,$2)),$(if $(filter !:P0,$(firstword $2)),!:P0 $1 $(foreach f,$(wordlist 3,99999999,$2),$(call ^d,$(call ~form-set-indices,$1,$(call ^u,$f)))),$(if $(filter !:P3,$(firstword $2)),!:P3 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),$(if $(filter !:P4,$(firstword $2)),!:P4 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),$(if $(filter !:P5,$(firstword $2)),!:P5 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),$(if $(filter !:P6,$(firstword $2)),!:P6 $1 $(call ~form-set-indices,$1,$(wordlist 3,99999999,$2)),ERROR:form-set-indices($2))))))))))
~format-form = $(if $(filter !:P0,$(firstword $1)),($(foreach f,$(wordlist 3,99999999,$1),$(call ~format-form,$(call ^u,$f)))),$(if $(filter !:P1,$(firstword $1)),$(call ~format,$(call ^n,3,$1)),$(if $(filter !:P2,$(firstword $1)),$(call ^n,3,$1),$(if $(filter !:P3,$(firstword $1)),'$(call ~format-form,$(wordlist 3,99999999,$1)),$(if $(filter !:P4,$(firstword $1)),`$(call ~format-form,$(wordlist 3,99999999,$1)),$(if ,,,$(call ~format,$1)))))))
define ~compact-comments
$(subst ; ;,;;,$(subst !s, ,$(subst $  ,,$(foreach c,$(subst ;, ;,$(subst 
, 
,$(subst ", ",$(subst $  ,!s,$1)))),$(if $(filter ;%,$c),$(subst !s,,$c)!s,$c)))))
endef
define ~compress-spaces
$(subst !6!6,!c,$(subst !2!0!2!0,!6,$(subst !0!0!0,!0!2,$(subst 
!0!0,
!2,$(subst 
 !0,
!0,$1)))))
endef
~expand-spaces = $(subst !2,!0!0,$(subst !6,!2!2!2,$(subst !c,!6!6,$1)))
define ~penc
$(call ~compress-spaces,$(call ~compact-comments,$(subst !+, !0!+ ,$(subst $   , ,$(subst 0  !,0!,$(subst %, !p ,$(subst :, : ,$(subst $`, $` ,$(subst $[, $[ ,$(subst $], $] ,$(subst [, [ ,$(subst ], ] ,$(subst ", " ,$(subst 
, 
 ,$(subst !0, !0 ,$(subst ;, ; ,$(subst \",!Q,$(subst \\,!b,$(subst ', ' ,$(subst `, ` ,$(subst $(if ,,, @),$(if ,,,@ ),$(subst $(if ,,,),$(if ,, , ),$(if $1,$(call ~demote,$1))))))))))))))))))))))))
endef
~pdec = $(call ~promote,$(call ~expand-spaces,$(subst !p,%,$(subst !b,\\,$(subst !Q,\",$(subst $  ,,$(subst !0!+,!+,$1)))))))
define ~pdec-str
$(or $(call ~expand-spaces,$(subst !p,%,$(subst !b,\,$(subst !Q,",$(subst \n,
,$(subst \t,!+,$(subst $  ,,$(subst !0!+,!+,$1)))))))),!.)
endef
~find-word = $(foreach p,$(call ~1+,$(call ~1+,$2)),$(if $(filter $3,$(or $(wordlist $2,$p,$1),$3)),$(if $(filter $3,$(or $(word $2,$1),$3)),$2,$(foreach q,$(call ~1+,$2),$(if $(filter $3,$(or $(word $q,$1),$3)),$q,$p))),$(call ~find-word,$1,$(call ~1+,$p),$3)))
~POut-format = $(if $(and $(call ~numeric?,$(word 1,$1)),$(filter !:%,$(word 2,$1))),(POut $(word 1,$1) $(call ~format,$(wordlist 2,99999999,$1))))
~new-Q = $3 $(if $(word $3,$1),!:P1 $2 $(call ^d,$(call ~promote,$(call ~pdec-str,$(subst ",,$(wordlist $2,$3,$1))))),!:P7 $2 ")
~parse-seq-err = $(if $(filter .,$4),$2 !:P7 $2 $(call ^d,$(subst ],[,$(subst $],$[,$1))),$3 !:P7 $3 $(call ^d,$4 $1))
~parse-seq = $(if $(filter !:P7,$(firstword $(wordlist 2,99999999,$4))),$(if $(call ~eq?,$2,$(call ^n,3,$(wordlist 2,99999999,$4))),$(word 1,$4) !:P0 $3 $5,$(call ~parse-seq-err,$2,$3,$(word 2,$(wordlist 2,99999999,$4)),$(call ^n,3,$(wordlist 2,99999999,$4)))),$(call ~parse-seq,$1,$2,$3,$(call ~parse-exp,$1,$(call ~1+,$(word 1,$4))),$(call ~conj,$5,$(wordlist 2,99999999,$4))))
~parse-array = $(call ~parse-seq,$1,],$2,$(call ~parse-exp,$1,$(call ~1+,$2)),$(call ^d,!:P2 0 vector))
~parse-x2 = $(if $(filter !:P7,$(firstword $(wordlist 2,99999999,$3))),$3,$(word 1,$3) $(call ^Y,$2,$(wordlist 2,99999999,$3),,,,,,,,$(if $(filter ',$1),!:P3 $`1 $`2,$(if $(filter `,$1),!:P4 $`1 $`2,$(if $(filter $(if ,,,),$1),!:P5 $`1 $`2,$(if $(filter $(if ,,,@),$1),!:P6 $`1 $`2,!:P7 $(call ^E,$2) $`(call ^d,internal:parse-x2:$(call ^E,$1))))))))
define ~parse-x
$(if $(filter !0% 
% ;% (),$(or $(word $(call ~1+,$3),$2),())),$3 !:P7 $3 $(call ^d,$1),$(call ~parse-x2,$1,$3,$(call ~parse-exp,$2,$(call ~1+,$3))))
endef
define ~parse-exp
$(or $(foreach w,$(word $2,$1),$(if $(filter !0% 
%,$w),$(call ~parse-exp,$1,$(call ~1+,$2)),$(if $(filter $] ],$w),$2 !:P7 $2 $(call ^d,$w),$(if $(filter $[,$w),$(call ~parse-seq,$1,$],$2,$(call ~parse-exp,$1,$(call ~1+,$2)),),$(if $(filter ",$w),$(call ~new-Q,$1,$2,$(call ~find-word,$1,$(call ~1+,$2),")),$(if $(filter ;%,$w),$(call ~parse-exp,$1,$(call ~1+,$(call ~find-word,$1,$2,
%))),$(if $(filter [,$w),$(call ~parse-array,$1,$2),$(if $(filter $(if ,,' ` , ,@),$w),$(call ~parse-x,$w,$1,$2),$(if $(call ~numeric?,$w),$2 !:P1 $2 $(call ^d,$w),$(if $(filter $` : !p,$w),$2 !:P7 $2 $(call ^d,$(call ~pdec,$w)),$2 !:P2 $2 $(call ^d,$(call ~promote,$w)))))))))))),$2 !:P7 $2 .)
endef
define ~describe-lnum
$(words 1 $(filter 
,$(subst 
,
 ,$(wordlist 2,$(or $1,1),x$2))))
endef
define ~describe-line
$(call ^Y,$(call ~promote,$(lastword $(call ~split,
,$(wordlist 2,$(or $1,1),X $2)))),$(call ^u,$(word 1,$(call ~split,
,$(wordlist $(or $1,1),99999999,$2)))),,,,,,,,$`(call ^d,$`(call ~pdec,$`1)) $`(call ^d,$`(call ~pdec,$`(word 1,$`2))) $`(call ^d,$`(call ~pdec,$`(wordlist 2,99999999,$`2))))
endef
~get-error-msg = $(if $(filter ` ',$(word 1,$1)),prefix "$(word 1,$1)" must immediately precede expression,$(if $(filter ( ) [ ],$(word 1,$1)),unmatched "$(word 1,$1)",$(if $(filter ",$(word 1,$1)),unterminated string,$1)))
define ~describe-error
$(if $(filter !:P7,$(firstword $1)),$(call ^Y,$(call ~penc,$2),$(if $3,$3:,line ),$(call ~get-error-msg,$(call ^n,3,$1)),$(word 2,$1),,,,,,$`(if $`(call ~natural?,$`4),$`(call ~sprintf,%s%s: %s
at: %s
,$`2,$`(call ~describe-lnum,$`4,$`1),$`3,$`(call ~concat-vec,$`(call ~describe-line,$`4,$`1),*)),$`(call ~sprintf,%s:?: %s
,$`2,$`3))))
endef
~parse-forms-r = $(if $(filter !:P7,$(firstword $(wordlist 2,99999999,$3))),$(call ^Y,$4,$(if $(call ~eq?,$(call ^n,3,$(wordlist 2,99999999,$3)),.),,$(wordlist 2,99999999,$3)),,,,,,,,$2),$(call ~parse-forms-r,$1,$2,$(call ~parse-exp,$1,$(call ~1+,$(word 1,$3))),$(call ~conj,$4,$(wordlist 2,99999999,$3))))
~parse-subject = $(call ~parse-forms-r,$1,$`(if $`2,$`(call ~conj,$`1,$`2),$`1),$(call ~parse-exp,$1,1),)
~parse-text = $(call ~parse-subject,$(call ~penc,$1))

endef
 
define ///repl.min
# compiled from repl.scm
# Requires: core io parse compile gen num runtime
# Requires: scam-ct
# Exports: repl-file!=!1!cEDefn1,~repl-file,x,1, repl-rep!=!1!cEDefn1,~repl-rep,x,2, repl!=!1!cEDefn1,~repl,x,0, initial-state!=!1!cEDefn2,!2!cP0;1186;!3!cP2:1187:eval-and-print;!3!cP0:1189:!4!cP2@1190@foreach:!4!cP2@1192@lib:!4!cP2@1194@LIBS:!4!cP0@1196@!5!cP2!401197!40concat@!5!cP1!401199!40(require!50"@!5!cP2!401206!40lib@!5!cP1!401208!40")!n;!3!cP0:1216:!4!cP2@1217@compile-prelude:!4!cP2@1219@nil,p read-eval-print!=!1!cEDefn1,~read-eval-print,p,1, eval-and-print!=!1!cEDefn1,~eval-and-print,p,2, describe-env!=!1!cEDefn1,~describe-env,p,2, describe-binding!=!1!cEDefn1,~describe-binding,p,3, help!=!1!cEDefn1,~help,p,0, *2!=!1!cEDefn0,~*2,x *1!=!1!cEDefn0,~*1,x LIBS!=!1!cEDefn0,~LIBS,p sum!=!1!cEDefn1,~sum,inum,1 range!=!1!cEDefn1,~range,inum,2 mod!=!1!cEDefn1,~mod,inum,2 /!=!1!cEDefn1,~/,inum,2 ==!=!1!cEDefn1,~==,inum,2 <=!=!1!cEDefn1,~<=,inum,2 >=!=!1!cEDefn1,~>=,inum,2 <!=!1!cEDefn1,~<,inum,2 >!=!1!cEDefn1,~>,inum,2 ^!=!1!cEDefn1,~^,inum,2 *!=!1!cEDefn1,~*,inum,2 -!=!1!cEDefn1,~-,inum,2 +!=!1!cEDefn1,~+,inum,2 begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 compile-file!=!1!cEDefn1,~compile-file,icompile,6 compile-prelude!=!1!cEDefn1,~compile-prelude,icompile,1 compile-text!=!1!cEDefn1,~compile-text,icompile,4 ct-mod!=!1!cEDefn2,!2!cP1;194;scam-ct,icompile rt-mod!=!1!cEDefn2,!2!cP1;175;runtime,icompile parse-text!=!1!cEDefn1,~parse-text,iparse,1 parse-subject!=!1!cEDefn1,~parse-subject,iparse,1 describe-error!=!1!cEDefn1,~describe-error,iparse,3 describe-lnum!=!1!cEDefn1,~describe-lnum,iparse,2 pdec!=!1!cEDefn1,~pdec,iparse,1 penc!=!1!cEDefn1,~penc,iparse,1 format-form!=!1!cEDefn1,~format-form,iparse,1 form-set-indices!=!1!cEDefn1,~form-set-indices,iparse,2 form-typename!=!1!cEDefn1,~form-typename,iparse,1 form-index!=!1!cEDefn1,~form-index,iparse,1 PList-is-empty?!=!1!cEDefn1,~PList-is-empty?,iparse,1 string-value!=!1!cEDefn1,~string-value,iparse,1 symbol-to-string!=!1!cEDefn1,~symbol-to-string,iparse,1 symbol-name!=!1!cEDefn1,~symbol-name,iparse,1 PList!=!1!cEDefn4,W;L,i,!2!cP0 PString!=!1!cEDefn4,W;S,i,!2!cP1 PSymbol!=!1!cEDefn4,W;S,i,!2!cP2 PQuote!=!1!cEDefn4,W;L,i,!2!cP3 PQQuote!=!1!cEDefn4,W;L,i,!2!cP4 PUnquote!=!1!cEDefn4,W;L,i,!2!cP5 PSplice!=!1!cEDefn4,W;L,i,!2!cP6 PError!=!1!cEDefn4,W;S,i,!2!cP7 file-exists?!=!1!cEDefn1,~file-exists?,iio,1 read-lines!=!1!cEDefn1,~read-lines,iio,1;or;2;or;3 read-file!=!1!cEDefn1,~read-file,iio,1 write-file!=!1!cEDefn1,~write-file,iio,2 getline!=!1!cEDefn1,~getline,iio,1 shell!1!=!1!cEDefn1,~shell!2,iio,1 printn!=!1!cEDefn1,~printn,iio,0;or;more echo-command!=!1!cEDefn1,~echo-command,iio,1 quote-sh-arg!=!1!cEDefn1,~quote-sh-arg,iio,1 intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,io)
$(call ^require,parse)
$(call ^require,compile)
$(call ^require,gen)
$(call ^require,num)
~LIBS := core io parse escape gen0 gen1 compile num repl
~*1 := 
~*2 := 
define ~help
$(and $(info Commands:
  :q or ^D : exit REPL loop
  :        : reset input state
  :e       : show environment
  :E       : show environment (including imported entries)
  ?        : this message

Global variables in REPL:
  *1 = most recent value printed
  *2 = second most recent value
)1,$(call ~printf,LIBS = %s
,$(~LIBS)))
endef
define ~describe-binding
$(if $(or $3,$(if $(filter i%,$(word 3,$2)),,1)),$(if $(filter !:EDefn5,$(firstword $2)),built-in function,$(if $(filter !:EDefn1,$(firstword $2)),$(if $(call ~eq?,$(call ^n,2,$2),:),compound macro,function)$(if $(wordlist 2,99999999,$(call ^n,4,$2)),$(call ~sprintf,
    (%s %s) -> %s,$1,$(call ^u,$(word 1,$(call ^n,4,$2))),$(call ~format-form,$(call ~begin-block,$(wordlist 2,99999999,$(call ^n,4,$2)))))),$(if $(filter !:EDefn0,$(firstword $2)),variable,$(if $(filter !:EDefn2,$(firstword $2)),symbol macro: $(call ~format-form,$(call ^n,2,$2)),$(if $(filter !:EDefn3,$(firstword $2)),executable macro,$(if $(filter !:EDefn4,$(firstword $2)),constructor,)))))))
endef
~describe-env = $(foreach w,$(call ~reverse,$(call ~hash-compact,$1)),$(call ^Y,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$w)))),$(call ~describe-binding,$(call ~promote,$(subst !8,%,$(word 1,$(subst !=, ,$w)))),$(call ~nth,2,$(subst !=, ,$w)),$2),,,,,,,,$`(if $`2,$`(call ~printf,  %s : %s,$`1,$`2))))
~eval-and-print = $(call ^Y,$(call ~compile-text,$1,$2,[console],),$2,$1,,,,,,,$`(if $`(filter $`[ [,$`(if $`(filter !:P7,$`(firstword $`(call ^u,$`(word 1,$`(call ~nth,1,$`1))))),$`(call ^n,3,$`(call ^u,$`(word 1,$`(call ~nth,1,$`1)))))),$`(call ^d,$`3) $`(call ^d,$`2),$`(if $`(filter .,$`(if $`(filter !:P7,$`(firstword $`(call ^u,$`(word 1,$`(call ~nth,1,$`1))))),$`(call ^n,3,$`(call ^u,$`(word 1,$`(call ~nth,1,$`1)))))),!. $`(call ^d,$`2),$`(if $`(call ~nth,1,$`1),$`(and $`(foreach err,$`(call ~nth,1,$`1),$`(call ^d,$`(info $`(call ~describe-error,$`(call ^u,$`(err)),$`3,))))1,!. $`(call ^d,$`2)),$`(and $`(call ^Y,$`(call ^Y,,,,,,,,,,$`(call ~nth,2,$`1)),,,,,,,,,$``(if $``1,$``(and $``(call ^set,~*2,$``(~*1))1,$``(call ^set,~*1,$``1)1,$``(info $``(call ~format,$``1)))))1,!. $`(call ^d,$`(call ~nth,3,$`1)))))))
define ~read-eval-print
$(call ^Y,$(call ~getline,$(if $(call ^u,$(word 1,$1)),+ ,> )),$(call ~nth,1,$1),$(call ~nth,2,$1),$1,,,,,,$`(if $`(call ~eq?,$`1,?
),$`(and $`(call ~help)1,$`4),$`(if $`(call ~eq?,$`1,:
),!. $`(call ^d,$`3),$`(if $`(call ~eq?,$`1,:q
),,$`(if $`(call ~eq?,$`1,),,$`(if $`(call ~eq?,$`1,:e
),$`(and $`(call ~describe-env,$`3,)1,$`4),$`(if $`(call ~eq?,$`1,:E
),$`(and $`(call ~describe-env,$`3,1)1,$`4),$`(call ~eval-and-print,$`2$`1,$`3))))))))
endef
define ~repl
$(and $(info SCAM interactive mode. Type '?' for help.)1,$(call ~while,$(value ~identity),$(value ~read-eval-print),$(call ~eval-and-print,$(foreach lib,$(~LIBS),(require "$(lib)")
),$(call ~compile-prelude,)))1,$(info ))
endef
define ~repl-rep
$(call ^Y,$(call ~compile-text,$1,$(call ~nth,2,$(call ~eval-and-print,$(foreach lib,$(~LIBS),(require "$(lib)")
),$(call ~compile-prelude,))),$(or $2,[commandline]),),,,,,,,,,$`(if $`(call ~nth,1,$`1),$`(and $`(foreach err,$`(call ~nth,1,$`1),$`(call ^d,$`(info $`(call ~describe-error,$`(call ^u,$`(err)),$(call ^E,$1),))))1,1),$`(info $`(call ^Y,,,,,,,,,,$`(call ~nth,2,$`1)))))
endef
~repl-file = $(call ^Y,$(call ~read-file,$1),,,,,,,,,$`(if $`1,$`(call ^Y,$`(call ~compile-text,$`1,$`(call ~compile-prelude,),$(call ^E,$1),///~),,,,,,,,,$``(if $``(call ~nth,1,$``1),$``(and $``(foreach err,$``(call ~nth,1,$``1),$``(call ^d,$``(info $``(call ~describe-error,$``(call ^u,$``(err)),$`(call ^E,$`1),$(call ^E,$1,`)))))1,1),$``(eval $``(call ~nth,2,$``1)))),$`(and $`(call ~printf,error: empty/missing file %q,$(call ^E,$1))1,1)))

endef
 
define ///runtime.min
# compiled from runtime.scm
# Exports: SCAM_MAIN!=!1!cEDefn0,SCAM_MAIN,p ^start!=!1!cEDefn1,^start,p,3, start!=!1!cEDefn1,~start,p,3, *started*!=!1!cEDefn0,*started*,p ^require!=!1!cEDefn1,^require,p,1, ^required-files!=!1!cEDefn0,~^required-files,p ^add-tags!=!1!cEDefn1,^add-tags,p,1, ^tags!=!1!cEDefn0,^tags,x run-hooks!=!1!cEDefn1,~run-hooks,x,1, add-hook!=!1!cEDefn1,~add-hook,x,2, *hooks*!=!1!cEDefn0,~*hooks*,p bound?!=!1!cEDefn1,!c,x,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,x,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,x,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,x,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,x,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,x,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,x set-rglobal!=!1!cEDefn1,~set-rglobal,x,2;or;3, set-global!=!1!cEDefn1,~set-global,x,2;or;3, nth!=!1!cEDefn1,~nth,x,2, demote!=!1!cEDefn1,~demote,x,1, promote!=!1!cEDefn1,~promote,x,1, apply!=!1!cEDefn1,~apply,x,2, ^E!=!1!cEDefn1,^E,p,1;or;2, ^fset!=!1!cEDefn1,^fset,p,3, ^set!=!1!cEDefn1,^set,p,2;or;3, esc-LHS!=!1!cEDefn1,~esc-LHS,x,1, esc-RHS!=!1!cEDefn1,!c,p,1,str,!2!cP0;1196;!3!cP2:1197:subst;!3!cP1:1199:$;!3!cP1:1203:$$;!3!cP1:1208:#;!3!cP1:1212:$";!3!cP1:1217:!n;!3!cP1:1221:$';!3!cP2:1226:str ^t!=!1!cEDefn1,^t,p,0, F!=!1!cEDefn2,!2!cP0;950;!3!cP2:951:global-name;!3!cP2:953:^f,p TC!=!1!cEDefn2,!2!cP0;937;!3!cP2:938:global-name;!3!cP2:940:^tc,p ^ta!=!1!cEDefn1,^ta,p,0;or;more, ^tc!=!1!cEDefn1,~^tc,p,1;or;more, ^tp!=!1!cEDefn1,^tp,p,2, ^f!=!1!cEDefn1,~^f,p,1, ^apply!=!1!cEDefn1,~^apply,p,1;or;more, ^av!=!1!cEDefn1,^av,p,0, ^v!=!1!cEDefn1,^v,p,0, ^Y!=!1!cEDefn1,^Y,p,0;or;more, ^n!=!1!cEDefn1,^n,p,2, ^u!=!1!cEDefn1,^u,p,1, ^d!=!1!cEDefn1,^d,p,1, SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG,x SCAM_MODS!=!1!cEDefn0,SCAM_MODS,x
SCAM_DEBUG ?=
$(if $(if $(findstring R,$(SCAM_DEBUG)),$(info runtime: $(lastword $(MAKEFILE_LIST)))),)
define \n


endef
 [ := (
 ] := )
" := \#
' := $(\n)
` := $$
& := ,

^d = $(or $(subst $  ,!0,$(subst $ 	,!+,$(subst !,!1,$1))),!.)
^u = $(subst !1,!,$(subst !+,	,$(subst !0, ,$(subst !.,,$1))))
^n = $(call ^u,$(word $1,$2))
^Y = $(call if,,,$(10))
^v = $(subst !.,!. ,$(filter-out %!,$(subst !. ,!.,$(foreach n,$(wordlist $N,9,1 2 3 4 5 6 7 8),$(call ^d,$($n)))$(if $9, $9) !)))
^av = $(foreach N,1,$(^v))
~^apply = $(call ^Y,$(call ^n,1,$2),$(call ^n,2,$2),$(call ^n,3,$2),$(call ^n,4,$2),$(call ^n,5,$2),$(call ^n,6,$2),$(call ^n,7,$2),$(call ^n,8,$2),$(wordlist 9,9999,$2),$1)
~^f = "$(subst ",\",$(subst \,\\,$1))"
^tp = $(info $1 $(call ~^f,$2))$2
~^tc = $(call $1,$2,$3,$4,$5,$6,$7,$8,$(call ^n,1,$9),$(wordlist 2,9999,$9))
^ta = $(if $(or $1,$2,$3,$4,$5,$6,$7,$8,$9), $(~^f)$(call ~^tc,^ta,$2,$3,$4,$5,$6,$7,$8,$9))
^t = $(info --> ($1$(call ~^tc,^ta,$2,$3,$4,$5,$6,$7,$8,$9)))$(call ^tp,<-- $1:,$(call ~^tc,$1,$2,$3,$4,$5,$6,$7,$8,$9))
define ~esc-LHS
$`(if ,,$(subst $],$`],$(subst $[,$`[,$(subst 
,$`',$(subst #,$`",$(subst $`,$`$`,$1))))))
endef
define ^set
$(eval $(call ~esc-LHS,$1) :=$` $(subst 
,$`',$(subst #,$`",$(subst $`,$`$`,$2))))$3
endef
define ^fset
$(and $(eval define $(call ~esc-LHS,$1)
$(subst \$ 
,\$` 
,$(subst define,$` define,$(subst endef,$` endef,$2
)))endef
)1,$3)
endef
$(if ,, ) := 
define ^E
$(subst $`,$`$2,$`(if ,,$(subst 
,$`',$(subst $[,$`[,$(subst $],$`],$(subst $`,$``,$1))))))
endef
~apply = $(call ~^apply,$1,$2)
~promote = $(call ^u,$1)
~demote = $(call ^d,$1)
~nth = $(call ^n,$1,$2)
~set-global = $(call ^set,$1,$2,$3)
~set-rglobal = $(call ^fset,$1,$2,$3)
~add-hook = $(call ^set,~*hooks*,$(~*hooks*) $1=$2)
~run-hooks = $(foreach funcname,$(patsubst $1=%,%,$(filter $1=%,$(~*hooks*))),$(call $(funcname)))
^tags := 
^add-tags = $(call ^set,^tags,$(^tags) $(filter-out $(^tags),$1))
~^required-files := ///runtime.min
^require = $(foreach ^file,$(filter-out $(~^required-files),$(or $(word 1,$(foreach f,$(SCAM_MODS),$(if $(filter $(notdir $1),$(notdir $(basename $f))),$f))),$(if $(if $(filter-out u%,$(flavor ///$(notdir $1).min)),1),///$(notdir $1).min,$1.min))),$(and $(call ^set,~^required-files,$(~^required-files) $(^file))1,$(if $(findstring R,$(SCAM_DEBUG)),$(info require: $(^file)))1,$(if $(filter ///%,$(^file)),$(eval $(value $(^file))),$(eval include $(^file)))1,$(call ~run-hooks,load)1,$(if $(findstring Rx,$(SCAM_DEBUG)),$(info exited: $(^file)))))
define ~start
$(if $(if $(*started*),,1),$(and $(call ^set,*started*,1)1,$(if $(if $(filter-out u%,$(flavor ///trace.min)),1),$(call ^require,trace))1,$(call ^require,$(notdir $1))1,$(call ^Y,$(call $2,$3),,,,,,,,,$`(eval .DEFAULT_GOAL :=
.PHONY: .scam/-exit
.scam/-exit: $`(.DEFAULT_GOAL); @exit '$`(or $`(subst ',,$`(strip $`1)),0)'$``(call ~run-hooks,exit)))))
endef
$(if $(if $(if $(if $(filter-out u%,$(flavor ^start)),1),,1),$(call ^fset,^start,$(value ~start))),)
$(if $(if $(SCAM_MAIN),$(call ~start,$(SCAM_MAIN),,)),)

endef
 
define ///scam-ct.min
# compiled from scam-ct.scm
# Requires: runtime
# Exports: unless!=!1!cEDefn3,~unless,x when!=!1!cEDefn3,~when,x ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! r.sav!=!1!cEDefn0,~r.sav,p ^require!=!1!cEDefn1,^require,p,1,
~r.sav := $(value ^require)
^require = 
$(call ^require,runtime)
~when = !:P0 118 !1:P2!0119!0if $(word 1,$1) $(call ^d,!:P0 128 !1:P2!0129!0begin $(wordlist 2,99999999,$1))
~unless = !:P0 180 !1:P2!0181!0if $(word 1,$1) !1:P2!0186!0nil $(call ^d,!:P0 188 !1:P2!0189!0begin $(wordlist 2,99999999,$1))
$(call ^fset,^require,$(~r.sav))

endef
 
define ///scam.min
# compiled from scam.scm
# Requires: core repl build getopts gen runtime
# Requires: scam-ct
# Exports: main!=!1!cEDefn1,~main,p,1, opt-err!=!1!cEDefn1,~opt-err,p,1, usage!=!1!cEDefn1,~usage,p,0;or;more, begin-block!=!1!cEDefn1,~begin-block,igen,1 resolve!=!1!cEDefn1,~resolve,igen,2 builtin-names!=!1!cEDefn0,~builtin-names! env-rewind!=!1!cEDefn1,~env-rewind,igen,2 use-module!=!1!cEDefn1,~use-module,igen,1 require-module!=!1!cEDefn1,~require-module,igen,2 env-export!=!1!cEDefn1,~env-export,igen,1 check-argc!=!1!cEDefn1,~check-argc,igen,3 err-expected!=!1!cEDefn1,~err-expected,igen,5;or;6;or;7 compile-warn!=!1!cEDefn1,~compile-warn,igen,2;or;3;or;4;or;5 gen-error!=!1!cEDefn1,~gen-error,igen,2;or;more gensym!=!1!cEDefn1,~gensym,igen,2 gensym-name!=!1!cEDefn1,~gensym-name,igen,3 gen-global-name!=!1!cEDefn1,~gen-global-name,igen,2 il-promote!=!1!cEDefn1,~il-promote,igen,1 il-demote!=!1!cEDefn1,~il-demote,igen,1 il-concat!=!1!cEDefn1,~il-concat,igen,1 NoOp!=!1!cEDefn2,!2!cP0;1134;!3!cP2:1135:IString;!3!cP1:1137:!3.,igen *compile-mods*!=!1!cEDefn0,~*compile-mods*! *compile-outfile*!=!1!cEDefn0,~*compile-outfile*! *compile-file*!=!1!cEDefn0,~*compile-file*! *compile-subject*!=!1!cEDefn0,~*compile-subject*! MacroMarkerKey!=!1!cEDefn2,!2!cP1;804;!cm,igen LambdaMarkerKey!=!1!cEDefn2,!2!cP1;788;!c,igen NoGlobalName!=!1!cEDefn2,!2!cP1;548;!c,igen EDefn.is-public?!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;524;!3!cP2:525:filter;!3!cP1:527:x;!3!cP0:531:!4!cP2@532@EDefn.scope:!4!cP2@534@defn EDefn.scope!=!1!cEDefn1,!c,igen,1,defn,!2!cP0;464;!3!cP2:465:word;!3!cP1:467:3;!3!cP2:469:defn EVar!=!1!cEDefn4,S;W,i,!2!cEDefn0 EFunc!=!1!cEDefn4,S;W;S;L,i,!2!cEDefn1 ESMacro!=!1!cEDefn4,S;W,i,!2!cEDefn2 EXMacro!=!1!cEDefn4,S;W,i,!2!cEDefn3 ERecord!=!1!cEDefn4,S;W;S,i,!2!cEDefn4 EBuiltin!=!1!cEDefn4,S;W;S,i,!2!cEDefn5 EIL!=!1!cEDefn4,S,i,!2!cEDefn6 EArg!=!1!cEDefn4,W,i,!2!cEDefn7 EMarker!=!1!cEDefn4,W,i,!2!cEDefn8 IString!=!1!cEDefn4,S,i,!2!cIL0 IVar!=!1!cEDefn4,S,i,!2!cIL1 IBuiltin!=!1!cEDefn4,W;L,i,!2!cIL2 ICall!=!1!cEDefn4,S;L,i,!2!cIL3 ILocal!=!1!cEDefn4,W;W,i,!2!cIL4 IFuncall!=!1!cEDefn4,L,i,!2!cIL5 IConcat!=!1!cEDefn4,L,i,!2!cIL6 IBlock!=!1!cEDefn4,L,i,!2!cIL7 ILambda!=!1!cEDefn4,S,i,!2!cIL8 IEnv!=!1!cEDefn4,S;L,i,!2!cIL9 getopts!=!1!cEDefn1,~getopts,igetopts,3 build!=!1!cEDefn1,~build,ibuild,3 repl-file!=!1!cEDefn1,~repl-file,irepl,1 repl-rep!=!1!cEDefn1,~repl-rep,irepl,2 repl!=!1!cEDefn1,~repl,irepl,0 *2!=!1!cEDefn0,~*2! *1!=!1!cEDefn0,~*1! intersperse!=!1!cEDefn1,~intersperse,icore,2 foldr!=!1!cEDefn1,~foldr,icore,3 foldl!=!1!cEDefn1,~foldl,icore,3 index-of!=!1!cEDefn1,~index-of,icore,2 assoc!=!1!cEDefn1,!c,icore,2,key;vec,!2!cP0;5072;!3!cP2:5073:assoc-initial;!3!cP0:5075:!4!cP2@5076@subst:!4!cP1@5078@!5:!4!cP1@5082@!51:!4!cP0@5086@!5!cP2!400!40vector@!5!cP2!405087!40key;!3!cP2:5091:vec assoc-vec!=!1!cEDefn1,!c,icore,2,key-vec;vec,!2!cP0;5037;!3!cP2:5038:assoc-initial;!3!cP0:5040:!4!cP2@0@vector:!4!cP2@5041@key-vec;!3!cP2:5044:vec assoc-initial!=!1!cEDefn1,~assoc-initial,icore,2 sort-by!=!1!cEDefn1,~sort-by,icore,2 memoize!=!1!cEDefn1,~memoize,icore,1 1+!=!1!cEDefn1,~1+,icore,1 split!=!1!cEDefn1,~split,icore,2 uniq!=!1!cEDefn1,~uniq,icore,1 see!=!1!cEDefn1,~see,icore,2 fexpect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3825;!3!cP2:3826:expect-x;!3!cP0:3828:!4!cP2@3829@format:!4!cP2@3831@a;!3!cP0:3834:!4!cP2@3835@format:!4!cP2@3837@b;!3!cP0:3840:!4!cP2@3841@current-file-line expect!=!1!cEDefn1,!c,icore,2,a;b,!2!cP0;3785;!3!cP2:3786:expect-x;!3!cP2:3788:a;!3!cP2:3790:b;!3!cP0:3792:!4!cP2@3793@current-file-line expect-x!=!1!cEDefn1,~expect-x,icore,3 printf!=!1!cEDefn1,~printf,icore,1;or;more sprintf!=!1!cEDefn1,~sprintf,icore,1;or;more vsprintf!=!1!cEDefn1,~vsprintf,icore,2 format!=!1!cEDefn1,~format,icore,1 format-add!=!1!cEDefn1,~format-add,icore,1 format!=!1!cEDefn1,~format,icore,1 hash-compact!=!1!cEDefn1,~hash-compact,icore,1;or;2 hash-get!=!1!cEDefn1,~hash-get,icore,2;or;3 hash-find!=!1!cEDefn1,~hash-find,icore,2 hash-value!=!1!cEDefn1,~hash-value,icore,1,entry,!2!cP0;2072;!3!cP2:2073:nth;!3!cP1:2075:2;!3!cP0:2077:!4!cP2@2078@subst:!4!cP1@2080@!5=:!4!cP1@2084@!40:!4!cP2@2088@entry hash-key!=!1!cEDefn1,~hash-key,icore,1,entry,!2!cP0;2021;!3!cP2:2022:promote;!3!cP0:2024:!4!cP2@2025@subst:!4!cP1@2027@!58:!4!cP1@2031@%:!4!cP0@2035@!5!cP2!402036!40word@!5!cP1!402038!401@!5!cP0!402040!40!51!cP2!502041!50subst!40!51!cP1!502043!50!511=!40!51!cP1!502047!50!510!40!51!cP2!502051!50entry hash-bind!=!1!cEDefn1,~hash-bind,icore,2;or;3 append!=!1!cEDefn1,~append,icore,0;or;more filtersub!=!1!cEDefn1,!c,icore,3,pat;repl;str,!2!cP0;1767;!3!cP2:1768:patsubst;!3!cP2:1770:pat;!3!cP2:1772:repl;!3!cP0:1774:!4!cP2@1775@filter:!4!cP2@1777@pat:!4!cP2@1779@str natural?!=!1!cEDefn1,~natural?,icore,1 numeric?!=!1!cEDefn1,~numeric?,icore,1 while!=!1!cEDefn1,~while,icore,3 reverse!=!1!cEDefn1,~reverse,icore,1 indices!=!1!cEDefn1,!c,icore,1,list,!2!cP0;592;!3!cP2:593:indices-x;!3!cP2:595:list;!3!cP1:597:1 vec-or!=!1!cEDefn1,~vec-or,icore,1,vec,!2!cP0;501;!3!cP2:502:first;!3!cP0:504:!4!cP2@505@filter-out:!4!cP0@507@!5!cP2!400!40vector@!5!cP1!40508!40!5.:!4!cP2@512@vec select-words!=!1!cEDefn1,~select-words,icore,2 select-vec!=!1!cEDefn1,~select-vec,icore,2 map-call!=!1!cEDefn1,~map-call,icore,2 butlast!=!1!cEDefn1,~butlast,icore,1 strip-vec!=!1!cEDefn1,~strip-vec,icore,1,vec,!2!cP0;304;!3!cP2:305:filter;!3!cP1:307:%;!3!cP2:311:vec last!=!1!cEDefn1,~last,icore,1,vec,!2!cP0;264;!3!cP2:265:promote;!3!cP0:267:!4!cP2@268@lastword:!4!cP2@270@vec conj!=!1!cEDefn1,~conj,icore,2 cons!=!1!cEDefn1,~cons,icore,2 concat-vec!=!1!cEDefn1,~concat-vec,icore,1;or;2 xor!=!1!cEDefn1,~xor,icore,2 identity!=!1!cEDefn1,~identity,icore,1,a,!2!cP2;95;a eq?!=!1!cEDefn1,~eq?,icore,2 ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
$(call ^require,core)
$(call ^require,repl)
$(call ^require,build)
$(call ^require,getopts)
$(call ^require,gen)
define ~usage
$(and $(if $1,$(info scam: $(call ~vsprintf,$1,$(foreach N,2,$(^v)))))1,$(info Usage:

    scam [-i]              : enter interactive mode
    scam -o EXE FILE...    : build an executable from SRC
    scam -e EXPR           : eval and print value of expression
    scam -r MAK            : load and execute executable file MAK
    scam [-x] FILE ARG...  : compile and execute FILE

Options:

  --no-trace : Omit tracing functionality.  This will produce a slightly
               smaller executable.
)1,$(if $1,1))
endef
~opt-err = $(call ~usage,Unrecognized command option '%s',$1)
~main = $(call ^Y,$(call ~getopts,$1,-e= -h -i -r= -o= --symbols --boot --no-trace -x=...,$(value ~opt-err)),,,,,,,,,$`(if $`(call ~hash-get,o,$`(call ~nth,2,$`1)),$`(call ~build,$`(call ~hash-get,o,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1),$`(call ~nth,2,$`1)),$`(if $`(call ~hash-get,h,$`(call ~nth,2,$`1)),$`(call ~usage),$`(if $`(call ~hash-get,e,$`(call ~nth,2,$`1)),$`(call ~repl-rep,$`(call ~hash-get,e,$`(call ~nth,2,$`1)),),$`(if $`(call ~hash-get,r,$`(call ~nth,2,$`1)),$`(eval include $`(call ~hash-get,r,$`(call ~nth,2,$`1))),$`(if $`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)),$`(if $`(call ~eq?,$`(call ~gen-global-name,main,),~main),$`(and $`(info scam: -x not supported; namespace collision)1,1),$`(and $`(call ~repl-file,$`(call ^u,$`(word 1,$`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)))))1,$`(call ~run-hooks,load)1,$`(call $`(call ~gen-global-name,main,),$`(wordlist 2,99999999,$`(or $`(call ~hash-get,x,$`(call ~nth,2,$`1)),$`(call ~nth,1,$`1)))))),$`(call ~repl)))))))

endef
 
define ///trace.min
# compiled from trace.scm
# Requires: runtime
# Requires: scam-ct
# Exports: trace!=!1!cEDefn1,~trace,p,1, trace-dump!=!1!cEDefn1,~trace-dump,p,0, trace-rev!=!1!cEDefn1,~trace-rev,p,1, trace-check!=!1!cEDefn1,~trace-check,p,0, *traces-active*!=!1!cEDefn0,~*traces-active*,p trace-instrument!=!1!cEDefn1,~trace-instrument,p,3, trace-match-funcs!=!1!cEDefn1,~trace-match-funcs,p,1, trace-info!=!1!cEDefn1,~trace-info,p,1;or;2;or;3;or;4;or;5, trace-repeater!=!1!cEDefn1,~trace-repeater,p,3, list-of!=!1!cEDefn1,~list-of,p,1;or;2, trace-n2a!=!1!cEDefn1,~trace-n2a,p,1, trace-digits!=!1!cEDefn1,~trace-digits,p,1, *traces*!=!1!cEDefn0,~*traces*,p variables!=!1!cEDefn2,!2!cP0;489;!3!cP2:490:filter-out;!3!cP2:492:*trace-ignore-vars*;!3!cP0:494:!4!cP2@495@subst:!4!cP1@497@%:!4!cP1@501@():!4!cP2@506@.VARIABLES,p *trace-ignore-vars*!=!1!cEDefn0,~*trace-ignore-vars*,p .VARIABLES!=!1!cEDefn0,.VARIABLES,p SCAM_PRE!=!1!cEDefn0,SCAM_PRE,p SCAM_TRACE!=!1!cEDefn0,SCAM_TRACE,p ^tags!=!1!cEDefn0,^tags! run-hooks!=!1!cEDefn1,~run-hooks,iruntime,1 add-hook!=!1!cEDefn1,~add-hook,iruntime,2 bound?!=!1!cEDefn1,!c,iruntime,1,var,!2!cP0;1963;!3!cP2:1964:if;!3!cP0:1966:!4!cP2@1967@filter-out:!4!cP1@1969@u%:!4!cP0@1974@!5!cP2!401975!40flavor@!5!cP2!401977!40var;!3!cP1:1981:1 rrest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1915;!3!cP2:1916:nth-rest;!3!cP1:1918:3;!3!cP2:1920:vec rest!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1893;!3!cP2:1894:nth-rest;!3!cP1:1896:2;!3!cP2:1898:vec first!=!1!cEDefn1,!c,iruntime,1,vec,!2!cP0;1867;!3!cP2:1868:^u;!3!cP0:1870:!4!cP2@1871@word:!4!cP1@1873@1:!4!cP2@1875@vec nth-rest!=!1!cEDefn1,!c,iruntime,2,n;vec,!2!cP0;1843;!3!cP2:1844:wordlist;!3!cP2:1846:n;!3!cP1:1848:99999999;!3!cP2:1850:vec not!=!1!cEDefn1,!c,iruntime,1,v,!2!cP0;1813;!3!cP2:1814:if;!3!cP2:1816:v;!3!cP2:1818:nil;!3!cP1:1820:1 nil!=!1!cEDefn2,!2!cP1;1796;!2.,iruntime set-rglobal!=!1!cEDefn1,~set-rglobal,iruntime,2;or;3 set-global!=!1!cEDefn1,~set-global,iruntime,2;or;3 nth!=!1!cEDefn1,~nth,iruntime,2 demote!=!1!cEDefn1,~demote,iruntime,1 promote!=!1!cEDefn1,~promote,iruntime,1 apply!=!1!cEDefn1,~apply,iruntime,2 esc-LHS!=!1!cEDefn1,~esc-LHS,iruntime,1 SCAM_DEBUG!=!1!cEDefn0,SCAM_DEBUG! SCAM_MODS!=!1!cEDefn0,SCAM_MODS! unless!=!1!cEDefn3,~unless! when!=!1!cEDefn3,~when,i
~*trace-ignore-vars* := 
~*traces* := 
override SCAM_PRE := $(value SCAM_PRE)
^K = $(eval ^K_$0:=$(subst ioooooooooo,oi,$(^K_$0:o%=io%)o))
~trace-digits = $(if $(if $(findstring i,$1),,1),$(call ~trace-digits,i$1),$(if $(findstring ioooooooooo,$1),$(call ~trace-digits,$(subst ioooooooooo,oi,$1)),$(subst $  ,,$(wordlist $(words $(subst i, i,$1)),99,. . . . . . . . $(foreach d,$(subst i, i,$1),$(words $(subst i,,$(subst o, o,$d))))))))
~trace-n2a = $(if $(if $(filter i%,$1),,1),$(call ~trace-n2a,i$1),$(if $(findstring ioooooooooo,$1),$(call ~trace-n2a,$(subst ioooooooooo,oi,$1)),$(subst 10,A,$(words $(subst i, i,$1)))!0$(subst $  ,,$(foreach d,$(subst i, i,$1),$(words $(subst i,,$(subst o, o,$d)))))))
~list-of = $(if $(word $1,$2),$2,$(call ~list-of,$1,$2 x))
~trace-repeater = $(subst NAME,$1,$(subst N-1,$(wordlist 2,99999999,$(call ~list-of,$(or $2,11))),$(if $3,$`(if $`(^X),$`(call if,,,$`(value NAME)),$`(if $`(foreach ^X,N-1,$`(if $`(NAME),)),)$`(foreach ^X,0,$`(NAME))),$`(NAME)$`(if $`(foreach ^xx,N-1,$`(NAME)),))))
~trace-info = $(info TRACE: $1$2$3$4$5)
~trace-match-funcs = $(foreach v,$(if $(findstring %,$1),$(filter $1,$(filter-out $(~*trace-ignore-vars*),$(subst %,(),$(.VARIABLES)))),$1),$(if $(filter recur%,$(flavor $v)),$v))
~trace-instrument = $(if $(filter v,$1),$(and $(call ~trace-info,$2, [,$(flavor $2),] = ,$(value $2))1,$3),$(if $(filter c,$1),$`(^K)$3,$(if $(filter x% X%,$1),$(and $(call ~set-rglobal,$2~0~,$3)1,$(call ~trace-repeater,$2~0~,$(patsubst x%,%,$(subst X,x,$1)),$(filter X%,$1))),$(if $(filter p,$1),$(or $(SCAM_PRE),$(call ~trace-info,SCAM_PRE undefined; needed for ,$2,:p))$3,$(if $(filter t,$1),$(subst CODE,$3,$`(info --> ($`0$`(^ta)))$`(call ^tp,<-- $`0:,CODE)),$(and $(call ~trace-info,Unknown action: ',$1,')1,$3))))))
~*traces-active* := 
~trace-check = $(call ^set,~*traces-active*,$(strip $(~*traces-active*) $(foreach w,$(~*traces*),$(foreach name,$(call ~trace-match-funcs,$(firstword $(subst :, % ,$w))),$(foreach action,$(or $(wordlist 2,99999999,$(subst :, ,.$w)),t),$(if $(if $(filter $(name):$(patsubst x%,x,$(subst X,x,$(action))),$(~*traces-active*)),,1),$(and $(call ~set-rglobal,$(name),$(call ~trace-instrument,$(action),$(name),$(value $(name))))1,$(name):$(patsubst x%,x,$(subst X,x,$(action))))))))))
~trace-rev = $(if $1,$(call ~trace-rev,$(wordlist 2,99999999,$1)) $(firstword $1))
~trace-dump = $(and $(foreach s,$(foreach s,$(~*traces*),$(word 1,$(subst :, ,$s))),$(if $(if $(filter $s,$(foreach s,$(~*traces-active*),$(word 1,$(subst :, ,$s)))),,1),$(call ~trace-info,spec ',$s,' did not match any functions.)))1,$(if $(filter %c,$(~*traces-active*)),$(and $(call ~trace-info,function invocations)1,$(foreach r,$(call ~trace-rev,$(sort $(foreach V,$(filter ^K_%,$(.VARIABLES)),$(call ~trace-digits,$(value $V))$(patsubst ^K_%,::%,$V)))),$(call ~trace-info,$(subst ., ,$(word 1,$(subst ::, ,$r))), : ,$(word 2,$(subst ::, ,$r)))))))
~trace = $(and $(call ^set,~*traces*,$(~*traces*) $1)1,$(call ~trace-check))
~*trace-ignore-vars* := $(filter-out $(~*trace-ignore-vars*),$(subst %,(),$(.VARIABLES)))
$(if $(call ~trace,$(SCAM_TRACE)),)
$(if $(call ~add-hook,load,~trace-check),)
$(if $(call ~add-hook,exit,~trace-dump),)

endef
$(eval $(value ///runtime.min))
$(call ^start,///scam,~main,$(SCAM_ARGS))

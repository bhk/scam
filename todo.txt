TODO

Enhancements
----

 * Forbid shadowing of variables
    - allow `(let ((x x)) ...)` or `&override` exceptions
    - validate `define` against prior `declare`

 * Enhance call-site tracing to support lambdas and macros/builtins
     (? lambda ...)  -->  (call "^tv" "any" (any ...))
     or:  (call "^yt" "any" (lambda (args) (any args)) ...)

 * Deconstruct vectors in `let` or `define`
    (let (([a b c] vec)) ...)       ;; always succeeds

 * Record reflection.  What format-record needs:
    (data? value)
    (data-type value)    -> [ctor-name arity ctor dtor]

 * (case EXPR
      (CONST        EXPR)   ;; match constant value (nil, for example)
      ((Ctor "K" y) EXPR)   ;; match constant member
      (["A" a b]    EXPR)   ;; match constant element
      ...)

 * "spread" with "..." syntax.

 * XMacros don't have a good way to generate error messages or gensym.

 * aliases: (define `g f) assigns g the correct value, but arity information
   is lost, and it compiles to a lambda-call, not a call-by-name.

 * looping constructs / named lambda

   http://www.scheme.com/tspl4/control.html#./control:h4

     let:  (let name ((var expr) ...) body...)

        (define (factorial n)
           (let f ((i n) (a 1))
             (if (> i 0)
                 (f (- i 1) (* a i))
                 a)))

     do:   (do ((var init update) ...) (test result ...) expr ...)

        (define (factorial n)
            (do ([i n (- i 1)]
                 [a 1 (* a i)])
                ((zero? i) a))))

 * do / bind / return

   Monads <-> exceptions
   do         try

   (do (a b <- f1 x)
       (c <- fn2 a b)
       (return c))


 * num: accept E-notation for integers in: range, ^

 * num: multi-arg + and *


Optimizations for Generated Code
----

 * Recover crafted optimizations:
     (demote (promote x))  -->  x
     (nth N (rest x))  -->  (nth N+1 x)
     (rest (rest x))   -->  (nth-rest ...)
     (demote NUMBER)   -->  number
     (if (filter "!:x" (word 1 (first vec))) ...)
       -->  (if (filter "!1:x!0% !1:x" (word 1 vec)) ...)

     Number-ness validated by ... `cond` test,  `foreach` variable, ...

 * Constant propagation:  (ICall PURE CONST...) -->   (Const (PURE CONST...))

   Functions are PURE if they have no side-effects and produce a value that
   is purely a function of their inputs.  (No references to globals or I/O,
   and no calls to functions that might do so.)

   Properties of function nodes should be computed from the bottom-up to
   avoid repeatedly revisiting the same node. (Same for other nodes that
   contain other nodes.)

    - const?      [if so, will already be a Const node]
    - nil?        always evaluates to ""  (use in file code gen, blocks, conditionals..)
    - true?       always evaluates to non-empty string  (e.g. demote)
    - wordy?      result has no spaces or tabs?
    - vectory?    "!" occurs *only* in [" " "\t" "!" ""]
    - plain?      Contains no "!", spaces, tabs.
    - nout?       evaluation will NOT have side-effects (set, info, shell, ...)
    - nin?        result IS a purely function of inputs (does NOT read globals)

    wordy? and vectory? and true?  ==>  (demote (promote x)) == x
    nout? and nin?                 ==>  PURE

 * IF constant propagation:

    (if TRUE a b) -->  (IBlock TRUE a)
    (if VOID a b) -->  (IBlock VOID b)

 * IF strength reduction:

    (if (nth N VEC) ...)       -->  (if (subst "!." "" (word N VEC)) ...)
    (if (subst X TRUE Y) ...)  -->  (if (begin X TRUE Y) ...)

 * Block reduction:

     (IBlock PRE... POST)  -->  (Discard PRE)... POST

     (Discard NOUT)  --> ""  [all consts are NOUT]
     (Discard (IConcat A B C)) -->  (Discard A) (Discard B) (Discard C)

 * IF-NOT reduction:  (if (not x) a b) -->  (if x b a)
 * IF-YES reduction:  (if (if C 1) a b) -->  (if C a b)

     Rule:    (if (if C A B) X Y)   --> (if C (if A X Y) (if B X Y))    [if A and B are true or nil]
     IF-NOT:  (if (if C nil 1) X Y) --> (if C (if nil X Y) (if 1 X Y))  [+const prop]
     IF-YES:  (if (if C TRUE) X Y)  --> (if X (if TRUE X Y) (if nil Y)) [+const prop]

 * IF CSE:  (if COND (f A) (f B))  -->  (f (if COND A B))

     Special case:  (if PURE 1 1) -->  (begin PURE 1)  -->  1

     This can be applied recursively to break apart complex commonality.
     Not good when A or B are constants and `f` is evaluatable.

 * Misc...

     (word N (wordlist A B VEC))      -->  nil  ...or...  (word N+A-1 VEC)
     (wordlist A B (wordlist C D VEC) --> (wordlist A+C-1 (min B D-C+1) VEC)

     (demote WORD)          -->  (subst "!" "!1" WORD)  [when word is not nil]
     (demote PLAIN)         -->  PLAIN
     (promote PLAIN)        -->  PLAIN

     (subst PURE PURE nil)  -->  nil
     (word PURE nil)        -->  nil

     (eq? A B) ==
       (findstring A (findstring B A))  -->  (filter A B)
         When: A and B are words, and A does not contain "%" (e.g. $(words))

     (eq? CONST (nth N V)) -->  (eq? (demote CONST) (word N V))
                          -->  (filter (demote CONST) (word N V))

     (f (if COND X Y))   -->   (if COND (f X) (f Y))
       ... reduces when X or Y are constants e.g. demote
       (demote (if COND C1 C2)   -->  (if COND C3 C4)
       (if (not COND) A B) ==
          (if (if COND nil 1) EXPR)  -->  (if COND (if nil EXPR) (if 1 EXPR))


 * Extraction and naming of anonymous functions.  The main motivation is to
   make nested "let" blocks more efficient.  Call overhead and deeper
   nesting both degrade performance.

    A) Convert lambda literals to variable references:

          f = ...LAMBDA...  -->   tmpvar = $(unescape LAMBDA)
                                  f = ...$(value tmpvar)...

       Up-value references make this impossible, since the values are not
       known at tmpvar assignment time.

       This assumes compilation for file context.  In expression context
       we could do something like:

          ...LAMBDA...  -->  $(set tmpvar,LAMBDA)...$(value tmpvar)...

       ... but this will be unhelpful if the `set` is immediately prior to
       the value (the assignment has to be less nested).  Also, the assignment
       must be idempotent; any up-values will potentially corrupt the result.

    B) Lambda-call reduction:

          $(call ^Y,$(value x),...)  -->  $(call x,...)

    C) Up-value elimination:

        A: (let ((x y)) ...a...)     -->  (let ((x y) (a a)) ...a...)
        B: ((lambda (x) ...a...) y)  -->  ((lambda (x y) ...a...) y a)

            $(call ^Y,$1,...,$$1$(call escape,$2)...)
        --> $(call ^Y,$1,$2,...,$$1$$2...)

       This would have to be done at the gen0 phase (without knowledge of
       file vs. expression context), but it improves performance
       independently of A & B, so it would be good anyway.  (But this can be
       done manually by the programmer, so maybe isn't as urgent.)

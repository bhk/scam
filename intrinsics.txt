;; -*- mode: scheme -*-

;; # Intrinsics
;;
;; There is not an "intrinsics" module; all these exports are defined by the
;; SCAM language itself and are available to program without any `require`
;; statement.
;;
;; Intrinsic symbols fall into three different categories:
;;
;;  - Special forms
;;  - Manifest functions
;;  - Manifest macros
;;
;; Manifest functions are like other functions in SCAM, except that they are
;; provided by the language itself.  Special forms are not functions, so
;; they do not have values and cannot be passed to other functions.



;;
;; Make built-in functions
;;


;; For each file name in PATHS, convert relative paths to absolute paths.
;; The file names do not need to refer to an existing file or directory.
;;
(declare (abspath paths) &public)


;; Add PREFIX to the start of each word in LIST.
;;
(declare (addprefix prefix list) &public)


;; Add SUFFIX to the end of each word in LIST.
;;
(declare (addsuffix suffix list) &public)


;; Remove the file extension from each word in PATHS.
;;
;; See also: `path-basename`
;;
(declare (basename paths) &public)


;; Get the directory of each file path in word list PATHS.
;;
;;     (dir "a/b c")  -->  "a/ ./"
;;
;; See also: `notdir`, `path-dir`.
;;
(declare (dir paths) &public)


;; Get all words in LIST that match PATTERNS.  Each word in PATTERNS is
;; compared against the words in LIST, and is considered a match when it is
;; equal, treating the first `%` character in a pattern as a wildcard.
;;
(declare (filter patterns list) &public)


;; Get all words in LIST that do *not* match PATTERNS.
;;
(declare (filter-out patterns list) &public)


;; If SUB occurs within STR, return SUB.  Otherwise return `nil`.
;;
(declare (findstring sub str) &public)


;; Get the first word in LIST.
;;
(declare (firstword list) &public)


;; Concatenate the respective words in LIST-A and LIST-B.
;;
(declare (join list-a list-b) &public)


;; Get the last word in LIST.
;;
(declare (lastword list) &public)


;; Return the filename portion of each path in word list PATHS.
;;
;;     (notdir "a/b c")  -->  "b c"
;;
;; See also: `dir`, `path-notdir`.
;;
(declare (notdir paths) &public)


;; Replace PAT with REPL in LIST.  Patterns use the first `%` as a wildcard,
;; and a corresponding `%` in REPL will be replace with what the wildcard in
;; PAT matched.  See the GNU make documentation for subtleties.
;;
(declare (patsubst pat repl list) &public)


;; For each file name in PATHS, resolve the name to a form without `.` or
;; `..` path elements or symbolic links.  See the UNIX `realpath` C function
;; for details.
;;
(declare (realpath paths) &public)


;; Execute COMMAND using the default shell as specified by the SHELL
;; variable (which is inherited from the SHELL environment variable).  The
;; data written to `stdout` by the COMMAND is captured, trailing newlines
;; are removed, and remaining newlines are converted to spaces, and the
;; result is returned by `shell`.
;;
(declare (shell command) &public)


;; Sort the words in LIST in increasing lexicographical order.
;;
(declare (sort list) &public)


;; Return the file extensions of all file names in PATHS.
;;
(declare (suffix paths) &public)


;; Get files that match PATTERNS.  Patterns are delimited by whitespace
;; characters, except that a whitespace character preceded by a backslash
;; character will be treated as literal.
;;
;; All matches are returned as a word list; whitespace characters within a
;; matching file name are *not* escaped.  (Good luck with that.)
;;
(declare (wildcard patterns) &public)


;; Return the Nth word in LIST.  If N is greater than the length of the
;; list, return `nil`.  If N is less than 1, terminate the program with an
;; error message.
;;
(declare (word n list) &public)


;; Extract the words in LIST from index A to index B, inclusive.  Extraneous
;; spaces between words are retained.  If B is less than A, `nil` is returned.
;;
;; If A is less than 1 or B is less than zero, the program will be
;; terminated with an error message.
;;
(declare (wordlist a b list) &public)


;; Return the number of words in LIST.
;;
(declare (words list) &public)


;;
;; Special forms
;;


;; Call `(FN ...ARGS)` with tracing.
;;
;; On entry to FN the function name and arguments are displaced, and on exit
;; the return value is displayed.  For example, in the REPL:
;;
;;     > (define (f x) (+ x 1))
;;     > (f 1)
;;     2
;;     > (? f 1)
;;     --> (f "1")
;;     <-- f: "2"
;;     2
;;
(declare (? fn ...args) &public)


;; This special form conditionally executes either THEN-EXPR or ELSE-EXPR.
;; First, COND is evaluated.  If non-nil, THEN-EXPR will be evaluated and used
;; are the value for the `if` expression.  Otherwise, if ELSE-EXPR is present
;; it is evaluated and used, and if not `nil` is used.
;;
(declare (if cond then-expr [else-expr]) &public)


;; Match a record value with its constructor.
;;
;; Example:
;;
;;     (case shape
;;        ((Square x) (^ x 2))
;;        ((Rectangle x y) (* x y))
;;        ((Triangle base height) (/ (* base height) 2))
;;        (else 0))
;;
;; See the [language reference](reference.md#records) for more examples and
;; details.
;;
(declare (case value ...clauses) &public)


;; This special form expresses conditional execution of an arbitrary number
;; of possible blocks of code.  Each CLAUSE takes the form:
;;
;;     (CONDITION ...EXPRS)
;;
;; Example:
;;
;;     (cond ((filter "foo" a)  "Found FOO")
;;           ((filter "bar" a)  "Found BAR")
;;           ((filter "baz" a)  (print "BAZ") "Found BAZ")
;;           (else              "Found NOTHING"))
;;
(declare (cond ...clauses) &public)


;; Declare a record data type.
;;
;; CTORS is a sequence of `(NAME ...ARGS)` expressions that declare data
;; constructors.  Records are discussed further in the [language
;; reference](reference.md#records).
;;
(declare (data name ...ctors) &public)


;; Expressions in `...EXPRS` are evaluated sequentially until a `nil` value
;; is encountered.  If a `nil` value is encountered, `nil` is returned; if
;; all expressions are non-nil, the last one is returned.  Note: *if no
;; expressions were passed, `nil` will be returned.*
;;
(declare (and ...exprs)


;; Expressions in `...EXPRS` are evaluated sequentially until a non-`nil`
;; value is encountered.  The first non-`nil` value is returned; if all are
;; `nil`, `nil` is returned.
;;
(declare (or ...exprs) &public)


;; The `foreach` special form iterates over a list, evaluates BODY (a sequence
;; of expressions) once for each word, and constructs a new word list from the
;; results of each evaluation.
;;
;; `BODY` is evaluated in the scope of variables named in TARGET, which can
;; be either a symbol or a [destructuring
;; target](reference.md#destructuring).
;;
;;     > (foreach (x "1 2 3") (1+ x))
;;     "2 3 4"
;;
;; `DELIM` specifies the separator between list elements.  This defaults to
;; a single space when `DELIM` is absent.  When it is present and evaluates
;; to `nil`, all element results are concatenated.
;;
(declare (foreach (target list ?delim) ...body) &public)


;; `for` iterates over items in a vector, constructing a new vector.
;;
;; `BODY` is evaluated in the scope of the variables named in TARGET, which
;; can be either a symbol or a [destructuring target
;; ](reference.md#destructuring).
;;
;; Example:
;;
;;     > (for (x [[1 2] [3 4]])
;;     +    (reverse x))
;;     [[2 1] [4 3]]
;;
(declare (for (target vector) ...body) &public)


;; `append-for` is similar to `for` but it appends together all of the (vector)
;; values of BODY.  This is functionally similar to what is called `concat-map`
;; in some other languages.
;;
;;     > (append-for x [[1 2] [3 4]]
;;     +     x)
;;     "1 2 3 4"
;;     > (append-for x [7 1 5 3]
;;     +    (if (> x 3) [x]))
;;     "7 5"
;;
(declare (append-for (target vector) ...body) &public)


;; `concat-for` is similar to `for` but it concatenates the values of BODY.
;; If `DELIM` is not present in the source, then it defaults to a single
;; space.
;;
;;     > (concat-for (x [1 2 3] ";") (wordlist 1 x "a b c"))
;;     "a;a b;a b c"
;;
(declare (concat-for (target vector ?delim) ...body) &public)


;; Terminate execution of the program with a non-zero status code, writing
;; `MESSAGE` to stderr.
;;
(declare (error message) &public)


;; Encloses a *block* of expressions.  A block is a sequence of expressions
;; that are evaluated in order.  The result of that last expression is
;; returned (or nil if no expressions are given).
;;
(declare (begin ...exprs) &public)


;; The `require` special form provides access to functionality defined in
;; other modules.  When evaluated, it will load and execute the module
;; (unless it has already been required elsewhere in the program.)  Symbols
;; that have been declared as `&public` in the top-level of the required
;; module are "imported" into the current environment, making those symbols
;; visible to expressions that follow the `require` form, up to the end of
;; the enclosing block.
;;
;; `(require MODULE &private)` is intended for use by unit test modules.
;; This will import all symbols defined in the top-level of the required
;; module (not just the `&public` ones).  Additionally, the qualification
;; step will not be required.  (See "qualification", below.)
;;
;; When `MODULE` is one of the [standard library names](#libraries), the
;; standard library will be supplied by the compiler.  Otherwise, `MODULE`
;; must end in `.scm` and identify as SCAM source file.  If it is a relative
;; path, it is treated as relative to the directory containing the requiring
;; file.  If no such file exists, the directories listed in `SCAM_LIBPATH`
;; (colon-delimited) are tried, in order, until a matching file is found.
;;
;; When `MODULE` identifies a source file, that source file will be compiled
;; to determine its exports before compilation of the requiring module can
;; continue.  In turn, modules required by `MODULE` will also have to be
;; compiled in order to build `MODULE`, and so on.  Compilation results are
;; [cached](reference.md#cached-results) to avoid exponential build times.
;;
;; **Qualification:** Each module source file may be accompanied by a
;; qualification test: a source file whose name is determined by adding `-q`
;; prior to the `.scm` extension.  For example, `foo-q.scm` is the
;; qualification test for `foo.scm`.  When a module is required, its
;; qualification test (if present) will be built and executed before
;; compilation of the requiring module continues.  If the qualification test
;; terminates with a non-zero exit code, it is considered a test failure and
;; compilation stops.  (Note that qualification test files must use the
;; `&private` flag when requiring the module they test in order to avoid a
;; dependency loop.)
;;
(declare (require module &private?) &public)


;; Declare and define a function, variable, or macro.
;;
;; This special form takes several forms:
;;
;;     (define NAME FLAG... VALUE)              ; global data variable
;;     (define (NAME PARAM...) FLAG... BODY)    ; global function variable
;;     (define `NAME EXPR)                      ; symbol macro
;;     (define `(NAME PARAM...) FLAG... BODY)   ; compound macro
;;
;; The `define` special form adds a name to the environment and associates
;; it with a definition.  The defined name will be visible to subsequent
;; expressions in the same block, and the definition supersedes any
;; previous definitions associated with the same name.
;;
;; See `lambda` for descriptions of the `PARAM` syntax.
;;
;; The `&public` flag may be included in `FLAG...`.  This indicates that the
;; symbol should be visible outside of the file in which it is defined.
;;
(declare (define ...forms) &public)


;; Declare a function, variable, or macro.
;;
;; This special form takes two forms:
;;
;;     (declare NAME FLAG...)             ; global data variable
;;     (declare (NAME PARAM...) FLAG...)    ; global function variable
;;
;; The `declare` special form declares a global variable without assigning
;; a value.  This is usually used to access non-SCAM functions, or when
;; mutually recursive functions are defined.
;;
(declare (declare ...forms) &public)


;; Declare an *executable macro*.  An executable macro is a function that
;; transforms syntax.  It takes one argument, a form, and returns a
;; different form.
;;
(declare (defmacro (name argname) body) &public)


;; This special form assigns names to values.  BINDINGS is a sequence of
;; `(TARGET VALUE)` pairs.  Each TARGET can be either a symbol or a
;; [destructuring target](reference.md#destructuring).
;;
;; BODY (a sequence of expressions) is evaluated in an environment in which
;; every name in each TARGET is bound to its corresponding value.  The
;; value of the last expression in BODY is returned.
;;
;; `let` is implemented in terms of `lambda`, and is equivalent to:
;;
;;     ((lambda (NAME1 NAME2 ...) BODY) (VALUE1 VALUE2 ...))
;;
(declare (let (...bindings) ...body) &public)


;; Declare symbol macros.
;;
;; `let&` is a "lazy" let.  It binds the names to symbol macros instead of
;; local variables.  It also differs from `let` in that each expression is
;; evaluated in the context of the previous bindings -- more like Scheme's
;; `let*`.  The following expression:
;;
;;     (let& ((NAME EXPR))
;;       BODY)
;;
;; ... is equivalent to the following:
;;
;;     (begin
;;       (declare `NAME EXPR)
;;       BODY)
;;
;; Since `let&` constructs symbol macros, each bound expression is not
;; always evaluated exactly once, as with `let`.  Instead, each expression
;; is evaluated once each time its associated name is evaluated within
;; `BODY` -- perhaps zero times, perhaps many more.
;;
;; The `let&` form generally has lower overhead than `let`, since it does
;; not involve an anonymous function call (as does `let`).
;;
(declare (let& (...bindings) ...body) &public)


;; This form modifies the value of some number of global variables *during
;; the execution of BODY*. Afterwards, the original values are restored.
;; Note that, unlike `let` or `let&`, the variables must already be in
;; scope.
;;
;; BINDINGS is a sequence of `(TARGET VALUE)` pairs.  Each TARGET can be
;; either a symbol or a [destructuring target](reference.md#destructuring).
;; Each name mentioned in TARGET must identify a previously declared global
;; variable.
;;
;; This expression evaluates to the value of the last expression in BODY.
;;
(declare (let-global (...bindings) ...body) &public)


;; The `set` special form assigns a value to a previously declared global
;; variable.
;;
;; NAME is given as a symbol, not a string. For example:
;;
;;     (set var 12 nil)
;;
;; The `set` expression returns `RETVAL` (or "" if `RETVAL` is not provided).
;;
(declare (set name value ?retval) &public)


;; A `lambda` expression evaluates to a function value.
;;
;; `...PARAMS` is zero or more *targets* that name the formal arguments,
;; followed by zero or more *optional* parameters and then perhaps one
;; *rest* parameter.
;;
;; A target is a symbol (not beginning with `...` or `?`) or a
;; [destructuring target](reference.md#destructuring).
;;
;; An optional parameter is a symbol that begins with `?`.  Optional
;; parameters may be omitted by callers.
;;
;; A rest parameter is a symbol that begins with `...`.  Rest parameters
;; capture, as a vector, all subsequent arguments passed to the function.
;; Callers may omit any of the arguments captured by a rest parameter.
;;
;; `BODY` is a block of one or more expressions (see [`begin`](#begin) )
;; that will be executed when the function is called. The initial environment
;; of `BODY` contains bindings for the arguments names to the values passed
;; to the function.
;;
(declare (lambda (...params) body) &public)


;; This special form is equivalent to `(if COND (begin ...BODY))`.
;;
(declare (when cond ...body) &public)


;; This special form concatenates all of its arguments.  This is
;; equivalent to `..`.
;;
(declare (concat ...values) &public)


;; This special form concatenates all of its arguments.
;;
(declare (.. ...values) &public)


;; This special form concatenates all of its arguments, separating them with
;; a single space character.
;;
(declare (._. ...values) &public)


;; This special form replaces substrings with replacement strings within the
;; given VALUE.  For example:
;;
;;     > (subst 2 3 1 2 12)
;;     23
;;
(declare (subst from to {from to}... value) &public)


;; Concatenate all values and write them to `stdout`.
;;
(declare (print ...values) &public)


;; This special form evaluates to the data structure that describes the lexical
;; environment at the point where it is invoked.  (See `gen.scm` for details of
;; this structure.)
;;
(declare (current-env) &public)


;; This special form evaluates to the current file name.  Ordinarily, this
;; will refer to the location in the source file where the `(current-file)`
;; call appears, but when it appears within a macro it refers to the
;; location at which the macro was expanded.
;;
(declare (current-file) &public)


;; This special form evaluates to `FILENAME:LINE:COL` describing the
;; "current" position in the program.  Ordinarily, this will refer to the
;; location in the source file where the `(current-file-line)` call appears,
;; but when it appears within a macro it refers to the location at which the
;; macro was expanded.
;;
(declare (current-file-line) &public)


;;
;; Runtime functions
;;


;; Call LAMBDA, passing as arguments the members of the vector VEC.
;;
;; Example:
;;
;;     > (apply nth [3 "a b c d"])
;;     "c"
;;
(declare (apply lambda vec) &public)


;; `demote` encodes any value as a word so that it may be embedded in a word
;; list.  It is used internally to construct vectors.
;;
(declare (demote value) &public)


;; `promote` reverses the encoding done by `demote`.
;;
(declare (promote value) &public)


;; Returns the value stored at index INDEX (1-based) in vector VEC.
;;
(declare (nth index vec) &public)


;; Logically invert A.  If A is `nil`, return 1.  Otherwise, return `nil`.
;;
(declare (not a) &public)


;; Get the tail of LIST, starting at the Nth element (1-based).
;;
(declare (nth-rest n list) &public)


;; Get the first element of VEC.
;;
(declare (first vec) &public)


;; Remove the first element from vector (or list) VEC.
;;
(declare (rest vec) &public)


;; Remove the first two elements from vector (or list) VEC.
;;
(declare (rrest vec) &public)


;; Replace PAT with REPL if STR matches PAT; return nil otherwise.
;;
(declare (filtersub pat repl str) &public)


;; Add FUNC to a list of functions that will be run after `main` exits.
;; The earliest-registered functions will be called last.
;;
;; If UNIQUE is non-nil and FUNC has already been registered, it will not be
;; added again.
;;
(declare (at-exit func ?unique) &public)


;; Evaluate EXPR with tracing activated according to SPEC.
;;
;; SPEC is a string used to specify which functions are traced and how they
;; are traced.  In its simplest form, it is a list of function names.
;; Beyond that, a `:` followed by a "mode" may be appended to each name.
;; Possible modes are:
;;
;;  - `t` : Print the function name and arguments when it is called and its
;;          return value when it returns.  This is the default mode.
;;
;;  - `f` : Print just the function name on entry and exit.
;;
;;  - `c` : Count the number of times that the function is invoked.
;;          Function counts will be written to stdout when tracing is
;;          removed.  This can occur when `(tracing ...)` completes, or when
;;          `(untrace ...)` is called, or after `main` returns.
;;
;;  - `x<N>` : Evaluate the function body N times each time the function is
;;          invoked.  <N> must be a positive number or the empty string
;;          (which is treated as 11).
;;
;;  - `-` : Exclude the function(s) from instrumentation.  Any functions
;;          matched by this entry will be skipped even when they match other
;;          entries in the specification string.  This does not depend on
;;          the ordering of entries.  For example, `(trace "a% %z:-")` will
;;          instrument all functions whose names begin with `a` except for
;;          those whose names end in `z`.
;;
;; In place of a function name a pattern may be provided to match multiple
;; functions.  In a pattern, the `%` character is a wildcard that will match
;; any sequence of characters.  Some caution must be exercised in general
;; with tracing, especially when using wildcards: Do not instrument any
;; function while it is currently running.  SCAM prevents this from
;; happening when you use `SCAM_TRACE`, or when you call `trace` or
;; `tracing` at the top level of a source file, the REPL, or your `main`
;; function.  However, if while nested in one or more other user-defined
;; functions, you trace any of those functions, then undefined behavior will
;; result.
;;
;; The intent of `x` instrumentation is to cause the function to consume
;; more time by a factor of N (for profiling purposes).  If your code is
;; purely functional, or at least limits its side effects to idempotent
;; operations, repetition of expressions should not alter the behavior of
;; the program.  This can be used to identify and quantify hotspots in a
;; program.
;;
;; See the [reference manual](reference.md#debugging) for examples.
;;
(declare `(tracing spec expr) &public)


;; Instrument functions for tracing as described by SPEC.
;;
;; SPEC is as documented for `tracing`.
;;
;; The return value is a list of the names of the instrumented functions,
;; which can be passed to `untrace` later.
;;
(declare (trace spec) &public)


;; Remove instrumentation from functions listed in NAMES, or functions
;; matched by patterns in NAMES.
;;
(declare (untrace names ?retval) &public)


;; Add NAMES to the list of functions that should not be instrumented when
;; `trace` or `tracing` are called.  In order to avoid undefined behavior,
;; we must avoid instrumenting functions *while* they are executing.
;;
(declare (do-not-trace names) &public)


;;
;; Internals: The following functions are not officially part of the SCAM
;;   language.  They provide access to lower-level Make features, and cannot
;;   be described completely without introducing implementation complexities
;;   of SCAM and "alien" aspects of Make.  They are labeled &internal, not
;;   &public, in order to exclude them from libraries.md.
;;


;; Call function variable whose native name is NAME with elements of vector
;; ARGV as arguments.
;;
(declare (name-apply func-name argv) &internal)


;; Return 1 if native variable VAR-NAME has been assigned a value (as a data
;; or function variable), or `nil` if unassigned.
;;
(declare `(native-bound? var-name) &internal)


;; Call a function, given its native name.
;;
(declare (native-call var-name ...args) &internal)


;; Evaluate STR as GNU Make source.
;;
(declare (native-eval str) &internal)


;; Describe the flavor of native variable VAR-NAME.  One of:
;;
;;  * `"simple"`
;;  * `"recursive"`
;;  * `"undefined"`
;;
(declare (native-flavor var-name) &internal)


;; Get the "native name" of a SCAM global variable, function, or a built-in
;; function.
;;
(declare (native-name var-name) &internal)


;; Describe the GNU make origin of native variable VAR-NAME.  Origin values
;; include: `"undefined"`, `"file"`, `"command line"`, `"automatic"`, ... .
;; See GNU Make docs for more.
;;
(declare (native-origin var-name) &internal)


;; Return the value of native variable VAR-NAME.
;;
(declare (native-value var-name) &internal)


;; Evaluate a GNU Make variable.  Unlike `value`, native-var will trigger
;; expansion of recursive variables.
;;
(declare (native-var var-name) &internal)


;; Assign VALUE to the native variable VAR-NAME as a data variable.  This
;; will replace any data or function variable binding for VAR-NAME.
;;
(declare (set-native var-name value ?retval) &internal)


;; Assign VALUE to the native variable FUNC-NAME as a function variable.
;; This will replace any data or function variable binding for FUNC-NAME.
;;
;; Function variables cannot store values with complete fidelity -- the
;; value read back using `(native-value FUNC-NAME)` may not be exactly the
;; same.  However, it is guaranteed that when a SCAM function value is
;; assigned to a function, the variable's *behavior* (when called as a
;; function) will be as expected; furthermore, the value read back will be
;; functionally equivalent to the original SCAM function.
;;
;; Function names cannot begin or end in spaces, and other limitations may
;; apply depending on the version of Make, but any valid SCAM symbol will
;; work.
;;
(declare (set-native-fn func-name value ?retval) &internal)
